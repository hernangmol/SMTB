
SMTB/Rev0_6/out/Rev0_6.elf:     file format elf32-littlearm
SMTB/Rev0_6/out/Rev0_6.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a00370d

Program Header:
0x70000001 off    0x00018c10 vaddr 0x1a008c10 paddr 0x1a008c10 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00004ff8 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00008c18 memsz 0x00008c18 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a008c18 align 2**16
         filesz 0x000000b4 memsz 0x000000b4 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008c0c  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b4  10000000  1a008c18  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200b4  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200b4  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200b4  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200b4  2**2
                  CONTENTS
  6 .bss          00004f44  100000b4  100000b4  000000b4  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200b4  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200b4  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200b4  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200b4  2**2
                  CONTENTS
 11 .init_array   00000004  1a008c0c  1a008c0c  00018c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a008c10  1a008c10  00018c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000200b4  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000200b4  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000200b4  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000200b4  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000200b4  2**2
                  CONTENTS
 18 .noinit       00000000  10004ff8  10004ff8  000200b4  2**2
                  CONTENTS
 19 .debug_info   00048e62  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 0000822a  00000000  00000000  00068f16  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000107af  00000000  00000000  00071140  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00001400  00000000  00000000  000818ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00001718  00000000  00000000  00082cef  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  000149e3  00000000  00000000  00084407  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   00027696  00000000  00000000  00098dea  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    00032dfc  00000000  00000000  000c0480  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000068  00000000  00000000  000f327c  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  000f32e4  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00003ca0  00000000  00000000  000f3318  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000b4 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a008c0c l    d  .init_array	00000000 .init_array
1a008c10 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10004ff8 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 SMTB_EEPROM.c
00000000 l    df *ABS*	00000000 oneWire.c
00000000 l    df *ABS*	00000000 DS18B20.c
00000000 l    df *ABS*	00000000 SMTB_BUTTONS.c
00000000 l    df *ABS*	00000000 main.c
100000bc l     O .bss	00000004 p_Bus
100000c0 l     O .bss	00000004 p_Bus_2
00000000 l    df *ABS*	00000000 OW_port.c
100000cc l     O .bss	00000018 bus.14176
100000e4 l     O .bss	00000018 bus.14189
10000004 l     O .data	00000004 punt.14177
10000008 l     O .data	00000004 punt.14190
00000000 l    df *ABS*	00000000 SMTB_LCD.c
00000000 l    df *ABS*	00000000 SUCI.c
00000000 l    df *ABS*	00000000 SMTB_LOOP.c
00000000 l    df *ABS*	00000000 SMTB_LEDMAT.c
00000000 l    df *ABS*	00000000 system.c
100000fc l     O .bss	00000004 heap_end.5864
00000000 l    df *ABS*	00000000 heap_4.c
1a003860 l     F .text	00000064 prvHeapInit
10000104 l     O .bss	00004000 ucHeap
1a0038c4 l     F .text	00000058 prvInsertBlockIntoFreeList
10000100 l     O .bss	00000004 pxEnd
10004104 l     O .bss	00000004 xBlockAllocatedBit
10004108 l     O .bss	00000004 xFreeBytesRemaining
1000410c l     O .bss	00000004 xMinimumEverFreeBytesRemaining
10004110 l     O .bss	00000008 xStart
00000000 l    df *ABS*	00000000 queue.c
1a003aa8 l     F .text	0000001e prvIsQueueFull
1a003ac6 l     F .text	0000001a prvIsQueueEmpty
1a003ae0 l     F .text	00000076 prvCopyDataToQueue
1a003b56 l     F .text	00000024 prvCopyDataFromQueue
1a003b7a l     F .text	0000006e prvUnlockQueue
1a003c6c l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
10004118 l     O .bss	00000190 uxIdleTaskStack.10813
100042a8 l     O .bss	00000640 uxTimerTaskStack.10820
100048e8 l     O .bss	00000060 xIdleTaskTCB.10812
10004948 l     O .bss	00000060 xTimerTaskTCB.10819
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a0042b8 l     F .text	0000002c prvResetNextTaskUnblockTime
1a0042e4 l     F .text	00000090 prvInitialiseNewTask
1a004374 l     F .text	00000068 prvInitialiseTaskLists
1a0043dc l     F .text	000000ac prvAddNewTaskToReadyList
1a004488 l     F .text	00000038 prvDeleteTCB
1a0044c0 l     F .text	0000004c prvCheckTasksWaitingTermination
1a00450c l     F .text	00000028 prvIdleTask
1a004534 l     F .text	00000098 prvAddCurrentTaskToDelayedList
100049ac l     O .bss	00000004 pxDelayedTaskList
100049b0 l     O .bss	00000004 pxOverflowDelayedTaskList
100049b4 l     O .bss	0000008c pxReadyTasksLists
10004a40 l     O .bss	00000004 uxCurrentNumberOfTasks
10004a44 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10004a48 l     O .bss	00000004 uxPendedTicks
10004a4c l     O .bss	00000004 uxSchedulerSuspended
10004a50 l     O .bss	00000004 uxTaskNumber
10004a54 l     O .bss	00000004 uxTopReadyPriority
10004a58 l     O .bss	00000014 xDelayedTaskList1
10004a6c l     O .bss	00000014 xDelayedTaskList2
10004a80 l     O .bss	00000004 xNextTaskUnblockTime
10004a84 l     O .bss	00000004 xNumOfOverflows
10004a88 l     O .bss	00000014 xPendingReadyList
10004a9c l     O .bss	00000004 xSchedulerRunning
10004aa0 l     O .bss	00000014 xSuspendedTaskList
10004ab4 l     O .bss	00000014 xTasksWaitingTermination
10004ac8 l     O .bss	00000004 xTickCount
10004acc l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a004cf0 l     F .text	00000020 prvGetNextExpireTime
1a004d10 l     F .text	00000048 prvInsertTimerInActiveList
1a004d58 l     F .text	00000070 prvCheckForValidListAndQueue
1a004dc8 l     F .text	00000040 prvInitialiseNewTimer
1a005184 l     F .text	00000016 prvTimerTask
1a004f10 l     F .text	00000078 prvSwitchTimerLists
1a004f88 l     F .text	0000002c prvSampleTimeNow
1a004fb4 l     F .text	00000060 prvProcessExpiredTimer
1a005014 l     F .text	00000074 prvProcessTimerOrBlockTask
1a005088 l     F .text	000000fc prvProcessReceivedCommands
10004ad0 l     O .bss	00000004 pxCurrentTimerList
10004ad4 l     O .bss	00000004 pxOverflowTimerList
10004ad8 l     O .bss	000000a0 ucStaticTimerQueueStorage.11914
10004b78 l     O .bss	00000014 xActiveTimerList1
10004b8c l     O .bss	00000014 xActiveTimerList2
10004ba0 l     O .bss	00000004 xLastTime.11863
10004ba4 l     O .bss	00000050 xStaticTimerQueue.11913
10004bf4 l     O .bss	00000004 xTimerQueue
10004bf8 l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a00519c l     F .text	00000040 prvTaskExitError
1a0051dc l     F .text	00000022 prvPortStartFirstTask
1a005204 l     F .text	0000000e vPortEnableVFP
1a005270 l       .text	00000000 pxCurrentTCBConst2
1a005350 l       .text	00000000 pxCurrentTCBConst
10004bfc l     O .bss	00000001 ucMaxSysCallPriority
10004c00 l     O .bss	00000004 ulMaxPRIGROUPValue
1000000c l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 freertos_cm_support.c
00000000 l    df *ABS*	00000000 board.c
1a005544 l     F .text	00000044 Board_LED_Init
1a005588 l     F .text	00000040 Board_TEC_Init
1a0055c8 l     F .text	00000040 Board_GPIO_Init
1a005608 l     F .text	00000030 Board_ADC_Init
1a005638 l     F .text	00000038 Board_SPI_Init
1a005670 l     F .text	00000024 Board_I2C_Init
1a0088cc l     O .text	00000008 GpioButtons
1a0088d4 l     O .text	0000000c GpioLeds
1a0088e0 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a0088f8 l     O .text	00000004 InitClkStates
1a0088fc l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a0057e4 l     F .text	0000002c Chip_UART_GetIndex
1a008970 l     O .text	00000008 UART_BClock
1a008978 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a005980 l     F .text	00000014 Chip_ADC_GetClockIndex
1a005994 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a005a5c l     F .text	000000a0 pll_calc_divs
1a005afc l     F .text	0000010c pll_get_frac
1a005c08 l     F .text	0000004c Chip_Clock_FindBaseClock
1a005e7c l     F .text	00000022 Chip_Clock_GetDivRate
10004c08 l     O .bss	00000008 audio_usb_pll_freq
1a00898c l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a0089f8 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 eeprom_18xx_43xx.c
1a006140 l     F .text	0000001c setClkDiv
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a006186 l     F .text	0000001a SSP_Write2BFifo
1a0061a0 l     F .text	00000018 SSP_Write1BFifo
1a0061b8 l     F .text	00000042 SSP_Read2BFifo
1a0061fa l     F .text	00000040 SSP_Read1BFifo
1a00623c l     F .text	00000014 Chip_SSP_GetClockIndex
1a006250 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000010 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a008a40 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_spi.c
00000000 l    df *ABS*	00000000 sapi_tick.c
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a006614 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10004c10 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 display_lcd_hd44780_gpios.c
1a0069e8 l     F .text	0000000a lcdPinSet
1a0069f2 l     F .text	0000002e lcdSendNibble
1a006a20 l     F .text	0000001c lcdEnablePulse
10004c14 l     O .bss	0000000a lcd
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a0070e8 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a00749c l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 impure.c
10000054 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a008c10 l       .init_array	00000000 __init_array_end
1a008c0c l       .bss_RAM5	00000000 __preinit_array_end
1a008c0c l       .init_array	00000000 __init_array_start
1a008c0c l       .bss_RAM5	00000000 __preinit_array_start
1a007a84 g     F .text	00000028 putchar
1a005ca0 g     F .text	0000001c Chip_Clock_GetDividerSource
1a0037ac g     F .text	00000012 _isatty_r
1a001af8 g     F .text	00000054 readROM
1a007aac g     F .text	000000dc _puts_r
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a00647c g     F .text	00000014 uartRxRead
1a006570 g     F .text	0000001c uartWriteByteArray
1a0037be g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a00155c g     F .text	00000040 altaSecUpdate
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a002f08 g     F .text	00000050 SMTB_Alta_Init
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0052b8 g     F .text	0000002c vPortExitCritical
1a00159c g     F .text	00000050 altaSec2Update
1a004e6c g     F .text	00000038 xTimerCreate
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a006538 g     F .text	0000001e uartReadByte
1a007a54 g     F .text	00000030 printf
1a00572a g     F .text	00000008 __stdio_init
10004fec g     O .bss	00000001 __lock___atexit_recursive_mutex
1a00134c g     F .text	00000088 menuEjeUpdate
1a007bf2 g     F .text	00000024 __sseek
1a007198 g     F .text	00000070 __sinit
1a00262c g     F .text	000000c4 OWinit2
1a007c30 g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a004144 g     F .text	00000052 vQueueWaitForMessageRestricted
1a0016d8 g     F .text	0000007c menuSensInit
1a00713c g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a005a3a g     F .text	0000000c Chip_ADC_SetResolution
1a007f2c g     F .text	0000000c __malloc_unlock
100000c4 g     O .bss	00000004 quiet
10004c30 g     O .bss	00000004 buttonState
10004c34 g     O .bss	0000008c menu
1a005354 g     F .text	0000002c SysTick_Handler
1a005864 g     F .text	00000040 Chip_UART_SetBaud
100000b8 g     O .bss	00000004 j
10004fed g     O .bss	00000001 __lock___arc4random_mutex
1a0004a8 g     F .text	00000120 OWcommand
1a003708  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
10004c28 g     O .bss	00000004 OneWireStruct
1a0056cc g     F .text	0000001c Board_UARTGetChar
1a0015ec g     F .text	0000007c menuInit
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a0052f0 g     F .text	00000064 PendSV_Handler
1a003ef0 g     F .text	000000ce xQueueGenericSendFromISR
1a003532 g     F .text	0000003c semaphoreTest
1a000178  w    F .text	00000002 NMI_Handler
1a008c18 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0008a4 g     F .text	00000090 buttonsUpdate
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
100049a8 g     O .bss	00000004 pxCurrentTCB
1a003068 g     F .text	00000074 SMTB_ROM_consist_update
1a0037a2 g     F .text	0000000a _fstat_r
53ff4182 g       *ABS*	00000000 __valid_user_code_checksum
1a008c18 g       .ARM.exidx	00000000 _etext
1a001b4c g     F .text	00000118 copyROM
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a004b74 g     F .text	00000018 vTaskInternalSetTimeOutState
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a005f1e g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a0053b8 g     F .text	00000110 xPortStartScheduler
1a00731e g     F .text	0000001c memcpy
1a004a80 g     F .text	00000030 vTaskPlaceOnEventList
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a007130 g     F .text	0000000c _cleanup_r
1a005380  w    F .text	00000038 vPortSetupTimerInterrupt
1a003510 g     F .text	00000022 buzzer_test
1a006c60 g     F .text	00000000 .hidden __aeabi_uldivmod
10004ff8 g       .noinit	00000000 _noinit
1a007b88 g     F .text	00000010 puts
1a003a38 g     F .text	00000070 vPortFree
10004fe4 g     O .bss	00000004 SystemCoreClock
1a0034aa g     F .text	0000002c rom_test
1a001668 g     F .text	00000070 menuAlarmInit
1a005810 g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a0054c8 g     F .text	0000005c vPortValidateInterruptPriority
1a001c64 g     F .text	000000a8 menuROMupdate
1a000180  w    F .text	00000002 UsageFault_Handler
1a003424 g     F .text	00000044 remote_uci_test
1a005f9c g     F .text	0000004c Chip_Clock_GetRate
1a00271c g     F .text	00000070 OWreadBit
1a0041b2 g     F .text	00000016 vListInsertEnd
1a000720 g     F .text	00000022 OWwriteByte
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a00576c g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a002568 g     F .text	000000c4 OWinit
10004cc0 g     O .bss	00000004 windowStart
1a000964 g     F .text	000001f0 vTask1
10004c2c g     O .bss	00000004 OneWireStruct2
1a006c90 g     F .text	000002d0 .hidden __udivmoddi4
1a003840 g     F .text	00000020 _sbrk_r
1a0088c8 g     O .text	00000004 ExtRateIn
1a000940 g     F .text	0000000c normalTimerCallback
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a002864 g     F .text	00000088 SMTB_LCD_Init
1a0037c8 g     F .text	0000004e _read_r
1a0041ac g     F .text	00000006 vListInitialiseItem
1a001754 g     F .text	00000084 menuROMInit
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a002e54 g     F .text	000000b4 SMTB_Alarm_View_Init
1a003fc0 g     F .text	0000015c xQueueReceive
10004fa4 g     O .bss	00000040 xQueueRegistry
1a006bfa g     F .text	00000014 lcdCursorSet
1a00423c g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a00644c g     F .text	00000018 uartRxReady
1a008c10 g       .ARM.exidx	00000000 __exidx_start
1a001a78 g     F .text	0000006c menuROMcopyInit
10004fee g     O .bss	00000001 __lock___env_recursive_mutex
1a0002fc g     O .text	00000004 CRP_WORD
1a001994 g     F .text	00000070 menuPosInit
10004fef g     O .bss	00000001 __lock___sinit_recursive_mutex
1a008bd4 g     O .text	00000004 _global_impure_ptr
1a001ae4 g     F .text	00000014 semaphoreInit
1a0035ee g     F .text	00000016 ledMatrixClear
1a0072d0 g     F .text	00000048 __libc_init_array
1a0021e4 g     F .text	0000000e resetSensors
1a002bcc g     F .text	000001b0 SMTB_Mode_Show
1a000604 g     F .text	0000011c OWsearch
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a00391c g     F .text	0000011c pvPortMalloc
10000000 g     O .data	00000004 button
1a0056e8 g     F .text	00000030 Board_Init
1a003796  w    F .text	00000002 _init
1a004196 g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a00359a g     F .text	00000054 ledMatrixInit
1a006174 g     F .text	00000010 Chip_EEPROM_WaitForIntStatus
1a00627a g     F .text	000000a8 Chip_SSP_RWFrames_Blocking
1a002d7c g     F .text	000000d8 SMTB_Menu_Show
1a00615c g     F .text	00000018 Chip_EEPROM_Init
10004cc8 g     O .bss	000000c0 rem_ROM
1a004748 g     F .text	0000000c xTaskGetTickCount
1a003d70 g     F .text	00000180 xQueueGenericSend
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10004ff8 g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a00370c g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a002afc g     F .text	000000d0 SMTB_Temp_Show
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a0063dc g     F .text	00000038 Chip_I2C_SetClockRate
10004d88 g     O .bss	00000004 normalTimer
10004d8c g     O .bss	00000001 crc
1a004c3c g     F .text	000000b4 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a000300 g     F .text	000000c8 Board_EEPROM_recSensor
1a000744 g     F .text	0000007c DSmultipleConv
1a005c54 g     F .text	0000004c Chip_Clock_EnableCrystal
10004ff0 g     O .bss	00000001 __lock___malloc_recursive_mutex
1a00285c g     F .text	00000008 enableInterrupts
1a0034d8 g     F .text	00000038 ROM_request
1a007f38 g     F .text	00000090 _putc_r
10004d8d g     O .bss	00000001 Temp_buffer
10008000 g       *ABS*	00000000 __top_RamLoc32
1a0085c4 g     O .text	00000008 Bloque
1a004ae8 g     F .text	0000008c xTaskRemoveFromEventList
1a004280  w    F .text	0000001c vApplicationMallocFailedHook
1a00018a g     F .text	0000001e data_init
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a008b74 g     O .text	00000020 __sf_fake_stderr
1a0063b8 g     F .text	00000024 Chip_I2C_Init
1a0085cc g     O .text	00000008 Entrepiso
1a00731c g     F .text	00000002 __retarget_lock_release_recursive
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a0087d4 g     O .text	00000008 SupDer
1a005e10 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a003154 g     F .text	00000230 SMTB_Status_Show
1a008a88 g     O .text	000000e6 gpioPinsInit
100000b4 g     O .bss	00000004 i
1a004254  w    F .text	0000002c vAssertCalled
1a006556 g     F .text	0000001a uartWriteByte
1a006268 g     F .text	00000012 Chip_SSP_SetClockRate
10004d8e g     O .bss	00000001 quantAlarm
10004d8f g     O .bss	00000001 Estado_buffer
1a0068c6 g     F .text	00000016 gpioToggle
1a0074ca g     F .text	00000024 __sfputs_r
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a001d90 g     F .text	000003c8 vDisplayMng
1a007168 g     F .text	0000000c __sfp_lock_acquire
1a007e80 g     F .text	00000000 memchr
1a0087dc g     O .text	00000008 SupIzq
1a004b8c g     F .text	00000084 xTaskCheckForTimeOut
10004d90 g     O .bss	00000004 consoleQueue
1a00734c g     F .text	0000009c _free_r
1a005ef8 g     F .text	00000026 Chip_Clock_GetBaseClock
1a0022e0 g     F .text	00000288 vButtonMng
1a006aa4 g     F .text	000000f4 lcdInit
100000b4 g       .bss	00000000 _bss
1a005a08 g     F .text	00000032 Chip_ADC_SetSampleRate
1a0085dc g     O .text	00000008 InfIzq
10004c04 g     O .bss	00000004 freeRtosInterruptCallback
1a004738 g     F .text	00000010 vTaskSuspendAll
1a0007c0 g     F .text	000000b4 DSreadROMtemp
1a0085d4 g     O .text	00000008 InfDer
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a006322 g     F .text	0000003e Chip_SSP_SetBitRate
1a0041fc g     F .text	00000026 uxListRemove
1a006184 g     F .text	00000002 Chip_GPIO_Init
1a0088f4 g     O .text	00000004 OscRateIn
1a0068f8 g     F .text	0000005a delayInaccurateMs
1a006490 g     F .text	00000016 uartRxFlush
1a0064bc g     F .text	0000007c uartInit
1a0021f4 g     F .text	000000ec menuSensUpdate
1a0045cc g     F .text	00000072 xTaskCreateStatic
10004ff8 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0049b4 g     F .text	000000cc vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a001d0c g     F .text	00000084 ROMconsist
1a0065dc g     F .text	0000002c spiWrite
1a0026f0 g     F .text	0000002c OWdelay_uS
1a006a74 g     F .text	00000030 lcdData
10004d94 g     O .bss	00000001 quantActive
1a003410 g     F .text	00000014 getStatus
1a003c8e g     F .text	00000092 xQueueGenericCreateStatic
1a004ab0 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a003798 g     F .text	0000000a _close_r
1a006648 g     F .text	000001ac gpioInit
1a00094c g     F .text	00000018 UCI_2_task
1a003108 g     F .text	00000018 SMTB_ROM_constCheckNotRun
1a004224 g     F .text	00000018 vApplicationGetIdleTaskMemory
1a0030dc g     F .text	0000002c SMTB_ROM_copying
10004cc4 g     O .bss	00000004 itemSelected
10004d95 g     O .bss	00000001 flagDegraded
1a004ea4 g     F .text	0000006c xTimerGenericCommand
1a007cd4 g     F .text	000000dc __swsetup_r
1a00429c  w    F .text	0000001c vApplicationStackOverflowHook
1a006f60  w    F .text	00000002 .hidden __aeabi_ldiv0
1a007208 g     F .text	0000008c __sfp
1a006a3c g     F .text	00000038 lcdCommand
1a003050 g     F .text	00000018 SMTB_ROM_consist_NOK
1a00718c g     F .text	0000000c __sinit_lock_release
1a007b98 g     F .text	00000022 __sread
1a000400 g     F .text	00000026 Board_EEPROM_loadSensor
1a0068dc g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a007f20 g     F .text	0000000c __malloc_lock
1a0056b8 g     F .text	00000014 Board_UARTPutChar
1a003384 g     F .text	0000006c SMTB_Init
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a002854 g     F .text	00000008 disableInterrupts
1a007070 g     F .text	00000078 _fflush_r
1a008b94 g     O .text	00000020 __sf_fake_stdin
1a005cbc g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a00731a g     F .text	00000002 __retarget_lock_acquire_recursive
1a00733a g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a001130 g     F .text	00000094 main
1a007318 g     F .text	00000002 __retarget_lock_init_recursive
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a00658c g     F .text	00000050 spiInit
1a0041c8 g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
10004d98 g     O .bss	00000004 intercommQueue
1a005250 g     F .text	00000024 SVC_Handler
1a00043c g     F .text	0000006c OWpresence
1a007c16 g     F .text	00000008 __sclose
1a006c24 g     F .text	0000003c lcdCreateChar
1a004e08 g     F .text	00000064 xTimerCreateTimerTask
1a0073e8 g     F .text	000000b4 _malloc_r
1a00191c g     F .text	00000078 menuEjeInit
1a006464 g     F .text	00000018 uartTxReady
1a0017d8 g     F .text	00000090 menuLoopInit
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a005f2c g     F .text	0000003c Chip_Clock_EnableOpts
1a005722 g     F .text	00000008 __stdio_getchar
1a003d20 g     F .text	0000004e xQueueGenericCreate
1a001a04 g     F .text	00000074 menuConfInit
1a005cd8 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a005d90 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a003138 g     F .text	0000001c SMTB_pending
1a006414 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0069b0 g     F .text	00000038 delay
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0005c8 g     F .text	0000003a OWcrc
1a0067f4 g     F .text	0000006a gpioWrite
1a003794  w    F .text	00000002 _fini
1a007a54 g     F .text	00000030 iprintf
1a0087e4 g     O .text	00000008 Techo
1a0028ec g     F .text	00000210 printDig
1a00486c g     F .text	000000fc xTaskResumeAll
1a00278c g     F .text	000000c8 OWwriteBit
1a0046a4 g     F .text	00000094 vTaskStartScheduler
1a0059c8 g     F .text	00000040 Chip_ADC_Init
10004fe8 g     O .bss	00000004 g_pUsbApi
1a005734 g     F .text	00000038 Board_SetupMuxing
1a0085e4 g     O .text	00000008 Piso
1a006b98 g     F .text	00000050 lcdGoToXY
1a0058a4 g     F .text	000000dc Chip_UART_SetBaudFDR
1a006608 g     F .text	0000000a tickRead
1a003816 g     F .text	00000028 _write_r
1a003038 g     F .text	00000018 SMTB_ROM_consist_OK
10000048 g     O .data	00000008 tickRateMS
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a007740 g     F .text	000000ea _printf_common
10000050 g     O .data	00000004 _impure_ptr
1a006f64 g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1b000000 g       .text	00000000 __core_m0app_START__
1a0033f0 g     F .text	00000020 setStatus
1a006c0e g     F .text	00000016 lcdSendStringRaw
1a0064a8 g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a002f58 g     F .text	000000b4 SMTB_Sens_View_Init
10000000 g       .data	00000000 _data
1a004c10 g     F .text	0000000c vTaskMissedYield
1a00148c g     F .text	000000d0 menuLoopUpdate
10004ff8 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a000874 g     F .text	00000030 buttonsInit
1a006360 g     F .text	00000038 Chip_SSP_Init
1a00411c g     F .text	00000028 vQueueAddToRegistry
10004d9c g     O .bss	000001e0 sensor
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a004754 g     F .text	00000118 xTaskIncrementTick
1a00133c g     F .text	00000010 menuViewUpdate
1a0011c4 g     F .text	000000d0 altaUpdate
1a002158 g     F .text	0000008c menuROMupdate1
1a007db0 g     F .text	00000048 __swhatbuf_r
1a005524 g     F .text	00000020 DAC_IRQHandler
1a005694 g     F .text	00000024 Board_Debug_Init
1a00356e g     F .text	0000002c writeRow
10004f7c g     O .bss	00000001 modo
1a005718 g     F .text	0000000a __stdio_putchar
1a003be8 g     F .text	00000084 xQueueGenericReset
100000b4 g       .data	00000000 _edata
1a006398 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
10004ff1 g     O .bss	00000001 __lock___at_quick_exit_mutex
1a00463e g     F .text	00000066 xTaskCreate
1a003604 g     F .text	00000104 ledMatrixTest
1a0013d4 g     F .text	000000b8 menuPosUpdate
1a005fe8 g     F .text	00000158 Chip_SetupCoreClock
1a003468 g     F .text	00000042 uci_id_test
1a007bba g     F .text	00000038 __swrite
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
10004f80 g     O .bss	00000004 ROM_active
1a0074f0 g     F .text	00000250 _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a007294 g     F .text	0000003c _fwalk_reent
1a005a48 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a004968 g     F .text	0000004c vTaskDelay
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a007174 g     F .text	0000000c __sfp_lock_release
1a006be8 g     F .text	00000012 lcdClear
1a008bb4 g     O .text	00000020 __sf_fake_stdout
1a004c1c g     F .text	00000020 xTaskGetSchedulerState
1a006952 g     F .text	0000005c delayInaccurateUs
1a006f60  w    F .text	00000002 .hidden __aeabi_idiv0
1a000b54 g     F .text	00000244 sensorMng
100000c8 g     O .bss	00000001 systemMode
1a000428 g     F .text	00000014 Board_EEPROM_init
1a000d98 g     F .text	00000064 vConsoleMng
1a00017e  w    F .text	00000002 BusFault_Handler
10004ff2 g     O .bss	00000001 __lock___dd_hash_mutex
1a007df8 g     F .text	00000080 __smakebuf_r
10004ff3 g     O .bss	00000001 __lock___tz_mutex
1a007c1e g     F .text	00000010 strlen
1a005218 g     F .text	0000002c pxPortInitialiseStack
1a00782c g     F .text	00000228 _printf_i
10004f84 g     O .bss	00000004 silenceTimer
1a005f68 g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
1a00300c g     F .text	0000002c SMTB_ROM_consist
1a001868 g     F .text	000000b4 menuUpdate
10004c24 g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a00685e g     F .text	00000068 gpioRead
10004f88 g     O .bss	00000001 flagAlarm
1a005274 g     F .text	00000044 vPortEnterCritical
10004c20 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0074f0 g     F .text	00000250 _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a003120 g     F .text	00000018 SMTB_ROM_constOk
10004f89 g     O .bss	00000001 Sensor_buffer
10004f8c g     O .bss	00000004 status
1a000dfc g     F .text	00000334 vCommMng
1a000934 g     F .text	0000000c silenceTimerCallback
1a005ea0 g     F .text	00000058 Chip_Clock_SetBaseClock
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
10004ff4 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a001294 g     F .text	000000a8 menuAlarmUpdate
10004f90 g     O .bss	00000014 un_buffer
1a007180 g     F .text	0000000c __sinit_lock_acquire
1a0057d8 g     F .text	0000000c Board_SystemInit
1a0003c8 g     F .text	00000038 Board_EEPROM_readByte



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 0d 37 00 1a 79 01 00 1a 7b 01 00 1a     .....7..y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 82 41 ff 53     }............A.S
	...
1a00002c:	51 52 00 1a 85 01 00 1a 00 00 00 00 f1 52 00 1a     QR...........R..
1a00003c:	55 53 00 1a                                         US..

1a000040 <g_pfnVendorVectors>:
1a000040:	25 55 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     %U..............
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	dd 68 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     .h..............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a008c18 	.word	0x1a008c18
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000b4 	.word	0x000000b4
1a000120:	1a008c18 	.word	0x1a008c18
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a008c18 	.word	0x1a008c18
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a008c18 	.word	0x1a008c18
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a008c18 	.word	0x1a008c18
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000b4 	.word	0x100000b4
1a000154:	00004f44 	.word	0x00004f44
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
#endif

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <Board_EEPROM_recSensor>:
		}
	// ToDo: return!!!!!!!!!!!!!
}

int Board_EEPROM_recSensor(int posicion, tempSens_t sensor)
{
1a000300:	b084      	sub	sp, #16
1a000302:	b570      	push	{r4, r5, r6, lr}
1a000304:	ac05      	add	r4, sp, #20
1a000306:	e884 000e 	stmia.w	r4, {r1, r2, r3}
	uint32_t aux = 0;
	int addr = (EEPROM_CLUSTER*512) + (posicion)*12;
1a00030a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a00030e:	0082      	lsls	r2, r0, #2
	if(addr>=(16*1024))
1a000310:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
1a000314:	da51      	bge.n	1a0003ba <Board_EEPROM_recSensor+0xba>
		return -1;
	int addr4 = addr/4;
1a000316:	4613      	mov	r3, r2
1a000318:	2a00      	cmp	r2, #0
1a00031a:	db10      	blt.n	1a00033e <Board_EEPROM_recSensor+0x3e>
1a00031c:	109e      	asrs	r6, r3, #2
	int pageAddr = addr4/EEPROM_PAGE_SIZE;
1a00031e:	4613      	mov	r3, r2
1a000320:	2a00      	cmp	r2, #0
1a000322:	db0e      	blt.n	1a000342 <Board_EEPROM_recSensor+0x42>
1a000324:	125b      	asrs	r3, r3, #9
	int pageOffset = addr4 - pageAddr*EEPROM_PAGE_SIZE;
1a000326:	eba6 16c3 	sub.w	r6, r6, r3, lsl #7
	uint32_t *pEepromMem = (uint32_t*)EEPROM_ADDRESS(pageAddr,pageOffset*4);
1a00032a:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
1a00032e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a000332:	eb06 1643 	add.w	r6, r6, r3, lsl #5
1a000336:	00b6      	lsls	r6, r6, #2
	for(int i=0; i<4; i++)
1a000338:	2400      	movs	r4, #0
	uint32_t aux = 0;
1a00033a:	4625      	mov	r5, r4
	for(int i=0; i<4; i++)
1a00033c:	e005      	b.n	1a00034a <Board_EEPROM_recSensor+0x4a>
	int addr4 = addr/4;
1a00033e:	1cd3      	adds	r3, r2, #3
1a000340:	e7ec      	b.n	1a00031c <Board_EEPROM_recSensor+0x1c>
	int pageAddr = addr4/EEPROM_PAGE_SIZE;
1a000342:	f202 13ff 	addw	r3, r2, #511	; 0x1ff
1a000346:	e7ed      	b.n	1a000324 <Board_EEPROM_recSensor+0x24>
	for(int i=0; i<4; i++)
1a000348:	3401      	adds	r4, #1
1a00034a:	2c03      	cmp	r4, #3
1a00034c:	dc0b      	bgt.n	1a000366 <Board_EEPROM_recSensor+0x66>
	{
		printf("aux = %X\r\n", aux);
1a00034e:	4629      	mov	r1, r5
1a000350:	481b      	ldr	r0, [pc, #108]	; (1a0003c0 <Board_EEPROM_recSensor+0xc0>)
1a000352:	f007 fb7f 	bl	1a007a54 <iprintf>
		aux = aux + sensor.ROM_NO[i];
1a000356:	ab04      	add	r3, sp, #16
1a000358:	4423      	add	r3, r4
1a00035a:	791b      	ldrb	r3, [r3, #4]
1a00035c:	441d      	add	r5, r3
		if(i < 3)
1a00035e:	2c02      	cmp	r4, #2
1a000360:	dcf2      	bgt.n	1a000348 <Board_EEPROM_recSensor+0x48>
			aux *= 256;
1a000362:	022d      	lsls	r5, r5, #8
1a000364:	e7f0      	b.n	1a000348 <Board_EEPROM_recSensor+0x48>
	}
	printf("aux = %X\r\n", aux);
1a000366:	4629      	mov	r1, r5
1a000368:	4815      	ldr	r0, [pc, #84]	; (1a0003c0 <Board_EEPROM_recSensor+0xc0>)
1a00036a:	f007 fb73 	bl	1a007a54 <iprintf>
	pEepromMem[1] = aux;
1a00036e:	6075      	str	r5, [r6, #4]
	Chip_EEPROM_WaitForIntStatus(LPC_EEPROM, EEPROM_INT_ENDOFPROG);
1a000370:	2104      	movs	r1, #4
1a000372:	4814      	ldr	r0, [pc, #80]	; (1a0003c4 <Board_EEPROM_recSensor+0xc4>)
1a000374:	f005 fefe 	bl	1a006174 <Chip_EEPROM_WaitForIntStatus>
	aux = 0;
	for(int i=0; i<4; i++)
1a000378:	2400      	movs	r4, #0
	aux = 0;
1a00037a:	4625      	mov	r5, r4
	for(int i=0; i<4; i++)
1a00037c:	e000      	b.n	1a000380 <Board_EEPROM_recSensor+0x80>
1a00037e:	3401      	adds	r4, #1
1a000380:	2c03      	cmp	r4, #3
1a000382:	dc0c      	bgt.n	1a00039e <Board_EEPROM_recSensor+0x9e>
		{
			printf("aux = %X\r\n", aux);
1a000384:	4629      	mov	r1, r5
1a000386:	480e      	ldr	r0, [pc, #56]	; (1a0003c0 <Board_EEPROM_recSensor+0xc0>)
1a000388:	f007 fb64 	bl	1a007a54 <iprintf>
			aux = aux + sensor.ROM_NO[4 + i];
1a00038c:	1d23      	adds	r3, r4, #4
1a00038e:	aa04      	add	r2, sp, #16
1a000390:	4413      	add	r3, r2
1a000392:	791b      	ldrb	r3, [r3, #4]
1a000394:	441d      	add	r5, r3
			if(i < 3)
1a000396:	2c02      	cmp	r4, #2
1a000398:	dcf1      	bgt.n	1a00037e <Board_EEPROM_recSensor+0x7e>
				aux *= 256;
1a00039a:	022d      	lsls	r5, r5, #8
1a00039c:	e7ef      	b.n	1a00037e <Board_EEPROM_recSensor+0x7e>
		}
		printf("aux = %X\r\n", aux);
1a00039e:	4629      	mov	r1, r5
1a0003a0:	4807      	ldr	r0, [pc, #28]	; (1a0003c0 <Board_EEPROM_recSensor+0xc0>)
1a0003a2:	f007 fb57 	bl	1a007a54 <iprintf>
		pEepromMem[0] = aux;
1a0003a6:	6035      	str	r5, [r6, #0]
		Chip_EEPROM_WaitForIntStatus(LPC_EEPROM, EEPROM_INT_ENDOFPROG);
1a0003a8:	2104      	movs	r1, #4
1a0003aa:	4806      	ldr	r0, [pc, #24]	; (1a0003c4 <Board_EEPROM_recSensor+0xc4>)
1a0003ac:	f005 fee2 	bl	1a006174 <Chip_EEPROM_WaitForIntStatus>

	return 0;
1a0003b0:	2000      	movs	r0, #0
}
1a0003b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
1a0003b6:	b004      	add	sp, #16
1a0003b8:	4770      	bx	lr
		return -1;
1a0003ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0003be:	e7f8      	b.n	1a0003b2 <Board_EEPROM_recSensor+0xb2>
1a0003c0:	1a007fc8 	.word	0x1a007fc8
1a0003c4:	4000e000 	.word	0x4000e000

1a0003c8 <Board_EEPROM_readByte>:

int32_t Board_EEPROM_readByte(uint32_t addr)
{
	//ToDo: agregar manejo de cluster activo

	if(addr>=(16*1024))
1a0003c8:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
1a0003cc:	d215      	bcs.n	1a0003fa <Board_EEPROM_readByte+0x32>
{
1a0003ce:	b082      	sub	sp, #8
        return -1;

	uint32_t addr4 = addr/4;
	uint32_t pageAddr = addr4/EEPROM_PAGE_SIZE;
1a0003d0:	0a42      	lsrs	r2, r0, #9
	uint32_t pageOffset = addr4 - pageAddr*EEPROM_PAGE_SIZE;
1a0003d2:	01d3      	lsls	r3, r2, #7
1a0003d4:	ebc3 0390 	rsb	r3, r3, r0, lsr #2

	uint32_t *pEepromMem = (uint32_t*)EEPROM_ADDRESS(pageAddr,pageOffset*4);
1a0003d8:	f502 0280 	add.w	r2, r2, #4194304	; 0x400000
1a0003dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0003e0:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1a0003e4:	009b      	lsls	r3, r3, #2

	// read 4 bytes in auxValue
	uint32_t auxValue = pEepromMem[0];
1a0003e6:	681b      	ldr	r3, [r3, #0]
1a0003e8:	9301      	str	r3, [sp, #4]
	uint8_t* pAuxValue = (uint8_t*)&auxValue;

	// modify auxValue with new Byte value
	uint32_t indexInBlock = addr % 4;
1a0003ea:	f000 0003 	and.w	r0, r0, #3
	return (int32_t) pAuxValue[indexInBlock];
1a0003ee:	ab02      	add	r3, sp, #8
1a0003f0:	4418      	add	r0, r3
1a0003f2:	f810 0c04 	ldrb.w	r0, [r0, #-4]

}
1a0003f6:	b002      	add	sp, #8
1a0003f8:	4770      	bx	lr
        return -1;
1a0003fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0003fe:	4770      	bx	lr

1a000400 <Board_EEPROM_loadSensor>:
{
1a000400:	b570      	push	{r4, r5, r6, lr}
1a000402:	4605      	mov	r5, r0
1a000404:	460e      	mov	r6, r1
	for(int i=8; i>0; i-- )
1a000406:	2408      	movs	r4, #8
1a000408:	e00a      	b.n	1a000420 <Board_EEPROM_loadSensor+0x20>
		p_buffer->ROM_NO[8-i] = Board_EEPROM_readByte((posicion)*12 + i-1);///////simplificar
1a00040a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
1a00040e:	0098      	lsls	r0, r3, #2
1a000410:	4420      	add	r0, r4
1a000412:	3801      	subs	r0, #1
1a000414:	f7ff ffd8 	bl	1a0003c8 <Board_EEPROM_readByte>
1a000418:	f1c4 0308 	rsb	r3, r4, #8
1a00041c:	54f0      	strb	r0, [r6, r3]
	for(int i=8; i>0; i-- )
1a00041e:	3c01      	subs	r4, #1
1a000420:	2c00      	cmp	r4, #0
1a000422:	dcf2      	bgt.n	1a00040a <Board_EEPROM_loadSensor+0xa>
}
1a000424:	bd70      	pop	{r4, r5, r6, pc}
1a000426:	Address 0x000000001a000426 is out of bounds.


1a000428 <Board_EEPROM_init>:

void Board_EEPROM_init(void)
{
1a000428:	b510      	push	{r4, lr}
	Chip_EEPROM_Init(LPC_EEPROM);
1a00042a:	4c03      	ldr	r4, [pc, #12]	; (1a000438 <Board_EEPROM_init+0x10>)
1a00042c:	4620      	mov	r0, r4
1a00042e:	f005 fe95 	bl	1a00615c <Chip_EEPROM_Init>
 * @param	mode	: Auto Program Mode (One of EEPROM_AUTOPROG_* value)
 * @return	Nothing
 */
STATIC INLINE void Chip_EEPROM_SetAutoProg(LPC_EEPROM_T *pEEPROM, uint32_t mode)
{
	pEEPROM->AUTOPROG = mode;
1a000432:	2301      	movs	r3, #1
1a000434:	60e3      	str	r3, [r4, #12]
  	/* Set Auto Programming mode */
 	Chip_EEPROM_SetAutoProg(LPC_EEPROM,EEPROM_AUTOPROG_AFT_1WORDWRITTEN);
}
1a000436:	bd10      	pop	{r4, pc}
1a000438:	4000e000 	.word	0x4000e000

1a00043c <OWpresence>:
* Que recibe: int port, int pin que usa oneWire.
* Que devuelve: -1 si no hay sensores, 0 si hay sensores.
* Variables externas que modifca: N/A
*============================================================================*/
int OWpresence(int port, int pin)
{
1a00043c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a000440:	b2c6      	uxtb	r6, r0
1a000442:	4c18      	ldr	r4, [pc, #96]	; (1a0004a4 <OWpresence+0x68>)
1a000444:	f506 6700 	add.w	r7, r6, #2048	; 0x800
1a000448:	f854 3027 	ldr.w	r3, [r4, r7, lsl #2]
1a00044c:	fa5f f881 	uxtb.w	r8, r1
1a000450:	2501      	movs	r5, #1
1a000452:	fa05 f508 	lsl.w	r5, r5, r8
1a000456:	432b      	orrs	r3, r5
1a000458:	f844 3027 	str.w	r3, [r4, r7, lsl #2]
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutHigh(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->SET[port] = (1 << pin);
1a00045c:	f506 6308 	add.w	r3, r6, #2176	; 0x880
1a000460:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
	// envía pulso de reset
	OWsetOut(port,pin);
	OWhigh(port,pin);
	OWdelay_uS(1000);
1a000464:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000468:	f002 f942 	bl	1a0026f0 <OWdelay_uS>
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutLow(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->CLR[port] = (1 << pin);
1a00046c:	f506 630a 	add.w	r3, r6, #2208	; 0x8a0
1a000470:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
	OWlow(port,pin);
	OWdelay_uS(480);
1a000474:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
1a000478:	f002 f93a 	bl	1a0026f0 <OWdelay_uS>
	pGPIO->DIR[port] &= ~(1UL << pin);
1a00047c:	f854 3027 	ldr.w	r3, [r4, r7, lsl #2]
1a000480:	ea23 0505 	bic.w	r5, r3, r5
1a000484:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
	OWsetIn(port,pin);
	OWdelay_uS(40);
1a000488:	2028      	movs	r0, #40	; 0x28
1a00048a:	f002 f931 	bl	1a0026f0 <OWdelay_uS>
	return (bool) pGPIO->B[port][pin];
1a00048e:	eb04 1446 	add.w	r4, r4, r6, lsl #5
1a000492:	f814 3008 	ldrb.w	r3, [r4, r8]
	// lee el bus oneWire
	if(OWread(port,pin) == TRUE)
1a000496:	b913      	cbnz	r3, 1a00049e <OWpresence+0x62>
		{
		return -1;
		}
	else
		{
		return 0;
1a000498:	2000      	movs	r0, #0
		}
}
1a00049a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
1a00049e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0004a2:	e7fa      	b.n	1a00049a <OWpresence+0x5e>
1a0004a4:	400f4000 	.word	0x400f4000

1a0004a8 <OWcommand>:
* 			  int port, int pin puerto y pin del bus oneWire
* Que devuelve: N/A
* Variables externas que modifca: el buffer apuntado por el segundo parámetro
*============================================================================*/
void OWcommand(char cmd, char * buffer, char n, int port, int pin)
{
1a0004a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0004ac:	b082      	sub	sp, #8
1a0004ae:	4604      	mov	r4, r0
1a0004b0:	460d      	mov	r5, r1
1a0004b2:	4691      	mov	r9, r2
	volatile char i = 1, j;
1a0004b4:	2701      	movs	r7, #1
1a0004b6:	f88d 7007 	strb.w	r7, [sp, #7]
	pGPIO->DIR[port] |= 1UL << pin;
1a0004ba:	b2de      	uxtb	r6, r3
1a0004bc:	4a40      	ldr	r2, [pc, #256]	; (1a0005c0 <OWcommand+0x118>)
1a0004be:	f506 6100 	add.w	r1, r6, #2048	; 0x800
1a0004c2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
1a0004c6:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
1a0004ca:	fa07 f708 	lsl.w	r7, r7, r8
1a0004ce:	433b      	orrs	r3, r7
1a0004d0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
1a0004d4:	e012      	b.n	1a0004fc <OWcommand+0x54>
			OWwriteBit(OneWireStruct, 1);
		}
		// si la máscara = 0
		else
		{
			OWwriteBit(OneWireStruct, 0);
1a0004d6:	2100      	movs	r1, #0
1a0004d8:	4b3a      	ldr	r3, [pc, #232]	; (1a0005c4 <OWcommand+0x11c>)
1a0004da:	6818      	ldr	r0, [r3, #0]
1a0004dc:	f002 f956 	bl	1a00278c <OWwriteBit>
		}
		// chequea si llegó al último bit
		if(i==0x80)
1a0004e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a0004e4:	b2db      	uxtb	r3, r3
1a0004e6:	2b80      	cmp	r3, #128	; 0x80
1a0004e8:	d012      	beq.n	1a000510 <OWcommand+0x68>
			break;
		}
		else
		{
			// corrimiento a izquierda de la máscara
			i <<= 1;
1a0004ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a0004ee:	005b      	lsls	r3, r3, #1
1a0004f0:	b2db      	uxtb	r3, r3
1a0004f2:	f88d 3007 	strb.w	r3, [sp, #7]
		}
	}while(i != 0);
1a0004f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a0004fa:	b14b      	cbz	r3, 1a000510 <OWcommand+0x68>
		if(cmd & i)
1a0004fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a000500:	4223      	tst	r3, r4
1a000502:	d0e8      	beq.n	1a0004d6 <OWcommand+0x2e>
			OWwriteBit(OneWireStruct, 1);
1a000504:	2101      	movs	r1, #1
1a000506:	4b2f      	ldr	r3, [pc, #188]	; (1a0005c4 <OWcommand+0x11c>)
1a000508:	6818      	ldr	r0, [r3, #0]
1a00050a:	f002 f93f 	bl	1a00278c <OWwriteBit>
1a00050e:	e7e7      	b.n	1a0004e0 <OWcommand+0x38>

	// lectura de un byte(8-> ROM, 9-> scratch)
	for(i=0; i<n; i++)
1a000510:	2300      	movs	r3, #0
1a000512:	f88d 3007 	strb.w	r3, [sp, #7]
1a000516:	e042      	b.n	1a00059e <OWcommand+0xf6>
			OWdelay_uS(3);
			OWsetIn(port,pin);
			OWdelay_uS(12);
			p[i] >>= 1;
			if(OWread(port,pin)) p[i] |= 0x80;
			OWdelay_uS(55);
1a000518:	2037      	movs	r0, #55	; 0x37
1a00051a:	f002 f8e9 	bl	1a0026f0 <OWdelay_uS>
		for(j=0; j<8; j++)
1a00051e:	f89d 3006 	ldrb.w	r3, [sp, #6]
1a000522:	3301      	adds	r3, #1
1a000524:	b2db      	uxtb	r3, r3
1a000526:	f88d 3006 	strb.w	r3, [sp, #6]
1a00052a:	f89d 3006 	ldrb.w	r3, [sp, #6]
1a00052e:	b2db      	uxtb	r3, r3
1a000530:	2b07      	cmp	r3, #7
1a000532:	d82e      	bhi.n	1a000592 <OWcommand+0xea>
1a000534:	4c22      	ldr	r4, [pc, #136]	; (1a0005c0 <OWcommand+0x118>)
1a000536:	f506 6a00 	add.w	sl, r6, #2048	; 0x800
1a00053a:	f854 302a 	ldr.w	r3, [r4, sl, lsl #2]
1a00053e:	433b      	orrs	r3, r7
1a000540:	f844 302a 	str.w	r3, [r4, sl, lsl #2]
	pGPIO->CLR[port] = (1 << pin);
1a000544:	2301      	movs	r3, #1
1a000546:	fa03 f308 	lsl.w	r3, r3, r8
1a00054a:	f506 620a 	add.w	r2, r6, #2208	; 0x8a0
1a00054e:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
			OWdelay_uS(3);
1a000552:	2003      	movs	r0, #3
1a000554:	f002 f8cc 	bl	1a0026f0 <OWdelay_uS>
	pGPIO->DIR[port] &= ~(1UL << pin);
1a000558:	f854 302a 	ldr.w	r3, [r4, sl, lsl #2]
1a00055c:	ea23 0307 	bic.w	r3, r3, r7
1a000560:	f844 302a 	str.w	r3, [r4, sl, lsl #2]
			OWdelay_uS(12);
1a000564:	200c      	movs	r0, #12
1a000566:	f002 f8c3 	bl	1a0026f0 <OWdelay_uS>
			p[i] >>= 1;
1a00056a:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a00056e:	b2db      	uxtb	r3, r3
1a000570:	5cea      	ldrb	r2, [r5, r3]
1a000572:	0852      	lsrs	r2, r2, #1
1a000574:	54ea      	strb	r2, [r5, r3]
	return (bool) pGPIO->B[port][pin];
1a000576:	eb04 1446 	add.w	r4, r4, r6, lsl #5
1a00057a:	f814 3008 	ldrb.w	r3, [r4, r8]
			if(OWread(port,pin)) p[i] |= 0x80;
1a00057e:	2b00      	cmp	r3, #0
1a000580:	d0ca      	beq.n	1a000518 <OWcommand+0x70>
1a000582:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a000586:	b2db      	uxtb	r3, r3
1a000588:	5cea      	ldrb	r2, [r5, r3]
1a00058a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a00058e:	54ea      	strb	r2, [r5, r3]
1a000590:	e7c2      	b.n	1a000518 <OWcommand+0x70>
	for(i=0; i<n; i++)
1a000592:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a000596:	3301      	adds	r3, #1
1a000598:	b2db      	uxtb	r3, r3
1a00059a:	f88d 3007 	strb.w	r3, [sp, #7]
1a00059e:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a0005a2:	b2db      	uxtb	r3, r3
1a0005a4:	454b      	cmp	r3, r9
1a0005a6:	d207      	bcs.n	1a0005b8 <OWcommand+0x110>
		p[i] = 0;
1a0005a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a0005ac:	b2db      	uxtb	r3, r3
1a0005ae:	2200      	movs	r2, #0
1a0005b0:	54ea      	strb	r2, [r5, r3]
		for(j=0; j<8; j++)
1a0005b2:	f88d 2006 	strb.w	r2, [sp, #6]
1a0005b6:	e7b8      	b.n	1a00052a <OWcommand+0x82>
		}
	}
}
1a0005b8:	b002      	add	sp, #8
1a0005ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0005be:	bf00      	nop
1a0005c0:	400f4000 	.word	0x400f4000
1a0005c4:	10004c28 	.word	0x10004c28

1a0005c8 <OWcrc>:
* 			  char n, longitud (7 para ROM, 8 para scratchpad)
* Que devuelve: el CRC calculado (char)
* Variables externas que modifca: N/A
*============================================================================*/
char OWcrc(char* code, char n)
{
1a0005c8:	b430      	push	{r4, r5}
	char crc=0, inbyte, i, mix;
1a0005ca:	2200      	movs	r2, #0

	// recorre cada byte
	while(n--)
1a0005cc:	e00f      	b.n	1a0005ee <OWcrc+0x26>
			{
				// hace XOR bitwise bits 7, 3 y 2
				crc ^= 0x8C;
			}
			// corrimiento a derecha del byte de entrada
			inbyte >>= 1;
1a0005ce:	0864      	lsrs	r4, r4, #1
		for(i=8; i; i--)
1a0005d0:	3b01      	subs	r3, #1
1a0005d2:	b2db      	uxtb	r3, r3
1a0005d4:	b153      	cbz	r3, 1a0005ec <OWcrc+0x24>
			mix= (crc ^ inbyte) & 0x01;
1a0005d6:	ea82 0104 	eor.w	r1, r2, r4
			if(mix)
1a0005da:	f011 0f01 	tst.w	r1, #1
1a0005de:	ea4f 0252 	mov.w	r2, r2, lsr #1
1a0005e2:	d0f4      	beq.n	1a0005ce <OWcrc+0x6>
				crc ^= 0x8C;
1a0005e4:	f082 028c 	eor.w	r2, r2, #140	; 0x8c
1a0005e8:	b2d2      	uxtb	r2, r2
1a0005ea:	e7f0      	b.n	1a0005ce <OWcrc+0x6>
	while(n--)
1a0005ec:	4629      	mov	r1, r5
1a0005ee:	1e4b      	subs	r3, r1, #1
1a0005f0:	b2dd      	uxtb	r5, r3
1a0005f2:	b119      	cbz	r1, 1a0005fc <OWcrc+0x34>
		inbyte = *code++;
1a0005f4:	f810 4b01 	ldrb.w	r4, [r0], #1
		for(i=8; i; i--)
1a0005f8:	2308      	movs	r3, #8
1a0005fa:	e7eb      	b.n	1a0005d4 <OWcrc+0xc>
		}
	}
	return crc;
}
1a0005fc:	4610      	mov	r0, r2
1a0005fe:	bc30      	pop	{r4, r5}
1a000600:	4770      	bx	lr
1a000602:	Address 0x000000001a000602 is out of bounds.


1a000604 <OWsearch>:
* 			 dispositivos o solo los que están en alarma.
* Que devuelve: 1 si se encontró un nuevo dispositivo, 0 si no se encontró.
* Variables externas que modifca: OneWireStruct->ROM[].
*============================================================================*/
char OWsearch(OWbus_t* OneWireStruct, char command)
{
1a000604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a000608:	4604      	mov	r4, r0
	rom_byte_mask = 1;
	search_result = 0;


	// si el llamado anterior no fue el último
	if (!OneWireStruct->lastDeviceFlag)
1a00060a:	f890 900e 	ldrb.w	r9, [r0, #14]
1a00060e:	f1b9 0f00 	cmp.w	r9, #0
1a000612:	d00a      	beq.n	1a00062a <OWsearch+0x26>
		}
	}
	// Si no hay dispositivo resetea el contador asi la proxima busqueda será como la primera
	if (!search_result || !OneWireStruct->ROM_NO[0])
	{
		OneWireStruct->lastDiscrepancy = 0;
1a000614:	f04f 0900 	mov.w	r9, #0
1a000618:	f884 900c 	strb.w	r9, [r4, #12]
		OneWireStruct->lastDeviceFlag = 0;
1a00061c:	f884 900e 	strb.w	r9, [r4, #14]
		OneWireStruct->lastFamilyDiscrepancy = 0;
1a000620:	f884 900d 	strb.w	r9, [r4, #13]
		search_result = 0;
	}
return search_result;
}
1a000624:	4648      	mov	r0, r9
1a000626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00062a:	460d      	mov	r5, r1
		if (OWpresence(OneWireStruct->OWport,OneWireStruct->OWpin))
1a00062c:	6881      	ldr	r1, [r0, #8]
1a00062e:	6840      	ldr	r0, [r0, #4]
1a000630:	f7ff ff04 	bl	1a00043c <OWpresence>
1a000634:	b120      	cbz	r0, 1a000640 <OWsearch+0x3c>
			OneWireStruct->lastDiscrepancy = 0;
1a000636:	2300      	movs	r3, #0
1a000638:	7323      	strb	r3, [r4, #12]
			OneWireStruct->lastDeviceFlag = 0;
1a00063a:	73a3      	strb	r3, [r4, #14]
			OneWireStruct->lastFamilyDiscrepancy = 0;
1a00063c:	7363      	strb	r3, [r4, #13]
			return 0;
1a00063e:	e7f1      	b.n	1a000624 <OWsearch+0x20>
		OWdelay_uS(100);
1a000640:	2064      	movs	r0, #100	; 0x64
1a000642:	f002 f855 	bl	1a0026f0 <OWdelay_uS>
	char i=1;
1a000646:	2701      	movs	r7, #1
				OWwriteBit(OneWireStruct, command & i);
1a000648:	ea07 0105 	and.w	r1, r7, r5
1a00064c:	4620      	mov	r0, r4
1a00064e:	f002 f89d 	bl	1a00278c <OWwriteBit>
				if(i==0x80)
1a000652:	2f80      	cmp	r7, #128	; 0x80
1a000654:	d007      	beq.n	1a000666 <OWsearch+0x62>
					i <<= 1;
1a000656:	007f      	lsls	r7, r7, #1
			}while(i != 0);
1a000658:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
1a00065c:	d1f4      	bne.n	1a000648 <OWsearch+0x44>
1a00065e:	46b9      	mov	r9, r7
1a000660:	2501      	movs	r5, #1
1a000662:	46a8      	mov	r8, r5
1a000664:	e034      	b.n	1a0006d0 <OWsearch+0xcc>
1a000666:	464f      	mov	r7, r9
1a000668:	2501      	movs	r5, #1
1a00066a:	46a8      	mov	r8, r5
1a00066c:	e030      	b.n	1a0006d0 <OWsearch+0xcc>
			if ((id_bit == 1) && (cmp_id_bit == 1))
1a00066e:	2801      	cmp	r0, #1
1a000670:	d13a      	bne.n	1a0006e8 <OWsearch+0xe4>
		if (!(id_bit_number < 65))
1a000672:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
1a000676:	d9cd      	bls.n	1a000614 <OWsearch+0x10>
			OneWireStruct->lastDiscrepancy = last_zero;
1a000678:	f884 900c 	strb.w	r9, [r4, #12]
			if (OneWireStruct->lastDiscrepancy == 0)
1a00067c:	f1b9 0f00 	cmp.w	r9, #0
1a000680:	d101      	bne.n	1a000686 <OWsearch+0x82>
				OneWireStruct->lastDeviceFlag = 1;
1a000682:	2301      	movs	r3, #1
1a000684:	73a3      	strb	r3, [r4, #14]
	if (!search_result || !OneWireStruct->ROM_NO[0])
1a000686:	7be3      	ldrb	r3, [r4, #15]
1a000688:	2b00      	cmp	r3, #0
1a00068a:	d0c3      	beq.n	1a000614 <OWsearch+0x10>
			search_result = 1;
1a00068c:	f04f 0901 	mov.w	r9, #1
1a000690:	e7c8      	b.n	1a000624 <OWsearch+0x20>
					if (id_bit_number < OneWireStruct->lastDiscrepancy)
1a000692:	7b26      	ldrb	r6, [r4, #12]
1a000694:	4546      	cmp	r6, r8
1a000696:	d90d      	bls.n	1a0006b4 <OWsearch+0xb0>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
1a000698:	19e3      	adds	r3, r4, r7
1a00069a:	7bdb      	ldrb	r3, [r3, #15]
1a00069c:	422b      	tst	r3, r5
1a00069e:	bf14      	ite	ne
1a0006a0:	2601      	movne	r6, #1
1a0006a2:	2600      	moveq	r6, #0
					if (search_direction == 0)
1a0006a4:	bb16      	cbnz	r6, 1a0006ec <OWsearch+0xe8>
						if (last_zero < 9)
1a0006a6:	f1b8 0f08 	cmp.w	r8, #8
1a0006aa:	d808      	bhi.n	1a0006be <OWsearch+0xba>
							OneWireStruct->lastFamilyDiscrepancy = last_zero;
1a0006ac:	f884 800d 	strb.w	r8, [r4, #13]
						last_zero = id_bit_number;
1a0006b0:	46c1      	mov	r9, r8
1a0006b2:	e01b      	b.n	1a0006ec <OWsearch+0xe8>
						search_direction = (id_bit_number == OneWireStruct->lastDiscrepancy);
1a0006b4:	4546      	cmp	r6, r8
1a0006b6:	bf14      	ite	ne
1a0006b8:	2600      	movne	r6, #0
1a0006ba:	2601      	moveq	r6, #1
1a0006bc:	e7f2      	b.n	1a0006a4 <OWsearch+0xa0>
						last_zero = id_bit_number;
1a0006be:	46c1      	mov	r9, r8
1a0006c0:	e014      	b.n	1a0006ec <OWsearch+0xe8>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
1a0006c2:	19e2      	adds	r2, r4, r7
1a0006c4:	7bd3      	ldrb	r3, [r2, #15]
1a0006c6:	432b      	orrs	r3, r5
1a0006c8:	73d3      	strb	r3, [r2, #15]
1a0006ca:	e016      	b.n	1a0006fa <OWsearch+0xf6>
		while (rom_byte_number < 8);  // loop hasta recorrer los  ROM bytes 0-7
1a0006cc:	2f07      	cmp	r7, #7
1a0006ce:	d8d0      	bhi.n	1a000672 <OWsearch+0x6e>
			printf("             \n");
1a0006d0:	4812      	ldr	r0, [pc, #72]	; (1a00071c <OWsearch+0x118>)
1a0006d2:	f007 fa59 	bl	1a007b88 <puts>
			id_bit = OWreadBit(OneWireStruct);
1a0006d6:	4620      	mov	r0, r4
1a0006d8:	f002 f820 	bl	1a00271c <OWreadBit>
1a0006dc:	4606      	mov	r6, r0
			cmp_id_bit = OWreadBit(OneWireStruct);
1a0006de:	4620      	mov	r0, r4
1a0006e0:	f002 f81c 	bl	1a00271c <OWreadBit>
			if ((id_bit == 1) && (cmp_id_bit == 1))
1a0006e4:	2e01      	cmp	r6, #1
1a0006e6:	d0c2      	beq.n	1a00066e <OWsearch+0x6a>
				if (id_bit != cmp_id_bit)
1a0006e8:	4286      	cmp	r6, r0
1a0006ea:	d0d2      	beq.n	1a000692 <OWsearch+0x8e>
				if (search_direction == 1)
1a0006ec:	2e01      	cmp	r6, #1
1a0006ee:	d0e8      	beq.n	1a0006c2 <OWsearch+0xbe>
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
1a0006f0:	19e2      	adds	r2, r4, r7
1a0006f2:	7bd3      	ldrb	r3, [r2, #15]
1a0006f4:	ea23 0305 	bic.w	r3, r3, r5
1a0006f8:	73d3      	strb	r3, [r2, #15]
				OWwriteBit(OneWireStruct, search_direction);
1a0006fa:	4631      	mov	r1, r6
1a0006fc:	4620      	mov	r0, r4
1a0006fe:	f002 f845 	bl	1a00278c <OWwriteBit>
				id_bit_number++;
1a000702:	f108 0801 	add.w	r8, r8, #1
1a000706:	fa5f f888 	uxtb.w	r8, r8
				rom_byte_mask <<= 1;
1a00070a:	006d      	lsls	r5, r5, #1
				if (rom_byte_mask == 0)
1a00070c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
1a000710:	d1dc      	bne.n	1a0006cc <OWsearch+0xc8>
					rom_byte_number++;
1a000712:	3701      	adds	r7, #1
1a000714:	b2ff      	uxtb	r7, r7
					rom_byte_mask = 1;
1a000716:	2501      	movs	r5, #1
1a000718:	e7d8      	b.n	1a0006cc <OWsearch+0xc8>
1a00071a:	bf00      	nop
1a00071c:	1a007fd4 	.word	0x1a007fd4

1a000720 <OWwriteByte>:
* 			 (char) byte a escribir.
* Que devuelve: N/A.
* Variables externas que modifca: N/A
*============================================================================*/
void OWwriteByte(OWbus_t* OneWireStruct, char byte)
{
1a000720:	b570      	push	{r4, r5, r6, lr}
1a000722:	4606      	mov	r6, r0
1a000724:	460d      	mov	r5, r1
	char i = 8;
1a000726:	2208      	movs	r2, #8
	/* Escribe 8 bits */
	while (i--) {
1a000728:	e006      	b.n	1a000738 <OWwriteByte+0x18>
		/* LSB primero */
		OWwriteBit(OneWireStruct, byte & 0x01);
1a00072a:	f005 0101 	and.w	r1, r5, #1
1a00072e:	4630      	mov	r0, r6
1a000730:	f002 f82c 	bl	1a00278c <OWwriteBit>
		byte >>= 1;
1a000734:	086d      	lsrs	r5, r5, #1
	while (i--) {
1a000736:	4622      	mov	r2, r4
1a000738:	1e53      	subs	r3, r2, #1
1a00073a:	b2dc      	uxtb	r4, r3
1a00073c:	2a00      	cmp	r2, #0
1a00073e:	d1f4      	bne.n	1a00072a <OWwriteByte+0xa>
	}
}
1a000740:	bd70      	pop	{r4, r5, r6, pc}
1a000742:	Address 0x000000001a000742 is out of bounds.


1a000744 <DSmultipleConv>:
* Que recibe: (int) pin puerto y pin del bus oneWire.
* Que devuelve: N/A
* Variables externas que modifca: N/A
*============================================================================*/
void DSmultipleConv(int port, int pin)
{
1a000744:	b570      	push	{r4, r5, r6, lr}
1a000746:	b086      	sub	sp, #24
1a000748:	4605      	mov	r5, r0
1a00074a:	460c      	mov	r4, r1
	volatile int buffTemp = -1;
1a00074c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a000750:	9305      	str	r3, [sp, #20]
	volatile char crc = 0;
1a000752:	2300      	movs	r3, #0
1a000754:	f88d 3013 	strb.w	r3, [sp, #19]
	char p[9];

	if(OWpresence(port,pin)==0)
1a000758:	f7ff fe70 	bl	1a00043c <OWpresence>
1a00075c:	b108      	cbz	r0, 1a000762 <DSmultipleConv+0x1e>
		OWsetIn(port,pin);
		// espera el fin de conversión
		while(OWread(port,pin) == false);

	}
}
1a00075e:	b006      	add	sp, #24
1a000760:	bd70      	pop	{r4, r5, r6, pc}
		OWdelay_uS(400);
1a000762:	f44f 70c8 	mov.w	r0, #400	; 0x190
1a000766:	f001 ffc3 	bl	1a0026f0 <OWdelay_uS>
		disableInterrupts();
1a00076a:	f002 f873 	bl	1a002854 <disableInterrupts>
		OWwriteByte(OneWireStruct, 0xCC);
1a00076e:	21cc      	movs	r1, #204	; 0xcc
1a000770:	4b11      	ldr	r3, [pc, #68]	; (1a0007b8 <DSmultipleConv+0x74>)
1a000772:	6818      	ldr	r0, [r3, #0]
1a000774:	f7ff ffd4 	bl	1a000720 <OWwriteByte>
		OWcommand(0x44, p, 0, port, pin);
1a000778:	9400      	str	r4, [sp, #0]
1a00077a:	462b      	mov	r3, r5
1a00077c:	2200      	movs	r2, #0
1a00077e:	a902      	add	r1, sp, #8
1a000780:	2044      	movs	r0, #68	; 0x44
1a000782:	f7ff fe91 	bl	1a0004a8 <OWcommand>
		enableInterrupts();
1a000786:	f002 f869 	bl	1a00285c <enableInterrupts>
	pGPIO->DIR[port] &= ~(1UL << pin);
1a00078a:	b2e8      	uxtb	r0, r5
1a00078c:	4d0b      	ldr	r5, [pc, #44]	; (1a0007bc <DSmultipleConv+0x78>)
1a00078e:	f500 6600 	add.w	r6, r0, #2048	; 0x800
1a000792:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
1a000796:	b2e1      	uxtb	r1, r4
1a000798:	2201      	movs	r2, #1
1a00079a:	408a      	lsls	r2, r1
1a00079c:	ea23 0302 	bic.w	r3, r3, r2
1a0007a0:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
	return (bool) pGPIO->B[port][pin];
1a0007a4:	0142      	lsls	r2, r0, #5
1a0007a6:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
1a0007aa:	f502 2270 	add.w	r2, r2, #983040	; 0xf0000
1a0007ae:	5c52      	ldrb	r2, [r2, r1]
		while(OWread(port,pin) == false);
1a0007b0:	2a00      	cmp	r2, #0
1a0007b2:	d0f7      	beq.n	1a0007a4 <DSmultipleConv+0x60>
1a0007b4:	e7d3      	b.n	1a00075e <DSmultipleConv+0x1a>
1a0007b6:	bf00      	nop
1a0007b8:	10004c28 	.word	0x10004c28
1a0007bc:	400f4000 	.word	0x400f4000

1a0007c0 <DSreadROMtemp>:
* a leer en el vector de sensores.
* Que devuelve: la temperatura leida en °C y sin decimales.
* Variables externas que modifca: N/A
*============================================================================*/
int DSreadROMtemp(int port, int pin,int orden)
{
1a0007c0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0007c2:	b087      	sub	sp, #28
1a0007c4:	4606      	mov	r6, r0
1a0007c6:	460f      	mov	r7, r1
1a0007c8:	4615      	mov	r5, r2
	volatile int buffTemp = -1;
1a0007ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0007ce:	9305      	str	r3, [sp, #20]
	volatile char crc = 0;
1a0007d0:	2300      	movs	r3, #0
1a0007d2:	f88d 3013 	strb.w	r3, [sp, #19]
	char p[9];
	int i;

	if(OWpresence(port,pin)==0)
1a0007d6:	f7ff fe31 	bl	1a00043c <OWpresence>
1a0007da:	b110      	cbz	r0, 1a0007e2 <DSreadROMtemp+0x22>
			buffTemp <<= 8;
			buffTemp |= p[0];
			buffTemp = buffTemp >> 4;
		}
	}
	return buffTemp;
1a0007dc:	9805      	ldr	r0, [sp, #20]
}
1a0007de:	b007      	add	sp, #28
1a0007e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0007e2:	4604      	mov	r4, r0
		OWpresence(port, pin);
1a0007e4:	4639      	mov	r1, r7
1a0007e6:	4630      	mov	r0, r6
1a0007e8:	f7ff fe28 	bl	1a00043c <OWpresence>
		OWdelay_uS(400);
1a0007ec:	f44f 70c8 	mov.w	r0, #400	; 0x190
1a0007f0:	f001 ff7e 	bl	1a0026f0 <OWdelay_uS>
		disableInterrupts();
1a0007f4:	f002 f82e 	bl	1a002854 <disableInterrupts>
		OWwriteByte(OneWireStruct, 0x55);
1a0007f8:	2155      	movs	r1, #85	; 0x55
1a0007fa:	4b1c      	ldr	r3, [pc, #112]	; (1a00086c <DSreadROMtemp+0xac>)
1a0007fc:	6818      	ldr	r0, [r3, #0]
1a0007fe:	f7ff ff8f 	bl	1a000720 <OWwriteByte>
		for(i=0;i<8;i++)
1a000802:	e00a      	b.n	1a00081a <DSreadROMtemp+0x5a>
			OWwriteByte(OneWireStruct, sensor[orden].ROM_NO[i]);
1a000804:	eb05 0385 	add.w	r3, r5, r5, lsl #2
1a000808:	009a      	lsls	r2, r3, #2
1a00080a:	4b19      	ldr	r3, [pc, #100]	; (1a000870 <DSreadROMtemp+0xb0>)
1a00080c:	4413      	add	r3, r2
1a00080e:	5d19      	ldrb	r1, [r3, r4]
1a000810:	4b16      	ldr	r3, [pc, #88]	; (1a00086c <DSreadROMtemp+0xac>)
1a000812:	6818      	ldr	r0, [r3, #0]
1a000814:	f7ff ff84 	bl	1a000720 <OWwriteByte>
		for(i=0;i<8;i++)
1a000818:	3401      	adds	r4, #1
1a00081a:	2c07      	cmp	r4, #7
1a00081c:	ddf2      	ble.n	1a000804 <DSreadROMtemp+0x44>
		OWcommand(0xBE, p, 9, port, pin);
1a00081e:	9700      	str	r7, [sp, #0]
1a000820:	4633      	mov	r3, r6
1a000822:	2209      	movs	r2, #9
1a000824:	a902      	add	r1, sp, #8
1a000826:	20be      	movs	r0, #190	; 0xbe
1a000828:	f7ff fe3e 	bl	1a0004a8 <OWcommand>
		enableInterrupts();
1a00082c:	f002 f816 	bl	1a00285c <enableInterrupts>
		crc = OWcrc(p, 8);
1a000830:	2108      	movs	r1, #8
1a000832:	eb0d 0001 	add.w	r0, sp, r1
1a000836:	f7ff fec7 	bl	1a0005c8 <OWcrc>
1a00083a:	f88d 0013 	strb.w	r0, [sp, #19]
		if(crc == p[8])
1a00083e:	f89d 2010 	ldrb.w	r2, [sp, #16]
1a000842:	f89d 3013 	ldrb.w	r3, [sp, #19]
1a000846:	b2db      	uxtb	r3, r3
1a000848:	429a      	cmp	r2, r3
1a00084a:	d1c7      	bne.n	1a0007dc <DSreadROMtemp+0x1c>
			buffTemp = p[1];
1a00084c:	f89d 3009 	ldrb.w	r3, [sp, #9]
1a000850:	9305      	str	r3, [sp, #20]
			buffTemp <<= 8;
1a000852:	9b05      	ldr	r3, [sp, #20]
1a000854:	021b      	lsls	r3, r3, #8
1a000856:	9305      	str	r3, [sp, #20]
			buffTemp |= p[0];
1a000858:	f89d 3008 	ldrb.w	r3, [sp, #8]
1a00085c:	9a05      	ldr	r2, [sp, #20]
1a00085e:	4313      	orrs	r3, r2
1a000860:	9305      	str	r3, [sp, #20]
			buffTemp = buffTemp >> 4;
1a000862:	9b05      	ldr	r3, [sp, #20]
1a000864:	111b      	asrs	r3, r3, #4
1a000866:	9305      	str	r3, [sp, #20]
1a000868:	e7b8      	b.n	1a0007dc <DSreadROMtemp+0x1c>
1a00086a:	bf00      	nop
1a00086c:	10004c28 	.word	0x10004c28
1a000870:	10004d9c 	.word	0x10004d9c

1a000874 <buttonsInit>:
} buttonStates_t;

buttonStates_t buttonState[4];

void buttonsInit(void)
{
1a000874:	b510      	push	{r4, lr}
	for(int i=0;i<4;i++)
1a000876:	2400      	movs	r4, #0
1a000878:	e005      	b.n	1a000886 <buttonsInit+0x12>
		gpioInit(button[i], GPIO_INPUT_PULLDOWN );
1a00087a:	2103      	movs	r1, #3
1a00087c:	4b07      	ldr	r3, [pc, #28]	; (1a00089c <buttonsInit+0x28>)
1a00087e:	5718      	ldrsb	r0, [r3, r4]
1a000880:	f005 fee2 	bl	1a006648 <gpioInit>
	for(int i=0;i<4;i++)
1a000884:	3401      	adds	r4, #1
1a000886:	2c03      	cmp	r4, #3
1a000888:	ddf7      	ble.n	1a00087a <buttonsInit+0x6>

	for(int i=0;i<4;i++)
1a00088a:	2300      	movs	r3, #0
1a00088c:	e003      	b.n	1a000896 <buttonsInit+0x22>
		buttonState[i] = STATE_BUTTON_UP;
1a00088e:	4a04      	ldr	r2, [pc, #16]	; (1a0008a0 <buttonsInit+0x2c>)
1a000890:	2100      	movs	r1, #0
1a000892:	54d1      	strb	r1, [r2, r3]
	for(int i=0;i<4;i++)
1a000894:	3301      	adds	r3, #1
1a000896:	2b03      	cmp	r3, #3
1a000898:	ddf9      	ble.n	1a00088e <buttonsInit+0x1a>
}
1a00089a:	bd10      	pop	{r4, pc}
1a00089c:	10000000 	.word	0x10000000
1a0008a0:	10004c30 	.word	0x10004c30

1a0008a4 <buttonsUpdate>:

int buttonsUpdate(void)
{
1a0008a4:	b510      	push	{r4, lr}
//	if(gpioRead(GPIO3))
//	{
//		systemMode = MAINTENANCE;
//	}

	for(int i=0;i<4;i++)
1a0008a6:	2400      	movs	r4, #0
1a0008a8:	e020      	b.n	1a0008ec <buttonsUpdate+0x48>
	{
		switch(buttonState[i])
		{
			case STATE_BUTTON_UP:
				if(gpioRead(button[i]))
1a0008aa:	4b1f      	ldr	r3, [pc, #124]	; (1a000928 <buttonsUpdate+0x84>)
1a0008ac:	5718      	ldrsb	r0, [r3, r4]
1a0008ae:	f005 ffd6 	bl	1a00685e <gpioRead>
1a0008b2:	b1d0      	cbz	r0, 1a0008ea <buttonsUpdate+0x46>
					buttonState[i] = STATE_BUTTON_FALLING;
1a0008b4:	4b1d      	ldr	r3, [pc, #116]	; (1a00092c <buttonsUpdate+0x88>)
1a0008b6:	2202      	movs	r2, #2
1a0008b8:	551a      	strb	r2, [r3, r4]
1a0008ba:	e016      	b.n	1a0008ea <buttonsUpdate+0x46>
				break;
			case STATE_BUTTON_FALLING:
				if(gpioRead(button[i]))
1a0008bc:	4b1a      	ldr	r3, [pc, #104]	; (1a000928 <buttonsUpdate+0x84>)
1a0008be:	5718      	ldrsb	r0, [r3, r4]
1a0008c0:	f005 ffcd 	bl	1a00685e <gpioRead>
1a0008c4:	b188      	cbz	r0, 1a0008ea <buttonsUpdate+0x46>
					buttonState[i] = STATE_BUTTON_DOWN;
1a0008c6:	4b19      	ldr	r3, [pc, #100]	; (1a00092c <buttonsUpdate+0x88>)
1a0008c8:	2201      	movs	r2, #1
1a0008ca:	551a      	strb	r2, [r3, r4]
1a0008cc:	e00d      	b.n	1a0008ea <buttonsUpdate+0x46>
				break;
			case STATE_BUTTON_DOWN:
				if(!gpioRead(button[i]))
1a0008ce:	4b16      	ldr	r3, [pc, #88]	; (1a000928 <buttonsUpdate+0x84>)
1a0008d0:	5718      	ldrsb	r0, [r3, r4]
1a0008d2:	f005 ffc4 	bl	1a00685e <gpioRead>
1a0008d6:	b940      	cbnz	r0, 1a0008ea <buttonsUpdate+0x46>
					buttonState[i] = STATE_BUTTON_RISING;
1a0008d8:	4b14      	ldr	r3, [pc, #80]	; (1a00092c <buttonsUpdate+0x88>)
1a0008da:	2203      	movs	r2, #3
1a0008dc:	551a      	strb	r2, [r3, r4]
1a0008de:	e004      	b.n	1a0008ea <buttonsUpdate+0x46>
				break;
			case STATE_BUTTON_RISING:
				if(!gpioRead(button[i]))
1a0008e0:	4b11      	ldr	r3, [pc, #68]	; (1a000928 <buttonsUpdate+0x84>)
1a0008e2:	5718      	ldrsb	r0, [r3, r4]
1a0008e4:	f005 ffbb 	bl	1a00685e <gpioRead>
1a0008e8:	b190      	cbz	r0, 1a000910 <buttonsUpdate+0x6c>
	for(int i=0;i<4;i++)
1a0008ea:	3401      	adds	r4, #1
1a0008ec:	2c03      	cmp	r4, #3
1a0008ee:	dc17      	bgt.n	1a000920 <buttonsUpdate+0x7c>
		switch(buttonState[i])
1a0008f0:	4b0e      	ldr	r3, [pc, #56]	; (1a00092c <buttonsUpdate+0x88>)
1a0008f2:	5d1b      	ldrb	r3, [r3, r4]
1a0008f4:	2b03      	cmp	r3, #3
1a0008f6:	d8f8      	bhi.n	1a0008ea <buttonsUpdate+0x46>
1a0008f8:	a201      	add	r2, pc, #4	; (adr r2, 1a000900 <buttonsUpdate+0x5c>)
1a0008fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a0008fe:	bf00      	nop
1a000900:	1a0008ab 	.word	0x1a0008ab
1a000904:	1a0008cf 	.word	0x1a0008cf
1a000908:	1a0008bd 	.word	0x1a0008bd
1a00090c:	1a0008e1 	.word	0x1a0008e1
				{
					buttonState[i] = STATE_BUTTON_UP;
1a000910:	4b06      	ldr	r3, [pc, #24]	; (1a00092c <buttonsUpdate+0x88>)
1a000912:	2200      	movs	r2, #0
1a000914:	551a      	strb	r2, [r3, r4]
					printf("Boton %d presionado \r\n", i);
1a000916:	4621      	mov	r1, r4
1a000918:	4805      	ldr	r0, [pc, #20]	; (1a000930 <buttonsUpdate+0x8c>)
1a00091a:	f007 f89b 	bl	1a007a54 <iprintf>
					return(i);
1a00091e:	e001      	b.n	1a000924 <buttonsUpdate+0x80>
				}
				break;
		}
	}
	return(-1);
1a000920:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
1a000924:	4620      	mov	r0, r4
1a000926:	bd10      	pop	{r4, pc}
1a000928:	10000000 	.word	0x10000000
1a00092c:	10004c30 	.word	0x10004c30
1a000930:	1a007fe4 	.word	0x1a007fe4

1a000934 <silenceTimerCallback>:
	setStatus(BIT_SENSORS, FALSE);
}

void silenceTimerCallback(TimerHandle_t silenceTimer)
{
	quiet = 0;
1a000934:	4b01      	ldr	r3, [pc, #4]	; (1a00093c <silenceTimerCallback+0x8>)
1a000936:	2200      	movs	r2, #0
1a000938:	601a      	str	r2, [r3, #0]
}
1a00093a:	4770      	bx	lr
1a00093c:	100000c4 	.word	0x100000c4

1a000940 <normalTimerCallback>:

void normalTimerCallback(TimerHandle_t normalTimer)
{
	systemMode = NORMAL;
1a000940:	4b01      	ldr	r3, [pc, #4]	; (1a000948 <normalTimerCallback+0x8>)
1a000942:	2201      	movs	r2, #1
1a000944:	701a      	strb	r2, [r3, #0]
	//printf("normal timer expired\r\n");
}
1a000946:	4770      	bx	lr
1a000948:	100000c8 	.word	0x100000c8

1a00094c <UCI_2_task>:
{
1a00094c:	b508      	push	{r3, lr}
	systemMode = NORMAL;
1a00094e:	4b04      	ldr	r3, [pc, #16]	; (1a000960 <UCI_2_task+0x14>)
1a000950:	2201      	movs	r2, #1
1a000952:	701a      	strb	r2, [r3, #0]
		vTaskDelay(1000);
1a000954:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000958:	f004 f806 	bl	1a004968 <vTaskDelay>
1a00095c:	e7fa      	b.n	1a000954 <UCI_2_task+0x8>
1a00095e:	bf00      	nop
1a000960:	100000c8 	.word	0x100000c8

1a000964 <vTask1>:
{
1a000964:	b570      	push	{r4, r5, r6, lr}
1a000966:	b086      	sub	sp, #24
	varA.sender = TASK_1;
1a000968:	2300      	movs	r3, #0
1a00096a:	9302      	str	r3, [sp, #8]
	strcpy(varA.message, "prueba2");//------------------------SACAR!
1a00096c:	ab03      	add	r3, sp, #12
1a00096e:	4a63      	ldr	r2, [pc, #396]	; (1a000afc <vTask1+0x198>)
1a000970:	e892 0003 	ldmia.w	r2, {r0, r1}
1a000974:	e883 0003 	stmia.w	r3, {r0, r1}
	if (SMTB_Init()!=0)
1a000978:	f002 fd04 	bl	1a003384 <SMTB_Init>
1a00097c:	b138      	cbz	r0, 1a00098e <vTask1+0x2a>
			gpioToggle (LEDR); // ToDo: Cambiar por led bicolor
1a00097e:	2028      	movs	r0, #40	; 0x28
1a000980:	f005 ffa1 	bl	1a0068c6 <gpioToggle>
			vTaskDelay(300);
1a000984:	f44f 7096 	mov.w	r0, #300	; 0x12c
1a000988:	f003 ffee 	bl	1a004968 <vTaskDelay>
1a00098c:	e7f7      	b.n	1a00097e <vTask1+0x1a>
1a00098e:	4604      	mov	r4, r0
	buzzer_test();
1a000990:	f002 fdbe 	bl	1a003510 <buzzer_test>
	lcdGoToXY( 0, 0 ); // MOVER???/////////////////////////
1a000994:	2100      	movs	r1, #0
1a000996:	4608      	mov	r0, r1
1a000998:	f006 f8fe 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( "SMTB Firmware " );                //
1a00099c:	4858      	ldr	r0, [pc, #352]	; (1a000b00 <vTask1+0x19c>)
1a00099e:	f006 f936 	bl	1a006c0e <lcdSendStringRaw>
	lcdGoToXY( 0, 1 );                                   //
1a0009a2:	2101      	movs	r1, #1
1a0009a4:	2000      	movs	r0, #0
1a0009a6:	f006 f8f7 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( "Version: " );                     //
1a0009aa:	4856      	ldr	r0, [pc, #344]	; (1a000b04 <vTask1+0x1a0>)
1a0009ac:	f006 f92f 	bl	1a006c0e <lcdSendStringRaw>
	lcdData(VERSION + 48);                               //
1a0009b0:	2030      	movs	r0, #48	; 0x30
1a0009b2:	f006 f85f 	bl	1a006a74 <lcdData>
	lcdSendStringRaw( "." );                             //
1a0009b6:	4854      	ldr	r0, [pc, #336]	; (1a000b08 <vTask1+0x1a4>)
1a0009b8:	f006 f929 	bl	1a006c0e <lcdSendStringRaw>
	lcdData(SUBVERSION + 48);                            //
1a0009bc:	2036      	movs	r0, #54	; 0x36
1a0009be:	f006 f859 	bl	1a006a74 <lcdData>
	ledMatrixClear();
1a0009c2:	f002 fe14 	bl	1a0035ee <ledMatrixClear>
	ledMatrixTest();
1a0009c6:	f002 fe1d 	bl	1a003604 <ledMatrixTest>
	semaphoreTest();
1a0009ca:	f002 fdb2 	bl	1a003532 <semaphoreTest>
	rom_test();
1a0009ce:	f002 fd6c 	bl	1a0034aa <rom_test>
	uci_id_test();
1a0009d2:	f002 fd49 	bl	1a003468 <uci_id_test>
	for(int i=0;i<N;i++)
1a0009d6:	4622      	mov	r2, r4
1a0009d8:	e012      	b.n	1a000a00 <vTask1+0x9c>
		sensor[i].eje = i/6+1;
1a0009da:	4b4c      	ldr	r3, [pc, #304]	; (1a000b0c <vTask1+0x1a8>)
1a0009dc:	fb83 1302 	smull	r1, r3, r3, r2
1a0009e0:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
1a0009e4:	1c5e      	adds	r6, r3, #1
1a0009e6:	0091      	lsls	r1, r2, #2
1a0009e8:	4411      	add	r1, r2
1a0009ea:	008d      	lsls	r5, r1, #2
1a0009ec:	4848      	ldr	r0, [pc, #288]	; (1a000b10 <vTask1+0x1ac>)
1a0009ee:	4428      	add	r0, r5
1a0009f0:	60c6      	str	r6, [r0, #12]
		sensor[i].posicion = i%6+1;
1a0009f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
1a0009f6:	0059      	lsls	r1, r3, #1
1a0009f8:	1a51      	subs	r1, r2, r1
1a0009fa:	3101      	adds	r1, #1
1a0009fc:	6101      	str	r1, [r0, #16]
	for(int i=0;i<N;i++)
1a0009fe:	3201      	adds	r2, #1
1a000a00:	2a17      	cmp	r2, #23
1a000a02:	ddea      	ble.n	1a0009da <vTask1+0x76>
	if(getStatus(BIT_UCI_1) && !getStatus(BIT_UCI_2))
1a000a04:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
1a000a08:	f002 fd02 	bl	1a003410 <getStatus>
1a000a0c:	b120      	cbz	r0, 1a000a18 <vTask1+0xb4>
1a000a0e:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
1a000a12:	f002 fcfd 	bl	1a003410 <getStatus>
1a000a16:	b360      	cbz	r0, 1a000a72 <vTask1+0x10e>
	else if(getStatus(BIT_UCI_2) && !getStatus(BIT_UCI_1))
1a000a18:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
1a000a1c:	f002 fcf8 	bl	1a003410 <getStatus>
1a000a20:	2800      	cmp	r0, #0
1a000a22:	d130      	bne.n	1a000a86 <vTask1+0x122>
	xTaskCreate(vDisplayMng, (const char *)"Display Task", configMINIMAL_STACK_SIZE*2, NULL, tskIDLE_PRIORITY+1, NULL );
1a000a24:	2500      	movs	r5, #0
1a000a26:	9501      	str	r5, [sp, #4]
1a000a28:	2601      	movs	r6, #1
1a000a2a:	9600      	str	r6, [sp, #0]
1a000a2c:	462b      	mov	r3, r5
1a000a2e:	22c8      	movs	r2, #200	; 0xc8
1a000a30:	4938      	ldr	r1, [pc, #224]	; (1a000b14 <vTask1+0x1b0>)
1a000a32:	4839      	ldr	r0, [pc, #228]	; (1a000b18 <vTask1+0x1b4>)
1a000a34:	f003 fe03 	bl	1a00463e <xTaskCreate>
    xTaskCreate(vButtonMng, (const char *)"Button Task", configMINIMAL_STACK_SIZE*2, NULL, tskIDLE_PRIORITY+1, NULL );
1a000a38:	9501      	str	r5, [sp, #4]
1a000a3a:	9600      	str	r6, [sp, #0]
1a000a3c:	462b      	mov	r3, r5
1a000a3e:	22c8      	movs	r2, #200	; 0xc8
1a000a40:	4936      	ldr	r1, [pc, #216]	; (1a000b1c <vTask1+0x1b8>)
1a000a42:	4837      	ldr	r0, [pc, #220]	; (1a000b20 <vTask1+0x1bc>)
1a000a44:	f003 fdfb 	bl	1a00463e <xTaskCreate>
    xTaskCreate(vCommMng, (const char *)"Communication Task", configMINIMAL_STACK_SIZE*2, NULL, tskIDLE_PRIORITY+1, NULL );
1a000a48:	9501      	str	r5, [sp, #4]
1a000a4a:	9600      	str	r6, [sp, #0]
1a000a4c:	462b      	mov	r3, r5
1a000a4e:	22c8      	movs	r2, #200	; 0xc8
1a000a50:	4934      	ldr	r1, [pc, #208]	; (1a000b24 <vTask1+0x1c0>)
1a000a52:	4835      	ldr	r0, [pc, #212]	; (1a000b28 <vTask1+0x1c4>)
1a000a54:	f003 fdf3 	bl	1a00463e <xTaskCreate>
    xTaskCreate(vConsoleMng, (const char *)"Console Task", configMINIMAL_STACK_SIZE*2, NULL, tskIDLE_PRIORITY+1, NULL );
1a000a58:	9501      	str	r5, [sp, #4]
1a000a5a:	9600      	str	r6, [sp, #0]
1a000a5c:	462b      	mov	r3, r5
1a000a5e:	22c8      	movs	r2, #200	; 0xc8
1a000a60:	4932      	ldr	r1, [pc, #200]	; (1a000b2c <vTask1+0x1c8>)
1a000a62:	4833      	ldr	r0, [pc, #204]	; (1a000b30 <vTask1+0x1cc>)
1a000a64:	f003 fdeb 	bl	1a00463e <xTaskCreate>
    vTaskDelay(2000);									//
1a000a68:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
1a000a6c:	f003 ff7c 	bl	1a004968 <vTaskDelay>
1a000a70:	e03b      	b.n	1a000aea <vTask1+0x186>
		xTaskCreate( sensorMng, (const char *)"SensorMng", configMINIMAL_STACK_SIZE*2, NULL, tskIDLE_PRIORITY+1, NULL );
1a000a72:	2300      	movs	r3, #0
1a000a74:	9301      	str	r3, [sp, #4]
1a000a76:	2201      	movs	r2, #1
1a000a78:	9200      	str	r2, [sp, #0]
1a000a7a:	22c8      	movs	r2, #200	; 0xc8
1a000a7c:	492d      	ldr	r1, [pc, #180]	; (1a000b34 <vTask1+0x1d0>)
1a000a7e:	482e      	ldr	r0, [pc, #184]	; (1a000b38 <vTask1+0x1d4>)
1a000a80:	f003 fddd 	bl	1a00463e <xTaskCreate>
1a000a84:	e7ce      	b.n	1a000a24 <vTask1+0xc0>
	else if(getStatus(BIT_UCI_2) && !getStatus(BIT_UCI_1))
1a000a86:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
1a000a8a:	f002 fcc1 	bl	1a003410 <getStatus>
1a000a8e:	2800      	cmp	r0, #0
1a000a90:	d1c8      	bne.n	1a000a24 <vTask1+0xc0>
		xTaskCreate( UCI_2_task, (const char *)"UCI#2 Task", configMINIMAL_STACK_SIZE*2, NULL, tskIDLE_PRIORITY+1, NULL );
1a000a92:	2300      	movs	r3, #0
1a000a94:	9301      	str	r3, [sp, #4]
1a000a96:	2201      	movs	r2, #1
1a000a98:	9200      	str	r2, [sp, #0]
1a000a9a:	22c8      	movs	r2, #200	; 0xc8
1a000a9c:	4927      	ldr	r1, [pc, #156]	; (1a000b3c <vTask1+0x1d8>)
1a000a9e:	4828      	ldr	r0, [pc, #160]	; (1a000b40 <vTask1+0x1dc>)
1a000aa0:	f003 fdcd 	bl	1a00463e <xTaskCreate>
1a000aa4:	e7be      	b.n	1a000a24 <vTask1+0xc0>
    			flagAlarm = 1;
1a000aa6:	4927      	ldr	r1, [pc, #156]	; (1a000b44 <vTask1+0x1e0>)
1a000aa8:	2601      	movs	r6, #1
1a000aaa:	700e      	strb	r6, [r1, #0]
    			auxAlarm ++;
1a000aac:	4435      	add	r5, r6
1a000aae:	b2ed      	uxtb	r5, r5
1a000ab0:	e00a      	b.n	1a000ac8 <vTask1+0x164>
    	for(int k = 0;k<N;k++)
1a000ab2:	3301      	adds	r3, #1
1a000ab4:	2b17      	cmp	r3, #23
1a000ab6:	dc10      	bgt.n	1a000ada <vTask1+0x176>
    		if(sensor[k].estado == SEN_ALARM)
1a000ab8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
1a000abc:	0091      	lsls	r1, r2, #2
1a000abe:	4a14      	ldr	r2, [pc, #80]	; (1a000b10 <vTask1+0x1ac>)
1a000ac0:	440a      	add	r2, r1
1a000ac2:	7a12      	ldrb	r2, [r2, #8]
1a000ac4:	2a02      	cmp	r2, #2
1a000ac6:	d0ee      	beq.n	1a000aa6 <vTask1+0x142>
    		if(sensor[k].estado == INACTIVE)
1a000ac8:	b912      	cbnz	r2, 1a000ad0 <vTask1+0x16c>
    			flagDegraded = 1;
1a000aca:	491f      	ldr	r1, [pc, #124]	; (1a000b48 <vTask1+0x1e4>)
1a000acc:	2601      	movs	r6, #1
1a000ace:	700e      	strb	r6, [r1, #0]
    		if(sensor[k].estado != INACTIVE)
1a000ad0:	2a00      	cmp	r2, #0
1a000ad2:	d0ee      	beq.n	1a000ab2 <vTask1+0x14e>
    			auxActive ++;
1a000ad4:	3001      	adds	r0, #1
1a000ad6:	b2c0      	uxtb	r0, r0
1a000ad8:	e7eb      	b.n	1a000ab2 <vTask1+0x14e>
    	quantAlarm = auxAlarm;
1a000ada:	4b1c      	ldr	r3, [pc, #112]	; (1a000b4c <vTask1+0x1e8>)
1a000adc:	701d      	strb	r5, [r3, #0]
    	quantActive = auxActive;
1a000ade:	4b1c      	ldr	r3, [pc, #112]	; (1a000b50 <vTask1+0x1ec>)
1a000ae0:	7018      	strb	r0, [r3, #0]
    	vTaskDelay(1000);
1a000ae2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000ae6:	f003 ff3f 	bl	1a004968 <vTaskDelay>
    	flagAlarm = 0;
1a000aea:	2500      	movs	r5, #0
1a000aec:	4b15      	ldr	r3, [pc, #84]	; (1a000b44 <vTask1+0x1e0>)
1a000aee:	701d      	strb	r5, [r3, #0]
    	flagDegraded = 0;
1a000af0:	4b15      	ldr	r3, [pc, #84]	; (1a000b48 <vTask1+0x1e4>)
1a000af2:	701d      	strb	r5, [r3, #0]
    	for(int k = 0;k<N;k++)
1a000af4:	4623      	mov	r3, r4
    	auxActive = 0;
1a000af6:	4628      	mov	r0, r5
    	for(int k = 0;k<N;k++)
1a000af8:	e7dc      	b.n	1a000ab4 <vTask1+0x150>
1a000afa:	bf00      	nop
1a000afc:	1a008544 	.word	0x1a008544
1a000b00:	1a00854c 	.word	0x1a00854c
1a000b04:	1a00855c 	.word	0x1a00855c
1a000b08:	1a008568 	.word	0x1a008568
1a000b0c:	2aaaaaab 	.word	0x2aaaaaab
1a000b10:	10004d9c 	.word	0x10004d9c
1a000b14:	1a008584 	.word	0x1a008584
1a000b18:	1a001d91 	.word	0x1a001d91
1a000b1c:	1a008594 	.word	0x1a008594
1a000b20:	1a0022e1 	.word	0x1a0022e1
1a000b24:	1a0085a0 	.word	0x1a0085a0
1a000b28:	1a000dfd 	.word	0x1a000dfd
1a000b2c:	1a0085b4 	.word	0x1a0085b4
1a000b30:	1a000d99 	.word	0x1a000d99
1a000b34:	1a00856c 	.word	0x1a00856c
1a000b38:	1a000b55 	.word	0x1a000b55
1a000b3c:	1a008578 	.word	0x1a008578
1a000b40:	1a00094d 	.word	0x1a00094d
1a000b44:	10004f88 	.word	0x10004f88
1a000b48:	10004d95 	.word	0x10004d95
1a000b4c:	10004d8e 	.word	0x10004d8e
1a000b50:	10004d94 	.word	0x10004d94

1a000b54 <sensorMng>:
{
1a000b54:	b530      	push	{r4, r5, lr}
1a000b56:	b089      	sub	sp, #36	; 0x24
1a000b58:	e013      	b.n	1a000b82 <sensorMng+0x2e>
			remote_uci_test(UCI_1);
1a000b5a:	2001      	movs	r0, #1
1a000b5c:	f002 fc62 	bl	1a003424 <remote_uci_test>
1a000b60:	e015      	b.n	1a000b8e <sensorMng+0x3a>
				printf("BUS INIT FAILED \r\n");
1a000b62:	487f      	ldr	r0, [pc, #508]	; (1a000d60 <sensorMng+0x20c>)
1a000b64:	f007 f810 	bl	1a007b88 <puts>
1a000b68:	e004      	b.n	1a000b74 <sensorMng+0x20>
		else if(getStatus(BIT_SENSORS) == FALSE)
1a000b6a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
1a000b6e:	f002 fc4f 	bl	1a003410 <getStatus>
1a000b72:	b338      	cbz	r0, 1a000bc4 <sensorMng+0x70>
		if(getStatus(BIT_SENSORS)) //si hay bus inicializado
1a000b74:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
1a000b78:	f002 fc4a 	bl	1a003410 <getStatus>
1a000b7c:	2800      	cmp	r0, #0
1a000b7e:	f040 8094 	bne.w	1a000caa <sensorMng+0x156>
		if(getStatus(BIT_REMOTE) == FALSE)
1a000b82:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
1a000b86:	f002 fc43 	bl	1a003410 <getStatus>
1a000b8a:	2800      	cmp	r0, #0
1a000b8c:	d0e5      	beq.n	1a000b5a <sensorMng+0x6>
		if(getStatus(BIT_BUS_1) == FALSE)
1a000b8e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
1a000b92:	f002 fc3d 	bl	1a003410 <getStatus>
1a000b96:	2800      	cmp	r0, #0
1a000b98:	d1e7      	bne.n	1a000b6a <sensorMng+0x16>
			printf("BIT_BUS_1: 0 \r\n");
1a000b9a:	4872      	ldr	r0, [pc, #456]	; (1a000d64 <sensorMng+0x210>)
1a000b9c:	f006 fff4 	bl	1a007b88 <puts>
			p_Bus = OWinit(GPIO2);
1a000ba0:	201f      	movs	r0, #31
1a000ba2:	f001 fce1 	bl	1a002568 <OWinit>
1a000ba6:	4601      	mov	r1, r0
1a000ba8:	4c6f      	ldr	r4, [pc, #444]	; (1a000d68 <sensorMng+0x214>)
1a000baa:	6020      	str	r0, [r4, #0]
			printf("punt_bus: %d \r\n",p_Bus);
1a000bac:	486f      	ldr	r0, [pc, #444]	; (1a000d6c <sensorMng+0x218>)
1a000bae:	f006 ff51 	bl	1a007a54 <iprintf>
			if(p_Bus == NULL)
1a000bb2:	6823      	ldr	r3, [r4, #0]
1a000bb4:	2b00      	cmp	r3, #0
1a000bb6:	d0d4      	beq.n	1a000b62 <sensorMng+0xe>
				setStatus(BIT_BUS_1, TRUE);
1a000bb8:	2101      	movs	r1, #1
1a000bba:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
1a000bbe:	f002 fc17 	bl	1a0033f0 <setStatus>
1a000bc2:	e7d7      	b.n	1a000b74 <sensorMng+0x20>
			next = OWsearch(p_Bus,ALL_DEVICES);// ToDo: manejo de error!!!!!!!!!!!!
1a000bc4:	21f0      	movs	r1, #240	; 0xf0
1a000bc6:	4b68      	ldr	r3, [pc, #416]	; (1a000d68 <sensorMng+0x214>)
1a000bc8:	6818      	ldr	r0, [r3, #0]
1a000bca:	f7ff fd1b 	bl	1a000604 <OWsearch>
			while(next > 0)
1a000bce:	e044      	b.n	1a000c5a <sensorMng+0x106>
					int not_equal_flg = 0;
1a000bd0:	2500      	movs	r5, #0
					if(not_equal_flg == 0)//son iguales
1a000bd2:	b30d      	cbz	r5, 1a000c18 <sensorMng+0xc4>
				for(i=0;i<N;i++)
1a000bd4:	4a66      	ldr	r2, [pc, #408]	; (1a000d70 <sensorMng+0x21c>)
1a000bd6:	6813      	ldr	r3, [r2, #0]
1a000bd8:	3301      	adds	r3, #1
1a000bda:	6013      	str	r3, [r2, #0]
1a000bdc:	4b64      	ldr	r3, [pc, #400]	; (1a000d70 <sensorMng+0x21c>)
1a000bde:	6818      	ldr	r0, [r3, #0]
1a000be0:	2817      	cmp	r0, #23
1a000be2:	dc33      	bgt.n	1a000c4c <sensorMng+0xf8>
					Board_EEPROM_loadSensor(i, &ee_buffer); // ToDo manejo de errores
1a000be4:	4669      	mov	r1, sp
1a000be6:	f7ff fc0b 	bl	1a000400 <Board_EEPROM_loadSensor>
					for(j=0;j<8;j++)
1a000bea:	4b62      	ldr	r3, [pc, #392]	; (1a000d74 <sensorMng+0x220>)
1a000bec:	2200      	movs	r2, #0
1a000bee:	601a      	str	r2, [r3, #0]
1a000bf0:	4b60      	ldr	r3, [pc, #384]	; (1a000d74 <sensorMng+0x220>)
1a000bf2:	681b      	ldr	r3, [r3, #0]
1a000bf4:	2b07      	cmp	r3, #7
1a000bf6:	dceb      	bgt.n	1a000bd0 <sensorMng+0x7c>
						if(OneWireStruct->ROM_NO[j]!= ee_buffer.ROM_NO[j])
1a000bf8:	4a5f      	ldr	r2, [pc, #380]	; (1a000d78 <sensorMng+0x224>)
1a000bfa:	6812      	ldr	r2, [r2, #0]
1a000bfc:	441a      	add	r2, r3
1a000bfe:	7bd1      	ldrb	r1, [r2, #15]
1a000c00:	aa08      	add	r2, sp, #32
1a000c02:	441a      	add	r2, r3
1a000c04:	f812 2c20 	ldrb.w	r2, [r2, #-32]
1a000c08:	4291      	cmp	r1, r2
1a000c0a:	d103      	bne.n	1a000c14 <sensorMng+0xc0>
					for(j=0;j<8;j++)
1a000c0c:	3301      	adds	r3, #1
1a000c0e:	4a59      	ldr	r2, [pc, #356]	; (1a000d74 <sensorMng+0x220>)
1a000c10:	6013      	str	r3, [r2, #0]
1a000c12:	e7ed      	b.n	1a000bf0 <sensorMng+0x9c>
							not_equal_flg = 1;
1a000c14:	2501      	movs	r5, #1
1a000c16:	e7dc      	b.n	1a000bd2 <sensorMng+0x7e>
						sensor[i].estado = ACTIVE;
1a000c18:	4b55      	ldr	r3, [pc, #340]	; (1a000d70 <sensorMng+0x21c>)
1a000c1a:	6818      	ldr	r0, [r3, #0]
1a000c1c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
1a000c20:	009a      	lsls	r2, r3, #2
1a000c22:	4b56      	ldr	r3, [pc, #344]	; (1a000d7c <sensorMng+0x228>)
1a000c24:	4413      	add	r3, r2
1a000c26:	2201      	movs	r2, #1
1a000c28:	721a      	strb	r2, [r3, #8]
						for(int k=0;k<8;k++)
1a000c2a:	462b      	mov	r3, r5
1a000c2c:	e00a      	b.n	1a000c44 <sensorMng+0xf0>
							sensor[i].ROM_NO[k] = ee_buffer.ROM_NO[k];
1a000c2e:	aa08      	add	r2, sp, #32
1a000c30:	441a      	add	r2, r3
1a000c32:	f812 4c20 	ldrb.w	r4, [r2, #-32]
1a000c36:	eb00 0280 	add.w	r2, r0, r0, lsl #2
1a000c3a:	0091      	lsls	r1, r2, #2
1a000c3c:	4a4f      	ldr	r2, [pc, #316]	; (1a000d7c <sensorMng+0x228>)
1a000c3e:	440a      	add	r2, r1
1a000c40:	54d4      	strb	r4, [r2, r3]
						for(int k=0;k<8;k++)
1a000c42:	3301      	adds	r3, #1
1a000c44:	2b07      	cmp	r3, #7
1a000c46:	ddf2      	ble.n	1a000c2e <sensorMng+0xda>
						unknown = 0;
1a000c48:	462c      	mov	r4, r5
1a000c4a:	e7c3      	b.n	1a000bd4 <sensorMng+0x80>
				if(unknown == 1)
1a000c4c:	2c01      	cmp	r4, #1
1a000c4e:	d00b      	beq.n	1a000c68 <sensorMng+0x114>
				next = OWsearch(p_Bus,ALL_DEVICES);
1a000c50:	21f0      	movs	r1, #240	; 0xf0
1a000c52:	4b45      	ldr	r3, [pc, #276]	; (1a000d68 <sensorMng+0x214>)
1a000c54:	6818      	ldr	r0, [r3, #0]
1a000c56:	f7ff fcd5 	bl	1a000604 <OWsearch>
			while(next > 0)
1a000c5a:	2800      	cmp	r0, #0
1a000c5c:	dd1c      	ble.n	1a000c98 <sensorMng+0x144>
				for(i=0;i<N;i++)
1a000c5e:	4b44      	ldr	r3, [pc, #272]	; (1a000d70 <sensorMng+0x21c>)
1a000c60:	2200      	movs	r2, #0
1a000c62:	601a      	str	r2, [r3, #0]
				unknown = 1;
1a000c64:	2401      	movs	r4, #1
				for(i=0;i<N;i++)
1a000c66:	e7b9      	b.n	1a000bdc <sensorMng+0x88>
					printf("sensor desconocido\r\n");//ToDo: en else manejo de sensor desconocido
1a000c68:	4845      	ldr	r0, [pc, #276]	; (1a000d80 <sensorMng+0x22c>)
1a000c6a:	f006 ff8d 	bl	1a007b88 <puts>
					for(int k=0; k<8;k++)
1a000c6e:	2400      	movs	r4, #0
1a000c70:	e00c      	b.n	1a000c8c <sensorMng+0x138>
						printf("%X-",OneWireStruct->ROM_NO[k]);
1a000c72:	4d41      	ldr	r5, [pc, #260]	; (1a000d78 <sensorMng+0x224>)
1a000c74:	682b      	ldr	r3, [r5, #0]
1a000c76:	4423      	add	r3, r4
1a000c78:	7bd9      	ldrb	r1, [r3, #15]
1a000c7a:	4842      	ldr	r0, [pc, #264]	; (1a000d84 <sensorMng+0x230>)
1a000c7c:	f006 feea 	bl	1a007a54 <iprintf>
						un_buffer.ROM_NO[k]=OneWireStruct->ROM_NO[k];
1a000c80:	682b      	ldr	r3, [r5, #0]
1a000c82:	4423      	add	r3, r4
1a000c84:	7bda      	ldrb	r2, [r3, #15]
1a000c86:	4b40      	ldr	r3, [pc, #256]	; (1a000d88 <sensorMng+0x234>)
1a000c88:	551a      	strb	r2, [r3, r4]
					for(int k=0; k<8;k++)
1a000c8a:	3401      	adds	r4, #1
1a000c8c:	2c07      	cmp	r4, #7
1a000c8e:	ddf0      	ble.n	1a000c72 <sensorMng+0x11e>
					printf("\r\n");
1a000c90:	483e      	ldr	r0, [pc, #248]	; (1a000d8c <sensorMng+0x238>)
1a000c92:	f006 ff79 	bl	1a007b88 <puts>
1a000c96:	e7db      	b.n	1a000c50 <sensorMng+0xfc>
			setStatus(BIT_SENSORS,TRUE);
1a000c98:	2101      	movs	r1, #1
1a000c9a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
1a000c9e:	f002 fba7 	bl	1a0033f0 <setStatus>
			systemMode = NORMAL;
1a000ca2:	4b3b      	ldr	r3, [pc, #236]	; (1a000d90 <sensorMng+0x23c>)
1a000ca4:	2201      	movs	r2, #1
1a000ca6:	701a      	strb	r2, [r3, #0]
1a000ca8:	e764      	b.n	1a000b74 <sensorMng+0x20>
			for(j=0;j<N;j++)
1a000caa:	4b32      	ldr	r3, [pc, #200]	; (1a000d74 <sensorMng+0x220>)
1a000cac:	2200      	movs	r2, #0
1a000cae:	601a      	str	r2, [r3, #0]
1a000cb0:	e01e      	b.n	1a000cf0 <sensorMng+0x19c>
						sensor[j].estado = ACTIVE;
1a000cb2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
1a000cb6:	0091      	lsls	r1, r2, #2
1a000cb8:	4a30      	ldr	r2, [pc, #192]	; (1a000d7c <sensorMng+0x228>)
1a000cba:	440a      	add	r2, r1
1a000cbc:	2101      	movs	r1, #1
1a000cbe:	7211      	strb	r1, [r2, #8]
					msgToUci2.message[1] = sensor[j].estado;
1a000cc0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a000cc4:	009a      	lsls	r2, r3, #2
1a000cc6:	4b2d      	ldr	r3, [pc, #180]	; (1a000d7c <sensorMng+0x228>)
1a000cc8:	4413      	add	r3, r2
1a000cca:	7a1b      	ldrb	r3, [r3, #8]
1a000ccc:	f88d 3017 	strb.w	r3, [sp, #23]
					xQueueSend(intercommQueue, &msgToUci2, 1000);
1a000cd0:	2300      	movs	r3, #0
1a000cd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a000cd6:	a905      	add	r1, sp, #20
1a000cd8:	482e      	ldr	r0, [pc, #184]	; (1a000d94 <sensorMng+0x240>)
1a000cda:	6800      	ldr	r0, [r0, #0]
1a000cdc:	f003 f848 	bl	1a003d70 <xQueueGenericSend>
					vTaskDelay(1000);
1a000ce0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000ce4:	f003 fe40 	bl	1a004968 <vTaskDelay>
			for(j=0;j<N;j++)
1a000ce8:	4a22      	ldr	r2, [pc, #136]	; (1a000d74 <sensorMng+0x220>)
1a000cea:	6813      	ldr	r3, [r2, #0]
1a000cec:	3301      	adds	r3, #1
1a000cee:	6013      	str	r3, [r2, #0]
1a000cf0:	4b20      	ldr	r3, [pc, #128]	; (1a000d74 <sensorMng+0x220>)
1a000cf2:	681b      	ldr	r3, [r3, #0]
1a000cf4:	2b17      	cmp	r3, #23
1a000cf6:	dc2c      	bgt.n	1a000d52 <sensorMng+0x1fe>
				if(sensor[j].estado != INACTIVE)
1a000cf8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a000cfc:	009a      	lsls	r2, r3, #2
1a000cfe:	4b1f      	ldr	r3, [pc, #124]	; (1a000d7c <sensorMng+0x228>)
1a000d00:	4413      	add	r3, r2
1a000d02:	7a1b      	ldrb	r3, [r3, #8]
1a000d04:	2b00      	cmp	r3, #0
1a000d06:	d0ef      	beq.n	1a000ce8 <sensorMng+0x194>
					taskENTER_CRITICAL();
1a000d08:	f004 fab4 	bl	1a005274 <vPortEnterCritical>
					sensor[j].temp = DSreadROMtemp(p_Bus->OWport,p_Bus->OWpin, j);
1a000d0c:	4b16      	ldr	r3, [pc, #88]	; (1a000d68 <sensorMng+0x214>)
1a000d0e:	681b      	ldr	r3, [r3, #0]
1a000d10:	4d18      	ldr	r5, [pc, #96]	; (1a000d74 <sensorMng+0x220>)
1a000d12:	682a      	ldr	r2, [r5, #0]
1a000d14:	6899      	ldr	r1, [r3, #8]
1a000d16:	6858      	ldr	r0, [r3, #4]
1a000d18:	f7ff fd52 	bl	1a0007c0 <DSreadROMtemp>
1a000d1c:	682b      	ldr	r3, [r5, #0]
1a000d1e:	4c17      	ldr	r4, [pc, #92]	; (1a000d7c <sensorMng+0x228>)
1a000d20:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a000d24:	009a      	lsls	r2, r3, #2
1a000d26:	4422      	add	r2, r4
1a000d28:	7250      	strb	r0, [r2, #9]
					taskEXIT_CRITICAL();
1a000d2a:	f004 fac5 	bl	1a0052b8 <vPortExitCritical>
					msgToUci2.msgType = SENSOR;
1a000d2e:	23fd      	movs	r3, #253	; 0xfd
1a000d30:	f88d 3014 	strb.w	r3, [sp, #20]
					msgToUci2.order = j;
1a000d34:	682b      	ldr	r3, [r5, #0]
1a000d36:	f88d 3015 	strb.w	r3, [sp, #21]
					msgToUci2.message[0] = sensor[j].temp;
1a000d3a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a000d3e:	008a      	lsls	r2, r1, #2
1a000d40:	4414      	add	r4, r2
1a000d42:	7a62      	ldrb	r2, [r4, #9]
1a000d44:	f88d 2016 	strb.w	r2, [sp, #22]
					if(sensor[j].temp > ALARM_TRIGGER)
1a000d48:	2a1c      	cmp	r2, #28
1a000d4a:	d9b2      	bls.n	1a000cb2 <sensorMng+0x15e>
						sensor[j].estado = SEN_ALARM;
1a000d4c:	2102      	movs	r1, #2
1a000d4e:	7221      	strb	r1, [r4, #8]
1a000d50:	e7b6      	b.n	1a000cc0 <sensorMng+0x16c>
			DSmultipleConv(p_Bus->OWport,p_Bus->OWpin);
1a000d52:	4b05      	ldr	r3, [pc, #20]	; (1a000d68 <sensorMng+0x214>)
1a000d54:	681b      	ldr	r3, [r3, #0]
1a000d56:	6899      	ldr	r1, [r3, #8]
1a000d58:	6858      	ldr	r0, [r3, #4]
1a000d5a:	f7ff fcf3 	bl	1a000744 <DSmultipleConv>
1a000d5e:	e710      	b.n	1a000b82 <sensorMng+0x2e>
1a000d60:	1a0083ec 	.word	0x1a0083ec
1a000d64:	1a0083cc 	.word	0x1a0083cc
1a000d68:	100000bc 	.word	0x100000bc
1a000d6c:	1a0083dc 	.word	0x1a0083dc
1a000d70:	100000b4 	.word	0x100000b4
1a000d74:	100000b8 	.word	0x100000b8
1a000d78:	10004c28 	.word	0x10004c28
1a000d7c:	10004d9c 	.word	0x10004d9c
1a000d80:	1a008400 	.word	0x1a008400
1a000d84:	1a008414 	.word	0x1a008414
1a000d88:	10004f90 	.word	0x10004f90
1a000d8c:	1a0083fc 	.word	0x1a0083fc
1a000d90:	100000c8 	.word	0x100000c8
1a000d94:	10004d98 	.word	0x10004d98

1a000d98 <vConsoleMng>:
{
1a000d98:	b500      	push	{lr}
1a000d9a:	b085      	sub	sp, #20
1a000d9c:	e006      	b.n	1a000dac <vConsoleMng+0x14>
			printf("<UCI_1> ");
1a000d9e:	4812      	ldr	r0, [pc, #72]	; (1a000de8 <vConsoleMng+0x50>)
1a000da0:	f006 fe58 	bl	1a007a54 <iprintf>
			printf("%s\n\r",msgBuffer.message);
1a000da4:	a901      	add	r1, sp, #4
1a000da6:	4811      	ldr	r0, [pc, #68]	; (1a000dec <vConsoleMng+0x54>)
1a000da8:	f006 fe54 	bl	1a007a54 <iprintf>
		xQueueReceive(consoleQueue, p_msgBuffer, portMAX_DELAY);
1a000dac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000db0:	4669      	mov	r1, sp
1a000db2:	4b0f      	ldr	r3, [pc, #60]	; (1a000df0 <vConsoleMng+0x58>)
1a000db4:	6818      	ldr	r0, [r3, #0]
1a000db6:	f003 f903 	bl	1a003fc0 <xQueueReceive>
		switch(msgBuffer.sender)
1a000dba:	9b00      	ldr	r3, [sp, #0]
1a000dbc:	2b01      	cmp	r3, #1
1a000dbe:	d0ee      	beq.n	1a000d9e <vConsoleMng+0x6>
1a000dc0:	2b02      	cmp	r3, #2
1a000dc2:	d009      	beq.n	1a000dd8 <vConsoleMng+0x40>
1a000dc4:	2b00      	cmp	r3, #0
1a000dc6:	d1f1      	bne.n	1a000dac <vConsoleMng+0x14>
			printf("<TASK_1> ");
1a000dc8:	480a      	ldr	r0, [pc, #40]	; (1a000df4 <vConsoleMng+0x5c>)
1a000dca:	f006 fe43 	bl	1a007a54 <iprintf>
			printf("%s\n\r",msgBuffer.message);
1a000dce:	a901      	add	r1, sp, #4
1a000dd0:	4806      	ldr	r0, [pc, #24]	; (1a000dec <vConsoleMng+0x54>)
1a000dd2:	f006 fe3f 	bl	1a007a54 <iprintf>
			break;
1a000dd6:	e7e9      	b.n	1a000dac <vConsoleMng+0x14>
			printf("<UCI_2> ");
1a000dd8:	4807      	ldr	r0, [pc, #28]	; (1a000df8 <vConsoleMng+0x60>)
1a000dda:	f006 fe3b 	bl	1a007a54 <iprintf>
			printf("%s\n\r",msgBuffer.message);
1a000dde:	a901      	add	r1, sp, #4
1a000de0:	4802      	ldr	r0, [pc, #8]	; (1a000dec <vConsoleMng+0x54>)
1a000de2:	f006 fe37 	bl	1a007a54 <iprintf>
			break;
1a000de6:	e7e1      	b.n	1a000dac <vConsoleMng+0x14>
1a000de8:	1a00852c 	.word	0x1a00852c
1a000dec:	1a008524 	.word	0x1a008524
1a000df0:	10004d90 	.word	0x10004d90
1a000df4:	1a008518 	.word	0x1a008518
1a000df8:	1a008538 	.word	0x1a008538

1a000dfc <vCommMng>:
{
1a000dfc:	b570      	push	{r4, r5, r6, lr}
1a000dfe:	b08c      	sub	sp, #48	; 0x30
	printf("<ICOMM> Initializing \r\n");
1a000e00:	48b6      	ldr	r0, [pc, #728]	; (1a0010dc <vCommMng+0x2e0>)
1a000e02:	f006 fec1 	bl	1a007b88 <puts>
1a000e06:	e018      	b.n	1a000e3a <vCommMng+0x3e>
				vTaskDelay(1);
1a000e08:	2001      	movs	r0, #1
1a000e0a:	f003 fdad 	bl	1a004968 <vTaskDelay>
				printf("waiting\r\n");
1a000e0e:	48b4      	ldr	r0, [pc, #720]	; (1a0010e0 <vCommMng+0x2e4>)
1a000e10:	f006 feba 	bl	1a007b88 <puts>
			while(uartTxReady( UART_485 )==0)
1a000e14:	2001      	movs	r0, #1
1a000e16:	f005 fb25 	bl	1a006464 <uartTxReady>
1a000e1a:	2800      	cmp	r0, #0
1a000e1c:	d0f4      	beq.n	1a000e08 <vCommMng+0xc>
			uartWriteByteArray( UART_485,p_msgBuffer, 11);
1a000e1e:	220b      	movs	r2, #11
1a000e20:	a903      	add	r1, sp, #12
1a000e22:	2001      	movs	r0, #1
1a000e24:	f005 fba4 	bl	1a006570 <uartWriteByteArray>
			if(getStatus (BIT_UCI_2)) ////////////////////////////sacar
1a000e28:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
1a000e2c:	f002 faf0 	bl	1a003410 <getStatus>
1a000e30:	b960      	cbnz	r0, 1a000e4c <vCommMng+0x50>
		if(uartRxReady( UART_485))
1a000e32:	2001      	movs	r0, #1
1a000e34:	f005 fb0a 	bl	1a00644c <uartRxReady>
1a000e38:	b960      	cbnz	r0, 1a000e54 <vCommMng+0x58>
		if(xQueueReceive(intercommQueue, p_msgBuffer, 100) == pdTRUE)
1a000e3a:	2264      	movs	r2, #100	; 0x64
1a000e3c:	a903      	add	r1, sp, #12
1a000e3e:	4ba9      	ldr	r3, [pc, #676]	; (1a0010e4 <vCommMng+0x2e8>)
1a000e40:	6818      	ldr	r0, [r3, #0]
1a000e42:	f003 f8bd 	bl	1a003fc0 <xQueueReceive>
1a000e46:	2801      	cmp	r0, #1
1a000e48:	d1f3      	bne.n	1a000e32 <vCommMng+0x36>
1a000e4a:	e7e3      	b.n	1a000e14 <vCommMng+0x18>
				printf("enviando x uart\r\n");//
1a000e4c:	48a6      	ldr	r0, [pc, #664]	; (1a0010e8 <vCommMng+0x2ec>)
1a000e4e:	f006 fe9b 	bl	1a007b88 <puts>
1a000e52:	e7ee      	b.n	1a000e32 <vCommMng+0x36>
			uartReadByte( UART_485, &recvbyte );
1a000e54:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
1a000e58:	2001      	movs	r0, #1
1a000e5a:	f005 fb6d 	bl	1a006538 <uartReadByte>
			printf("\n"); // Si lo saco, no anda!!!//////////////////
1a000e5e:	200a      	movs	r0, #10
1a000e60:	f006 fe10 	bl	1a007a84 <putchar>
			switch(recvbyte)
1a000e64:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
1a000e68:	2bfe      	cmp	r3, #254	; 0xfe
1a000e6a:	f000 80c5 	beq.w	1a000ff8 <vCommMng+0x1fc>
1a000e6e:	d836      	bhi.n	1a000ede <vCommMng+0xe2>
1a000e70:	2bfd      	cmp	r3, #253	; 0xfd
1a000e72:	d1e2      	bne.n	1a000e3a <vCommMng+0x3e>
					if(uartRxReady( UART_485))
1a000e74:	2001      	movs	r0, #1
1a000e76:	f005 fae9 	bl	1a00644c <uartRxReady>
1a000e7a:	2800      	cmp	r0, #0
1a000e7c:	d0dd      	beq.n	1a000e3a <vCommMng+0x3e>
						uartReadByte( UART_485, &recvbyte );
1a000e7e:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
1a000e82:	2001      	movs	r0, #1
1a000e84:	f005 fb58 	bl	1a006538 <uartReadByte>
						pos_aux = recvbyte;
1a000e88:	f89d 402f 	ldrb.w	r4, [sp, #47]	; 0x2f
					if(uartRxReady( UART_485))
1a000e8c:	2001      	movs	r0, #1
1a000e8e:	f005 fadd 	bl	1a00644c <uartRxReady>
1a000e92:	2800      	cmp	r0, #0
1a000e94:	d0d1      	beq.n	1a000e3a <vCommMng+0x3e>
						uartReadByte( UART_485, &recvbyte );
1a000e96:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
1a000e9a:	2001      	movs	r0, #1
1a000e9c:	f005 fb4c 	bl	1a006538 <uartReadByte>
						aux.temp = recvbyte;
1a000ea0:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
1a000ea4:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
					if(uartRxReady( UART_485))
1a000ea8:	2001      	movs	r0, #1
1a000eaa:	f005 facf 	bl	1a00644c <uartRxReady>
1a000eae:	2800      	cmp	r0, #0
1a000eb0:	d0c3      	beq.n	1a000e3a <vCommMng+0x3e>
						uartReadByte( UART_485, &recvbyte );
1a000eb2:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
1a000eb6:	2001      	movs	r0, #1
1a000eb8:	f005 fb3e 	bl	1a006538 <uartReadByte>
						aux.estado = recvbyte;
1a000ebc:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
1a000ec0:	f88d 0020 	strb.w	r0, [sp, #32]
					sensor[pos_aux].temp = aux.temp;
1a000ec4:	f89d 6021 	ldrb.w	r6, [sp, #33]	; 0x21
1a000ec8:	4a88      	ldr	r2, [pc, #544]	; (1a0010ec <vCommMng+0x2f0>)
1a000eca:	00a3      	lsls	r3, r4, #2
1a000ecc:	191d      	adds	r5, r3, r4
1a000ece:	00a9      	lsls	r1, r5, #2
1a000ed0:	4411      	add	r1, r2
1a000ed2:	724e      	strb	r6, [r1, #9]
					sensor[pos_aux].estado = aux.estado;
1a000ed4:	7208      	strb	r0, [r1, #8]
					uartRxFlush( UART_485 );
1a000ed6:	2001      	movs	r0, #1
1a000ed8:	f005 fada 	bl	1a006490 <uartRxFlush>
					break;
1a000edc:	e7ad      	b.n	1a000e3a <vCommMng+0x3e>
					printf("<COMMAND> ");
1a000ede:	4884      	ldr	r0, [pc, #528]	; (1a0010f0 <vCommMng+0x2f4>)
1a000ee0:	f006 fdb8 	bl	1a007a54 <iprintf>
					uartReadByte( UART_485, &recvbyte );
1a000ee4:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
1a000ee8:	2001      	movs	r0, #1
1a000eea:	f005 fb25 	bl	1a006538 <uartReadByte>
					switch(recvbyte)
1a000eee:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
1a000ef2:	3bed      	subs	r3, #237	; 0xed
1a000ef4:	2b03      	cmp	r3, #3
1a000ef6:	d8a0      	bhi.n	1a000e3a <vCommMng+0x3e>
1a000ef8:	e8df f003 	tbb	[pc, r3]
1a000efc:	022c4577 	.word	0x022c4577
							printf("<I AM> ");
1a000f00:	487c      	ldr	r0, [pc, #496]	; (1a0010f4 <vCommMng+0x2f8>)
1a000f02:	f006 fda7 	bl	1a007a54 <iprintf>
							uartReadByte( UART_485, &recvbyte );
1a000f06:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
1a000f0a:	2001      	movs	r0, #1
1a000f0c:	f005 fb14 	bl	1a006538 <uartReadByte>
							if(recvbyte == UCI_1)
1a000f10:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
1a000f14:	2b01      	cmp	r3, #1
1a000f16:	d003      	beq.n	1a000f20 <vCommMng+0x124>
							uartRxFlush( UART_485 );
1a000f18:	2001      	movs	r0, #1
1a000f1a:	f005 fab9 	bl	1a006490 <uartRxFlush>
							break;
1a000f1e:	e78c      	b.n	1a000e3a <vCommMng+0x3e>
								printf("< UCI#1 >\r\n ");
1a000f20:	4875      	ldr	r0, [pc, #468]	; (1a0010f8 <vCommMng+0x2fc>)
1a000f22:	f006 fd97 	bl	1a007a54 <iprintf>
								setStatus(BIT_REMOTE,TRUE);
1a000f26:	2101      	movs	r1, #1
1a000f28:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
1a000f2c:	f002 fa60 	bl	1a0033f0 <setStatus>
								outMsg.msgType = COMMAND;
1a000f30:	23ff      	movs	r3, #255	; 0xff
1a000f32:	f88d 3000 	strb.w	r3, [sp]
								outMsg.order = U_ARE;
1a000f36:	23ef      	movs	r3, #239	; 0xef
1a000f38:	f88d 3001 	strb.w	r3, [sp, #1]
								outMsg.message[0] = UCI_1;
1a000f3c:	2301      	movs	r3, #1
1a000f3e:	f88d 3002 	strb.w	r3, [sp, #2]
								xQueueSend(intercommQueue, &outMsg, 1000);
1a000f42:	2300      	movs	r3, #0
1a000f44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a000f48:	4669      	mov	r1, sp
1a000f4a:	4866      	ldr	r0, [pc, #408]	; (1a0010e4 <vCommMng+0x2e8>)
1a000f4c:	6800      	ldr	r0, [r0, #0]
1a000f4e:	f002 ff0f 	bl	1a003d70 <xQueueGenericSend>
1a000f52:	e7e1      	b.n	1a000f18 <vCommMng+0x11c>
							printf("<U_ARE> ");
1a000f54:	4869      	ldr	r0, [pc, #420]	; (1a0010fc <vCommMng+0x300>)
1a000f56:	f006 fd7d 	bl	1a007a54 <iprintf>
							uartReadByte( UART_485, &recvbyte );
1a000f5a:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
1a000f5e:	2001      	movs	r0, #1
1a000f60:	f005 faea 	bl	1a006538 <uartReadByte>
							if(recvbyte == UCI_1)
1a000f64:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
1a000f68:	2b01      	cmp	r3, #1
1a000f6a:	f47f af66 	bne.w	1a000e3a <vCommMng+0x3e>
								printf("< UCI#1 >\r\n ");
1a000f6e:	4862      	ldr	r0, [pc, #392]	; (1a0010f8 <vCommMng+0x2fc>)
1a000f70:	f006 fd70 	bl	1a007a54 <iprintf>
								setStatus(BIT_REMOTE,TRUE);
1a000f74:	2101      	movs	r1, #1
1a000f76:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
1a000f7a:	f002 fa39 	bl	1a0033f0 <setStatus>
1a000f7e:	e75c      	b.n	1a000e3a <vCommMng+0x3e>
								vTaskDelay(1);///////////////
1a000f80:	2001      	movs	r0, #1
1a000f82:	f003 fcf1 	bl	1a004968 <vTaskDelay>
							while(uartRxReady( UART_485) == 0)
1a000f86:	2001      	movs	r0, #1
1a000f88:	f005 fa60 	bl	1a00644c <uartRxReady>
1a000f8c:	2800      	cmp	r0, #0
1a000f8e:	d0f7      	beq.n	1a000f80 <vCommMng+0x184>
							printf("<ROM SEND REQUESTED>\r\n ");
1a000f90:	485b      	ldr	r0, [pc, #364]	; (1a001100 <vCommMng+0x304>)
1a000f92:	f006 fd5f 	bl	1a007a54 <iprintf>
							uartReadByte( UART_485, &recvbyte );
1a000f96:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
1a000f9a:	2001      	movs	r0, #1
1a000f9c:	f005 facc 	bl	1a006538 <uartReadByte>
								msgBuffer.msgType = ROM;
1a000fa0:	23fe      	movs	r3, #254	; 0xfe
1a000fa2:	f88d 300c 	strb.w	r3, [sp, #12]
								msgBuffer.order = recvbyte;
1a000fa6:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
1a000faa:	f88d 000d 	strb.w	r0, [sp, #13]
								msgBuffer.crc = recvbyte; //carga crc con valor inicial
1a000fae:	f88d 0016 	strb.w	r0, [sp, #22]
								Board_EEPROM_loadSensor(msgBuffer.order, &aux);
1a000fb2:	a906      	add	r1, sp, #24
1a000fb4:	f7ff fa24 	bl	1a000400 <Board_EEPROM_loadSensor>
								for(int j=0; j<8; j++)
1a000fb8:	2200      	movs	r2, #0
1a000fba:	e00b      	b.n	1a000fd4 <vCommMng+0x1d8>
									msgBuffer.message[j] = aux.ROM_NO[j]; // PRUEBA/////////////////////////
1a000fbc:	ab0c      	add	r3, sp, #48	; 0x30
1a000fbe:	1899      	adds	r1, r3, r2
1a000fc0:	f811 3c18 	ldrb.w	r3, [r1, #-24]
1a000fc4:	f801 3c22 	strb.w	r3, [r1, #-34]
									msgBuffer.crc += msgBuffer.message[j]; //actualiza crc
1a000fc8:	f89d 1016 	ldrb.w	r1, [sp, #22]
1a000fcc:	440b      	add	r3, r1
1a000fce:	f88d 3016 	strb.w	r3, [sp, #22]
								for(int j=0; j<8; j++)
1a000fd2:	3201      	adds	r2, #1
1a000fd4:	2a07      	cmp	r2, #7
1a000fd6:	ddf1      	ble.n	1a000fbc <vCommMng+0x1c0>
								xQueueSend(intercommQueue, &msgBuffer, TIMEOUT);
1a000fd8:	2300      	movs	r3, #0
1a000fda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a000fde:	a903      	add	r1, sp, #12
1a000fe0:	4840      	ldr	r0, [pc, #256]	; (1a0010e4 <vCommMng+0x2e8>)
1a000fe2:	6800      	ldr	r0, [r0, #0]
1a000fe4:	f002 fec4 	bl	1a003d70 <xQueueGenericSend>
							break;
1a000fe8:	e727      	b.n	1a000e3a <vCommMng+0x3e>
							printf("<Pulling config> \r\n");
1a000fea:	4846      	ldr	r0, [pc, #280]	; (1a001104 <vCommMng+0x308>)
1a000fec:	f006 fdcc 	bl	1a007b88 <puts>
							systemMode = ROM_COPY_4;
1a000ff0:	4b45      	ldr	r3, [pc, #276]	; (1a001108 <vCommMng+0x30c>)
1a000ff2:	224c      	movs	r2, #76	; 0x4c
1a000ff4:	701a      	strb	r2, [r3, #0]
							break;
1a000ff6:	e720      	b.n	1a000e3a <vCommMng+0x3e>
					printf("rec ROM ");
1a000ff8:	4844      	ldr	r0, [pc, #272]	; (1a00110c <vCommMng+0x310>)
1a000ffa:	f006 fd2b 	bl	1a007a54 <iprintf>
					while(uartRxReady( UART_485) == 0)
1a000ffe:	e002      	b.n	1a001006 <vCommMng+0x20a>
						vTaskDelay(1);///////////////
1a001000:	2001      	movs	r0, #1
1a001002:	f003 fcb1 	bl	1a004968 <vTaskDelay>
					while(uartRxReady( UART_485) == 0)
1a001006:	2001      	movs	r0, #1
1a001008:	f005 fa20 	bl	1a00644c <uartRxReady>
1a00100c:	2800      	cmp	r0, #0
1a00100e:	d0f7      	beq.n	1a001000 <vCommMng+0x204>
					uartReadByte( UART_485, &recvbyte );
1a001010:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
1a001014:	2001      	movs	r0, #1
1a001016:	f005 fa8f 	bl	1a006538 <uartReadByte>
					reserve = recvbyte; //Reserva el num de ROM para utilizar despues
1a00101a:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
					printf("num: %d\r\n",reserve);
1a00101e:	4629      	mov	r1, r5
1a001020:	483b      	ldr	r0, [pc, #236]	; (1a001110 <vCommMng+0x314>)
1a001022:	f006 fd17 	bl	1a007a54 <iprintf>
					crc = recvbyte;//primera carga de crc
1a001026:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
1a00102a:	4b3a      	ldr	r3, [pc, #232]	; (1a001114 <vCommMng+0x318>)
1a00102c:	701a      	strb	r2, [r3, #0]
					Board_EEPROM_loadSensor(reserve, &aux);
1a00102e:	a906      	add	r1, sp, #24
1a001030:	4628      	mov	r0, r5
1a001032:	f7ff f9e5 	bl	1a000400 <Board_EEPROM_loadSensor>
					for(int i=0;i<8;i++)
1a001036:	2400      	movs	r4, #0
1a001038:	e01c      	b.n	1a001074 <vCommMng+0x278>
						uartReadByte( UART_485, &recvbyte );
1a00103a:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
1a00103e:	2001      	movs	r0, #1
1a001040:	f005 fa7a 	bl	1a006538 <uartReadByte>
						printf("recibo ROM byte: %X\r\n",recvbyte);
1a001044:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
1a001048:	4833      	ldr	r0, [pc, #204]	; (1a001118 <vCommMng+0x31c>)
1a00104a:	f006 fd03 	bl	1a007a54 <iprintf>
						rem_ROM[reserve][i] = recvbyte;// se usa en rom copy
1a00104e:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
1a001052:	4b32      	ldr	r3, [pc, #200]	; (1a00111c <vCommMng+0x320>)
1a001054:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
1a001058:	551a      	strb	r2, [r3, r4]
						if(recvbyte != aux.ROM_NO[i])
1a00105a:	ab0c      	add	r3, sp, #48	; 0x30
1a00105c:	4423      	add	r3, r4
1a00105e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
1a001062:	429a      	cmp	r2, r3
1a001064:	d111      	bne.n	1a00108a <vCommMng+0x28e>
						crc += recvbyte;
1a001066:	4a2b      	ldr	r2, [pc, #172]	; (1a001114 <vCommMng+0x318>)
1a001068:	7813      	ldrb	r3, [r2, #0]
1a00106a:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
1a00106e:	440b      	add	r3, r1
1a001070:	7013      	strb	r3, [r2, #0]
					for(int i=0;i<8;i++)
1a001072:	3401      	adds	r4, #1
1a001074:	2c07      	cmp	r4, #7
1a001076:	dc11      	bgt.n	1a00109c <vCommMng+0x2a0>
						while(uartRxReady( UART_485) == 0)
1a001078:	2001      	movs	r0, #1
1a00107a:	f005 f9e7 	bl	1a00644c <uartRxReady>
1a00107e:	2800      	cmp	r0, #0
1a001080:	d1db      	bne.n	1a00103a <vCommMng+0x23e>
							vTaskDelay(1);///////////////
1a001082:	2001      	movs	r0, #1
1a001084:	f003 fc70 	bl	1a004968 <vTaskDelay>
1a001088:	e7f6      	b.n	1a001078 <vCommMng+0x27c>
							setStatus(BIT_ROM_CONSIST, FALSE);
1a00108a:	2100      	movs	r1, #0
1a00108c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
1a001090:	f002 f9ae 	bl	1a0033f0 <setStatus>
1a001094:	e7e7      	b.n	1a001066 <vCommMng+0x26a>
						vTaskDelay(1);///////////////
1a001096:	2001      	movs	r0, #1
1a001098:	f003 fc66 	bl	1a004968 <vTaskDelay>
					while(uartRxReady( UART_485) == 0)
1a00109c:	2001      	movs	r0, #1
1a00109e:	f005 f9d5 	bl	1a00644c <uartRxReady>
1a0010a2:	2800      	cmp	r0, #0
1a0010a4:	d0f7      	beq.n	1a001096 <vCommMng+0x29a>
					uartReadByte( UART_485, &recvbyte );
1a0010a6:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
1a0010aa:	2001      	movs	r0, #1
1a0010ac:	f005 fa44 	bl	1a006538 <uartReadByte>
					printf("rec CRC: %d\r\n",recvbyte);
1a0010b0:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
1a0010b4:	481a      	ldr	r0, [pc, #104]	; (1a001120 <vCommMng+0x324>)
1a0010b6:	f006 fccd 	bl	1a007a54 <iprintf>
					printf("calcCRC: %d\r\n",crc);
1a0010ba:	4c16      	ldr	r4, [pc, #88]	; (1a001114 <vCommMng+0x318>)
1a0010bc:	7821      	ldrb	r1, [r4, #0]
1a0010be:	4819      	ldr	r0, [pc, #100]	; (1a001124 <vCommMng+0x328>)
1a0010c0:	f006 fcc8 	bl	1a007a54 <iprintf>
					if(crc == recvbyte)
1a0010c4:	7822      	ldrb	r2, [r4, #0]
1a0010c6:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
1a0010ca:	429a      	cmp	r2, r3
1a0010cc:	d003      	beq.n	1a0010d6 <vCommMng+0x2da>
					printf("==========================\r\n");
1a0010ce:	4816      	ldr	r0, [pc, #88]	; (1a001128 <vCommMng+0x32c>)
1a0010d0:	f006 fd5a 	bl	1a007b88 <puts>
					break;
1a0010d4:	e6b1      	b.n	1a000e3a <vCommMng+0x3e>
						ROM_active = reserve;
1a0010d6:	4b15      	ldr	r3, [pc, #84]	; (1a00112c <vCommMng+0x330>)
1a0010d8:	601d      	str	r5, [r3, #0]
1a0010da:	e7f8      	b.n	1a0010ce <vCommMng+0x2d2>
1a0010dc:	1a008418 	.word	0x1a008418
1a0010e0:	1a008430 	.word	0x1a008430
1a0010e4:	10004d98 	.word	0x10004d98
1a0010e8:	1a00843c 	.word	0x1a00843c
1a0010ec:	10004d9c 	.word	0x10004d9c
1a0010f0:	1a008450 	.word	0x1a008450
1a0010f4:	1a00845c 	.word	0x1a00845c
1a0010f8:	1a008464 	.word	0x1a008464
1a0010fc:	1a008474 	.word	0x1a008474
1a001100:	1a008480 	.word	0x1a008480
1a001104:	1a008498 	.word	0x1a008498
1a001108:	100000c8 	.word	0x100000c8
1a00110c:	1a0084ac 	.word	0x1a0084ac
1a001110:	1a0084b8 	.word	0x1a0084b8
1a001114:	10004d8c 	.word	0x10004d8c
1a001118:	1a0084c4 	.word	0x1a0084c4
1a00111c:	10004cc8 	.word	0x10004cc8
1a001120:	1a0084dc 	.word	0x1a0084dc
1a001124:	1a0084ec 	.word	0x1a0084ec
1a001128:	1a0084fc 	.word	0x1a0084fc
1a00112c:	10004f80 	.word	0x10004f80

1a001130 <main>:
{
1a001130:	b510      	push	{r4, lr}
1a001132:	b082      	sub	sp, #8
	consoleQueue = xQueueCreate( TAMANO_Q, sizeof(struct outgoingMsg_t));
1a001134:	2200      	movs	r2, #0
1a001136:	2110      	movs	r1, #16
1a001138:	2008      	movs	r0, #8
1a00113a:	f002 fdf1 	bl	1a003d20 <xQueueGenericCreate>
1a00113e:	4b16      	ldr	r3, [pc, #88]	; (1a001198 <main+0x68>)
1a001140:	6018      	str	r0, [r3, #0]
	intercommQueue = xQueueCreate( 2*TAMANO_Q, sizeof(struct outgoingMsg_t));
1a001142:	2200      	movs	r2, #0
1a001144:	2110      	movs	r1, #16
1a001146:	4608      	mov	r0, r1
1a001148:	f002 fdea 	bl	1a003d20 <xQueueGenericCreate>
1a00114c:	4b13      	ldr	r3, [pc, #76]	; (1a00119c <main+0x6c>)
1a00114e:	6018      	str	r0, [r3, #0]
	silenceTimer = xTimerCreate("alarmSilenceTimer", 600000, pdFALSE, (void *) 0, silenceTimerCallback);
1a001150:	4b13      	ldr	r3, [pc, #76]	; (1a0011a0 <main+0x70>)
1a001152:	9300      	str	r3, [sp, #0]
1a001154:	2300      	movs	r3, #0
1a001156:	461a      	mov	r2, r3
1a001158:	4912      	ldr	r1, [pc, #72]	; (1a0011a4 <main+0x74>)
1a00115a:	4813      	ldr	r0, [pc, #76]	; (1a0011a8 <main+0x78>)
1a00115c:	f003 fe86 	bl	1a004e6c <xTimerCreate>
1a001160:	4b12      	ldr	r3, [pc, #72]	; (1a0011ac <main+0x7c>)
1a001162:	6018      	str	r0, [r3, #0]
	normalTimer = xTimerCreate("HMIbackToNormalTimer", 10000, pdFALSE, (void *) 0, normalTimerCallback);
1a001164:	4b12      	ldr	r3, [pc, #72]	; (1a0011b0 <main+0x80>)
1a001166:	9300      	str	r3, [sp, #0]
1a001168:	2300      	movs	r3, #0
1a00116a:	461a      	mov	r2, r3
1a00116c:	f242 7110 	movw	r1, #10000	; 0x2710
1a001170:	4810      	ldr	r0, [pc, #64]	; (1a0011b4 <main+0x84>)
1a001172:	f003 fe7b 	bl	1a004e6c <xTimerCreate>
1a001176:	4b10      	ldr	r3, [pc, #64]	; (1a0011b8 <main+0x88>)
1a001178:	6018      	str	r0, [r3, #0]
	xTaskCreate( vTask1,
1a00117a:	2400      	movs	r4, #0
1a00117c:	9401      	str	r4, [sp, #4]
1a00117e:	2301      	movs	r3, #1
1a001180:	9300      	str	r3, [sp, #0]
1a001182:	4623      	mov	r3, r4
1a001184:	22c8      	movs	r2, #200	; 0xc8
1a001186:	490d      	ldr	r1, [pc, #52]	; (1a0011bc <main+0x8c>)
1a001188:	480d      	ldr	r0, [pc, #52]	; (1a0011c0 <main+0x90>)
1a00118a:	f003 fa58 	bl	1a00463e <xTaskCreate>
   vTaskStartScheduler();
1a00118e:	f003 fa89 	bl	1a0046a4 <vTaskStartScheduler>
}
1a001192:	4620      	mov	r0, r4
1a001194:	b002      	add	sp, #8
1a001196:	bd10      	pop	{r4, pc}
1a001198:	10004d90 	.word	0x10004d90
1a00119c:	10004d98 	.word	0x10004d98
1a0011a0:	1a000935 	.word	0x1a000935
1a0011a4:	000927c0 	.word	0x000927c0
1a0011a8:	1a008180 	.word	0x1a008180
1a0011ac:	10004f84 	.word	0x10004f84
1a0011b0:	1a000941 	.word	0x1a000941
1a0011b4:	1a008194 	.word	0x1a008194
1a0011b8:	10004d88 	.word	0x10004d88
1a0011bc:	1a0081ac 	.word	0x1a0081ac
1a0011c0:	1a000965 	.word	0x1a000965

1a0011c4 <altaUpdate>:
{
1a0011c4:	b570      	push	{r4, r5, r6, lr}
1a0011c6:	4606      	mov	r6, r0
	if(getStatus(BIT_BUS_2) == FALSE)
1a0011c8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
1a0011cc:	f002 f920 	bl	1a003410 <getStatus>
1a0011d0:	bb40      	cbnz	r0, 1a001224 <altaUpdate+0x60>
		p_Bus_2 = OWinit2(GPIO6);
1a0011d2:	201d      	movs	r0, #29
1a0011d4:	f001 fa2a 	bl	1a00262c <OWinit2>
1a0011d8:	4601      	mov	r1, r0
1a0011da:	4b24      	ldr	r3, [pc, #144]	; (1a00126c <altaUpdate+0xa8>)
1a0011dc:	6018      	str	r0, [r3, #0]
		printf("punt_bus: %d \r\n",p_Bus_2);
1a0011de:	4824      	ldr	r0, [pc, #144]	; (1a001270 <altaUpdate+0xac>)
1a0011e0:	f006 fc38 	bl	1a007a54 <iprintf>
	if(p_Bus_2 == NULL)
1a0011e4:	4b21      	ldr	r3, [pc, #132]	; (1a00126c <altaUpdate+0xa8>)
1a0011e6:	681b      	ldr	r3, [r3, #0]
1a0011e8:	b303      	cbz	r3, 1a00122c <altaUpdate+0x68>
		setStatus(BIT_BUS_2,TRUE);
1a0011ea:	2101      	movs	r1, #1
1a0011ec:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
1a0011f0:	f002 f8fe 	bl	1a0033f0 <setStatus>
	if(!OWpresence(p_Bus_2->OWport,p_Bus_2->OWpin))
1a0011f4:	4b1d      	ldr	r3, [pc, #116]	; (1a00126c <altaUpdate+0xa8>)
1a0011f6:	681b      	ldr	r3, [r3, #0]
1a0011f8:	6899      	ldr	r1, [r3, #8]
1a0011fa:	6858      	ldr	r0, [r3, #4]
1a0011fc:	f7ff f91e 	bl	1a00043c <OWpresence>
1a001200:	b1c0      	cbz	r0, 1a001234 <altaUpdate+0x70>
		next = OWsearch(p_Bus_2,ALL_DEVICES);// ToDo: manejo de error!!!!!!!!!!!!
1a001202:	21f0      	movs	r1, #240	; 0xf0
1a001204:	4b19      	ldr	r3, [pc, #100]	; (1a00126c <altaUpdate+0xa8>)
1a001206:	6818      	ldr	r0, [r3, #0]
1a001208:	f7ff f9fc 	bl	1a000604 <OWsearch>
1a00120c:	4604      	mov	r4, r0
		printf("next: %d\r\n",next);
1a00120e:	4601      	mov	r1, r0
1a001210:	4818      	ldr	r0, [pc, #96]	; (1a001274 <altaUpdate+0xb0>)
1a001212:	f006 fc1f 	bl	1a007a54 <iprintf>
		if(next == 1)
1a001216:	2c01      	cmp	r4, #1
1a001218:	d010      	beq.n	1a00123c <altaUpdate+0x78>
			printf("sensor NO detectado\r\n");
1a00121a:	4817      	ldr	r0, [pc, #92]	; (1a001278 <altaUpdate+0xb4>)
1a00121c:	f006 fcb4 	bl	1a007b88 <puts>
}
1a001220:	4630      	mov	r0, r6
1a001222:	bd70      	pop	{r4, r5, r6, pc}
		printf("bus inicializado \r\n");
1a001224:	4815      	ldr	r0, [pc, #84]	; (1a00127c <altaUpdate+0xb8>)
1a001226:	f006 fcaf 	bl	1a007b88 <puts>
1a00122a:	e7db      	b.n	1a0011e4 <altaUpdate+0x20>
		printf("BUS INIT FAILED \r\n");
1a00122c:	4814      	ldr	r0, [pc, #80]	; (1a001280 <altaUpdate+0xbc>)
1a00122e:	f006 fcab 	bl	1a007b88 <puts>
1a001232:	e7df      	b.n	1a0011f4 <altaUpdate+0x30>
		printf("SENSOR DETECTADO \r\n");
1a001234:	4813      	ldr	r0, [pc, #76]	; (1a001284 <altaUpdate+0xc0>)
1a001236:	f006 fca7 	bl	1a007b88 <puts>
1a00123a:	e7e2      	b.n	1a001202 <altaUpdate+0x3e>
			printf("sensor: ");
1a00123c:	4812      	ldr	r0, [pc, #72]	; (1a001288 <altaUpdate+0xc4>)
1a00123e:	f006 fc09 	bl	1a007a54 <iprintf>
			for(int k=0;k<8;k++)
1a001242:	2400      	movs	r4, #0
1a001244:	e00b      	b.n	1a00125e <altaUpdate+0x9a>
				printf("%X ",p_Bus_2->ROM_NO[k]);
1a001246:	4d09      	ldr	r5, [pc, #36]	; (1a00126c <altaUpdate+0xa8>)
1a001248:	682b      	ldr	r3, [r5, #0]
1a00124a:	4423      	add	r3, r4
1a00124c:	7bd9      	ldrb	r1, [r3, #15]
1a00124e:	480f      	ldr	r0, [pc, #60]	; (1a00128c <altaUpdate+0xc8>)
1a001250:	f006 fc00 	bl	1a007a54 <iprintf>
				Sensor.ROM_NO[k] = p_Bus_2->ROM_NO[k];
1a001254:	682b      	ldr	r3, [r5, #0]
1a001256:	4423      	add	r3, r4
1a001258:	7bdb      	ldrb	r3, [r3, #15]
1a00125a:	5533      	strb	r3, [r6, r4]
			for(int k=0;k<8;k++)
1a00125c:	3401      	adds	r4, #1
1a00125e:	2c07      	cmp	r4, #7
1a001260:	ddf1      	ble.n	1a001246 <altaUpdate+0x82>
			printf("\r\n");
1a001262:	480b      	ldr	r0, [pc, #44]	; (1a001290 <altaUpdate+0xcc>)
1a001264:	f006 fc90 	bl	1a007b88 <puts>
1a001268:	e7da      	b.n	1a001220 <altaUpdate+0x5c>
1a00126a:	bf00      	nop
1a00126c:	100000c0 	.word	0x100000c0
1a001270:	1a0083dc 	.word	0x1a0083dc
1a001274:	1a0080f8 	.word	0x1a0080f8
1a001278:	1a008108 	.word	0x1a008108
1a00127c:	1a0080d0 	.word	0x1a0080d0
1a001280:	1a0083ec 	.word	0x1a0083ec
1a001284:	1a0080e4 	.word	0x1a0080e4
1a001288:	1a008638 	.word	0x1a008638
1a00128c:	1a008104 	.word	0x1a008104
1a001290:	1a0083fc 	.word	0x1a0083fc

1a001294 <menuAlarmUpdate>:
	switch(button)
1a001294:	2803      	cmp	r0, #3
1a001296:	d845      	bhi.n	1a001324 <menuAlarmUpdate+0x90>
1a001298:	e8df f000 	tbb	[pc, r0]
1a00129c:	1a100602 	.word	0x1a100602
			systemMode = NORMAL;
1a0012a0:	4b21      	ldr	r3, [pc, #132]	; (1a001328 <menuAlarmUpdate+0x94>)
1a0012a2:	2201      	movs	r2, #1
1a0012a4:	701a      	strb	r2, [r3, #0]
			break;
1a0012a6:	4770      	bx	lr
			itemSelected --;
1a0012a8:	4a20      	ldr	r2, [pc, #128]	; (1a00132c <menuAlarmUpdate+0x98>)
1a0012aa:	6813      	ldr	r3, [r2, #0]
1a0012ac:	3b01      	subs	r3, #1
1a0012ae:	6013      	str	r3, [r2, #0]
			if (itemSelected == 0)
1a0012b0:	2b00      	cmp	r3, #0
1a0012b2:	d137      	bne.n	1a001324 <menuAlarmUpdate+0x90>
				itemSelected = 1;
1a0012b4:	4613      	mov	r3, r2
1a0012b6:	2201      	movs	r2, #1
1a0012b8:	601a      	str	r2, [r3, #0]
1a0012ba:	4770      	bx	lr
			itemSelected ++;
1a0012bc:	4a1b      	ldr	r2, [pc, #108]	; (1a00132c <menuAlarmUpdate+0x98>)
1a0012be:	6813      	ldr	r3, [r2, #0]
1a0012c0:	3301      	adds	r3, #1
1a0012c2:	6013      	str	r3, [r2, #0]
			if (itemSelected > 1)
1a0012c4:	2b01      	cmp	r3, #1
1a0012c6:	dd2d      	ble.n	1a001324 <menuAlarmUpdate+0x90>
				itemSelected = 2;
1a0012c8:	4613      	mov	r3, r2
1a0012ca:	2202      	movs	r2, #2
1a0012cc:	601a      	str	r2, [r3, #0]
1a0012ce:	4770      	bx	lr
{
1a0012d0:	b530      	push	{r4, r5, lr}
1a0012d2:	b083      	sub	sp, #12
			switch(itemSelected)
1a0012d4:	4b15      	ldr	r3, [pc, #84]	; (1a00132c <menuAlarmUpdate+0x98>)
1a0012d6:	681b      	ldr	r3, [r3, #0]
1a0012d8:	2b01      	cmp	r3, #1
1a0012da:	d003      	beq.n	1a0012e4 <menuAlarmUpdate+0x50>
1a0012dc:	2b02      	cmp	r3, #2
1a0012de:	d012      	beq.n	1a001306 <menuAlarmUpdate+0x72>
}
1a0012e0:	b003      	add	sp, #12
1a0012e2:	bd30      	pop	{r4, r5, pc}
					quiet = 1;
1a0012e4:	2401      	movs	r4, #1
1a0012e6:	4b12      	ldr	r3, [pc, #72]	; (1a001330 <menuAlarmUpdate+0x9c>)
1a0012e8:	601c      	str	r4, [r3, #0]
					xTimerStart(silenceTimer,0);
1a0012ea:	4b12      	ldr	r3, [pc, #72]	; (1a001334 <menuAlarmUpdate+0xa0>)
1a0012ec:	681d      	ldr	r5, [r3, #0]
1a0012ee:	f003 fa2b 	bl	1a004748 <xTaskGetTickCount>
1a0012f2:	2300      	movs	r3, #0
1a0012f4:	9300      	str	r3, [sp, #0]
1a0012f6:	4602      	mov	r2, r0
1a0012f8:	4621      	mov	r1, r4
1a0012fa:	4628      	mov	r0, r5
1a0012fc:	f003 fdd2 	bl	1a004ea4 <xTimerGenericCommand>
					systemMode = NORMAL;
1a001300:	4b09      	ldr	r3, [pc, #36]	; (1a001328 <menuAlarmUpdate+0x94>)
1a001302:	701c      	strb	r4, [r3, #0]
					break;
1a001304:	e7ec      	b.n	1a0012e0 <menuAlarmUpdate+0x4c>
					xTimerStart(normalTimer,0);
1a001306:	4b0c      	ldr	r3, [pc, #48]	; (1a001338 <menuAlarmUpdate+0xa4>)
1a001308:	681c      	ldr	r4, [r3, #0]
1a00130a:	f003 fa1d 	bl	1a004748 <xTaskGetTickCount>
1a00130e:	2300      	movs	r3, #0
1a001310:	9300      	str	r3, [sp, #0]
1a001312:	4602      	mov	r2, r0
1a001314:	2101      	movs	r1, #1
1a001316:	4620      	mov	r0, r4
1a001318:	f003 fdc4 	bl	1a004ea4 <xTimerGenericCommand>
					systemMode = ALARM_VIEW;
1a00131c:	4b02      	ldr	r3, [pc, #8]	; (1a001328 <menuAlarmUpdate+0x94>)
1a00131e:	221f      	movs	r2, #31
1a001320:	701a      	strb	r2, [r3, #0]
}
1a001322:	e7dd      	b.n	1a0012e0 <menuAlarmUpdate+0x4c>
1a001324:	4770      	bx	lr
1a001326:	bf00      	nop
1a001328:	100000c8 	.word	0x100000c8
1a00132c:	10004cc4 	.word	0x10004cc4
1a001330:	100000c4 	.word	0x100000c4
1a001334:	10004f84 	.word	0x10004f84
1a001338:	10004d88 	.word	0x10004d88

1a00133c <menuViewUpdate>:
	switch(button)
1a00133c:	2803      	cmp	r0, #3
1a00133e:	d802      	bhi.n	1a001346 <menuViewUpdate+0xa>
			systemMode = NORMAL;
1a001340:	4b01      	ldr	r3, [pc, #4]	; (1a001348 <menuViewUpdate+0xc>)
1a001342:	2201      	movs	r2, #1
1a001344:	701a      	strb	r2, [r3, #0]
}
1a001346:	4770      	bx	lr
1a001348:	100000c8 	.word	0x100000c8

1a00134c <menuEjeUpdate>:
	switch(button)
1a00134c:	2803      	cmp	r0, #3
1a00134e:	d836      	bhi.n	1a0013be <menuEjeUpdate+0x72>
1a001350:	e8df f000 	tbb	[pc, r0]
1a001354:	29120232 	.word	0x29120232
			itemSelected --;
1a001358:	4a1a      	ldr	r2, [pc, #104]	; (1a0013c4 <menuEjeUpdate+0x78>)
1a00135a:	6813      	ldr	r3, [r2, #0]
1a00135c:	3b01      	subs	r3, #1
1a00135e:	6013      	str	r3, [r2, #0]
			if (itemSelected < windowStart)
1a001360:	4a19      	ldr	r2, [pc, #100]	; (1a0013c8 <menuEjeUpdate+0x7c>)
1a001362:	6812      	ldr	r2, [r2, #0]
1a001364:	4293      	cmp	r3, r2
1a001366:	da02      	bge.n	1a00136e <menuEjeUpdate+0x22>
				windowStart --;
1a001368:	3a01      	subs	r2, #1
1a00136a:	4917      	ldr	r1, [pc, #92]	; (1a0013c8 <menuEjeUpdate+0x7c>)
1a00136c:	600a      	str	r2, [r1, #0]
			if (itemSelected == 0)
1a00136e:	bb33      	cbnz	r3, 1a0013be <menuEjeUpdate+0x72>
				itemSelected = 1;
1a001370:	4b14      	ldr	r3, [pc, #80]	; (1a0013c4 <menuEjeUpdate+0x78>)
1a001372:	2201      	movs	r2, #1
1a001374:	601a      	str	r2, [r3, #0]
1a001376:	e022      	b.n	1a0013be <menuEjeUpdate+0x72>
			itemSelected ++;
1a001378:	4a12      	ldr	r2, [pc, #72]	; (1a0013c4 <menuEjeUpdate+0x78>)
1a00137a:	6813      	ldr	r3, [r2, #0]
1a00137c:	3301      	adds	r3, #1
1a00137e:	6013      	str	r3, [r2, #0]
			if (itemSelected >= windowStart + WINDOW_HEIGHT)
1a001380:	4a11      	ldr	r2, [pc, #68]	; (1a0013c8 <menuEjeUpdate+0x7c>)
1a001382:	6812      	ldr	r2, [r2, #0]
1a001384:	1cd1      	adds	r1, r2, #3
1a001386:	428b      	cmp	r3, r1
1a001388:	dd02      	ble.n	1a001390 <menuEjeUpdate+0x44>
				windowStart ++;
1a00138a:	3201      	adds	r2, #1
1a00138c:	4b0e      	ldr	r3, [pc, #56]	; (1a0013c8 <menuEjeUpdate+0x7c>)
1a00138e:	601a      	str	r2, [r3, #0]
			if(windowStart > 3)
1a001390:	4b0d      	ldr	r3, [pc, #52]	; (1a0013c8 <menuEjeUpdate+0x7c>)
1a001392:	681b      	ldr	r3, [r3, #0]
1a001394:	2b03      	cmp	r3, #3
1a001396:	dd12      	ble.n	1a0013be <menuEjeUpdate+0x72>
				windowStart = 3;
1a001398:	4b0b      	ldr	r3, [pc, #44]	; (1a0013c8 <menuEjeUpdate+0x7c>)
1a00139a:	2203      	movs	r2, #3
1a00139c:	601a      	str	r2, [r3, #0]
				itemSelected = 6;
1a00139e:	4b09      	ldr	r3, [pc, #36]	; (1a0013c4 <menuEjeUpdate+0x78>)
1a0013a0:	2206      	movs	r2, #6
1a0013a2:	601a      	str	r2, [r3, #0]
1a0013a4:	e00b      	b.n	1a0013be <menuEjeUpdate+0x72>
{
1a0013a6:	b510      	push	{r4, lr}
			aux_eje = itemSelected;///Almacenar !!!!!!!!!!!!!!!!!!!!!!!!
1a0013a8:	4b06      	ldr	r3, [pc, #24]	; (1a0013c4 <menuEjeUpdate+0x78>)
1a0013aa:	681c      	ldr	r4, [r3, #0]
			printf("eje seleccionado: %d\r\n",aux_eje); //test
1a0013ac:	4621      	mov	r1, r4
1a0013ae:	4807      	ldr	r0, [pc, #28]	; (1a0013cc <menuEjeUpdate+0x80>)
1a0013b0:	f006 fb50 	bl	1a007a54 <iprintf>
}
1a0013b4:	4620      	mov	r0, r4
1a0013b6:	bd10      	pop	{r4, pc}
			systemMode = NORMAL;
1a0013b8:	4b05      	ldr	r3, [pc, #20]	; (1a0013d0 <menuEjeUpdate+0x84>)
1a0013ba:	2201      	movs	r2, #1
1a0013bc:	701a      	strb	r2, [r3, #0]
}
1a0013be:	4620      	mov	r0, r4
1a0013c0:	4770      	bx	lr
1a0013c2:	bf00      	nop
1a0013c4:	10004cc4 	.word	0x10004cc4
1a0013c8:	10004cc0 	.word	0x10004cc0
1a0013cc:	1a008238 	.word	0x1a008238
1a0013d0:	100000c8 	.word	0x100000c8

1a0013d4 <menuPosUpdate>:
{
1a0013d4:	b510      	push	{r4, lr}
	switch(button)
1a0013d6:	2803      	cmp	r0, #3
1a0013d8:	d840      	bhi.n	1a00145c <menuPosUpdate+0x88>
1a0013da:	e8df f000 	tbb	[pc, r0]
1a0013de:	0d02      	.short	0x0d02
1a0013e0:	381f      	.short	0x381f
			systemMode = NORMAL;
1a0013e2:	4b24      	ldr	r3, [pc, #144]	; (1a001474 <menuPosUpdate+0xa0>)
1a0013e4:	2201      	movs	r2, #1
1a0013e6:	701a      	strb	r2, [r3, #0]
	int aux_pos = -1;
1a0013e8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	printf("posicion retornada: %d",aux_pos);
1a0013ec:	4621      	mov	r1, r4
1a0013ee:	4822      	ldr	r0, [pc, #136]	; (1a001478 <menuPosUpdate+0xa4>)
1a0013f0:	f006 fb30 	bl	1a007a54 <iprintf>
}
1a0013f4:	4620      	mov	r0, r4
1a0013f6:	bd10      	pop	{r4, pc}
			itemSelected --;
1a0013f8:	4a20      	ldr	r2, [pc, #128]	; (1a00147c <menuPosUpdate+0xa8>)
1a0013fa:	6813      	ldr	r3, [r2, #0]
1a0013fc:	3b01      	subs	r3, #1
1a0013fe:	6013      	str	r3, [r2, #0]
			if (itemSelected < windowStart)
1a001400:	4a1f      	ldr	r2, [pc, #124]	; (1a001480 <menuPosUpdate+0xac>)
1a001402:	6812      	ldr	r2, [r2, #0]
1a001404:	4293      	cmp	r3, r2
1a001406:	da02      	bge.n	1a00140e <menuPosUpdate+0x3a>
				windowStart --;
1a001408:	3a01      	subs	r2, #1
1a00140a:	491d      	ldr	r1, [pc, #116]	; (1a001480 <menuPosUpdate+0xac>)
1a00140c:	600a      	str	r2, [r1, #0]
			if (itemSelected == 0)
1a00140e:	bb5b      	cbnz	r3, 1a001468 <menuPosUpdate+0x94>
				itemSelected = 1;
1a001410:	4b1a      	ldr	r3, [pc, #104]	; (1a00147c <menuPosUpdate+0xa8>)
1a001412:	2201      	movs	r2, #1
1a001414:	601a      	str	r2, [r3, #0]
	int aux_pos = -1;
1a001416:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
1a00141a:	e7e7      	b.n	1a0013ec <menuPosUpdate+0x18>
			itemSelected ++;
1a00141c:	4a17      	ldr	r2, [pc, #92]	; (1a00147c <menuPosUpdate+0xa8>)
1a00141e:	6813      	ldr	r3, [r2, #0]
1a001420:	3301      	adds	r3, #1
1a001422:	6013      	str	r3, [r2, #0]
			if (itemSelected >= windowStart + WINDOW_HEIGHT)
1a001424:	4a16      	ldr	r2, [pc, #88]	; (1a001480 <menuPosUpdate+0xac>)
1a001426:	6812      	ldr	r2, [r2, #0]
1a001428:	1cd1      	adds	r1, r2, #3
1a00142a:	428b      	cmp	r3, r1
1a00142c:	dd02      	ble.n	1a001434 <menuPosUpdate+0x60>
				windowStart ++;
1a00142e:	3201      	adds	r2, #1
1a001430:	4b13      	ldr	r3, [pc, #76]	; (1a001480 <menuPosUpdate+0xac>)
1a001432:	601a      	str	r2, [r3, #0]
			if(windowStart > 3)
1a001434:	4b12      	ldr	r3, [pc, #72]	; (1a001480 <menuPosUpdate+0xac>)
1a001436:	681b      	ldr	r3, [r3, #0]
1a001438:	2b03      	cmp	r3, #3
1a00143a:	dd18      	ble.n	1a00146e <menuPosUpdate+0x9a>
				windowStart = 3;
1a00143c:	4b10      	ldr	r3, [pc, #64]	; (1a001480 <menuPosUpdate+0xac>)
1a00143e:	2203      	movs	r2, #3
1a001440:	601a      	str	r2, [r3, #0]
				itemSelected = 6;
1a001442:	4b0e      	ldr	r3, [pc, #56]	; (1a00147c <menuPosUpdate+0xa8>)
1a001444:	2206      	movs	r2, #6
1a001446:	601a      	str	r2, [r3, #0]
	int aux_pos = -1;
1a001448:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
1a00144c:	e7ce      	b.n	1a0013ec <menuPosUpdate+0x18>
			aux_pos = itemSelected;///Almacenar!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
1a00144e:	4b0b      	ldr	r3, [pc, #44]	; (1a00147c <menuPosUpdate+0xa8>)
1a001450:	681c      	ldr	r4, [r3, #0]
			printf("posicion seleccionada: %d\r\n",aux_pos); //test
1a001452:	4621      	mov	r1, r4
1a001454:	480b      	ldr	r0, [pc, #44]	; (1a001484 <menuPosUpdate+0xb0>)
1a001456:	f006 fafd 	bl	1a007a54 <iprintf>
			break;
1a00145a:	e7c7      	b.n	1a0013ec <menuPosUpdate+0x18>
			printf("default\r\n"); //test
1a00145c:	480a      	ldr	r0, [pc, #40]	; (1a001488 <menuPosUpdate+0xb4>)
1a00145e:	f006 fb93 	bl	1a007b88 <puts>
	int aux_pos = -1;
1a001462:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			break;
1a001466:	e7c1      	b.n	1a0013ec <menuPosUpdate+0x18>
	int aux_pos = -1;
1a001468:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
1a00146c:	e7be      	b.n	1a0013ec <menuPosUpdate+0x18>
1a00146e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
1a001472:	e7bb      	b.n	1a0013ec <menuPosUpdate+0x18>
1a001474:	100000c8 	.word	0x100000c8
1a001478:	1a008304 	.word	0x1a008304
1a00147c:	10004cc4 	.word	0x10004cc4
1a001480:	10004cc0 	.word	0x10004cc0
1a001484:	1a0082dc 	.word	0x1a0082dc
1a001488:	1a0082f8 	.word	0x1a0082f8

1a00148c <menuLoopUpdate>:
{
1a00148c:	b510      	push	{r4, lr}
1a00148e:	b082      	sub	sp, #8
	switch(button)
1a001490:	2803      	cmp	r0, #3
1a001492:	d854      	bhi.n	1a00153e <menuLoopUpdate+0xb2>
1a001494:	e8df f000 	tbb	[pc, r0]
1a001498:	2f180702 	.word	0x2f180702
			systemMode = NORMAL;
1a00149c:	4b2a      	ldr	r3, [pc, #168]	; (1a001548 <menuLoopUpdate+0xbc>)
1a00149e:	2201      	movs	r2, #1
1a0014a0:	701a      	strb	r2, [r3, #0]
}
1a0014a2:	b002      	add	sp, #8
1a0014a4:	bd10      	pop	{r4, pc}
			itemSelected --;
1a0014a6:	4a29      	ldr	r2, [pc, #164]	; (1a00154c <menuLoopUpdate+0xc0>)
1a0014a8:	6813      	ldr	r3, [r2, #0]
1a0014aa:	3b01      	subs	r3, #1
1a0014ac:	6013      	str	r3, [r2, #0]
			if (itemSelected < windowStart)
1a0014ae:	4a28      	ldr	r2, [pc, #160]	; (1a001550 <menuLoopUpdate+0xc4>)
1a0014b0:	6812      	ldr	r2, [r2, #0]
1a0014b2:	4293      	cmp	r3, r2
1a0014b4:	da02      	bge.n	1a0014bc <menuLoopUpdate+0x30>
				windowStart --;
1a0014b6:	3a01      	subs	r2, #1
1a0014b8:	4925      	ldr	r1, [pc, #148]	; (1a001550 <menuLoopUpdate+0xc4>)
1a0014ba:	600a      	str	r2, [r1, #0]
			if (itemSelected == 0)
1a0014bc:	2b00      	cmp	r3, #0
1a0014be:	d1f0      	bne.n	1a0014a2 <menuLoopUpdate+0x16>
				itemSelected = 1;
1a0014c0:	4b22      	ldr	r3, [pc, #136]	; (1a00154c <menuLoopUpdate+0xc0>)
1a0014c2:	2201      	movs	r2, #1
1a0014c4:	601a      	str	r2, [r3, #0]
1a0014c6:	e7ec      	b.n	1a0014a2 <menuLoopUpdate+0x16>
			itemSelected ++;
1a0014c8:	4a20      	ldr	r2, [pc, #128]	; (1a00154c <menuLoopUpdate+0xc0>)
1a0014ca:	6813      	ldr	r3, [r2, #0]
1a0014cc:	3301      	adds	r3, #1
1a0014ce:	6013      	str	r3, [r2, #0]
			if (itemSelected >= windowStart + WINDOW_HEIGHT)
1a0014d0:	4a1f      	ldr	r2, [pc, #124]	; (1a001550 <menuLoopUpdate+0xc4>)
1a0014d2:	6812      	ldr	r2, [r2, #0]
1a0014d4:	1cd1      	adds	r1, r2, #3
1a0014d6:	428b      	cmp	r3, r1
1a0014d8:	dd02      	ble.n	1a0014e0 <menuLoopUpdate+0x54>
				windowStart ++;
1a0014da:	3201      	adds	r2, #1
1a0014dc:	4b1c      	ldr	r3, [pc, #112]	; (1a001550 <menuLoopUpdate+0xc4>)
1a0014de:	601a      	str	r2, [r3, #0]
			if(windowStart > 2)
1a0014e0:	4b1b      	ldr	r3, [pc, #108]	; (1a001550 <menuLoopUpdate+0xc4>)
1a0014e2:	681b      	ldr	r3, [r3, #0]
1a0014e4:	2b02      	cmp	r3, #2
1a0014e6:	dddc      	ble.n	1a0014a2 <menuLoopUpdate+0x16>
				windowStart = 2;
1a0014e8:	4b19      	ldr	r3, [pc, #100]	; (1a001550 <menuLoopUpdate+0xc4>)
1a0014ea:	2202      	movs	r2, #2
1a0014ec:	601a      	str	r2, [r3, #0]
				itemSelected = 5;
1a0014ee:	4b17      	ldr	r3, [pc, #92]	; (1a00154c <menuLoopUpdate+0xc0>)
1a0014f0:	2205      	movs	r2, #5
1a0014f2:	601a      	str	r2, [r3, #0]
1a0014f4:	e7d5      	b.n	1a0014a2 <menuLoopUpdate+0x16>
			switch(itemSelected)
1a0014f6:	4b15      	ldr	r3, [pc, #84]	; (1a00154c <menuLoopUpdate+0xc0>)
1a0014f8:	681b      	ldr	r3, [r3, #0]
1a0014fa:	3b01      	subs	r3, #1
1a0014fc:	2b03      	cmp	r3, #3
1a0014fe:	d8d0      	bhi.n	1a0014a2 <menuLoopUpdate+0x16>
1a001500:	e8df f003 	tbb	[pc, r3]
1a001504:	19151102 	.word	0x19151102
				xTimerStart(normalTimer,0);
1a001508:	4b12      	ldr	r3, [pc, #72]	; (1a001554 <menuLoopUpdate+0xc8>)
1a00150a:	681c      	ldr	r4, [r3, #0]
1a00150c:	f003 f91c 	bl	1a004748 <xTaskGetTickCount>
1a001510:	2300      	movs	r3, #0
1a001512:	9300      	str	r3, [sp, #0]
1a001514:	4602      	mov	r2, r0
1a001516:	2101      	movs	r1, #1
1a001518:	4620      	mov	r0, r4
1a00151a:	f003 fcc3 	bl	1a004ea4 <xTimerGenericCommand>
				systemMode = STATUS;
1a00151e:	4b0a      	ldr	r3, [pc, #40]	; (1a001548 <menuLoopUpdate+0xbc>)
1a001520:	2251      	movs	r2, #81	; 0x51
1a001522:	701a      	strb	r2, [r3, #0]
				break;
1a001524:	e7bd      	b.n	1a0014a2 <menuLoopUpdate+0x16>
				systemMode = CHK_MATRIX;
1a001526:	4b08      	ldr	r3, [pc, #32]	; (1a001548 <menuLoopUpdate+0xbc>)
1a001528:	2252      	movs	r2, #82	; 0x52
1a00152a:	701a      	strb	r2, [r3, #0]
				break;
1a00152c:	e7b9      	b.n	1a0014a2 <menuLoopUpdate+0x16>
				systemMode = CHK_BUZZER;
1a00152e:	4b06      	ldr	r3, [pc, #24]	; (1a001548 <menuLoopUpdate+0xbc>)
1a001530:	2253      	movs	r2, #83	; 0x53
1a001532:	701a      	strb	r2, [r3, #0]
				break;
1a001534:	e7b5      	b.n	1a0014a2 <menuLoopUpdate+0x16>
				systemMode = CHK_SEMAPH;
1a001536:	4b04      	ldr	r3, [pc, #16]	; (1a001548 <menuLoopUpdate+0xbc>)
1a001538:	2254      	movs	r2, #84	; 0x54
1a00153a:	701a      	strb	r2, [r3, #0]
				break;
1a00153c:	e7b1      	b.n	1a0014a2 <menuLoopUpdate+0x16>
			printf("default\r\n"); //test
1a00153e:	4806      	ldr	r0, [pc, #24]	; (1a001558 <menuLoopUpdate+0xcc>)
1a001540:	f006 fb22 	bl	1a007b88 <puts>
}
1a001544:	e7ad      	b.n	1a0014a2 <menuLoopUpdate+0x16>
1a001546:	bf00      	nop
1a001548:	100000c8 	.word	0x100000c8
1a00154c:	10004cc4 	.word	0x10004cc4
1a001550:	10004cc0 	.word	0x10004cc0
1a001554:	10004d88 	.word	0x10004d88
1a001558:	1a0082f8 	.word	0x1a0082f8

1a00155c <altaSecUpdate>:
{
1a00155c:	b508      	push	{r3, lr}
	lcdClear();
1a00155e:	f005 fb43 	bl	1a006be8 <lcdClear>
	lcdGoToXY( 0,0 );
1a001562:	2100      	movs	r1, #0
1a001564:	4608      	mov	r0, r1
1a001566:	f005 fb17 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( "Sensor detectado: " );
1a00156a:	4809      	ldr	r0, [pc, #36]	; (1a001590 <altaSecUpdate+0x34>)
1a00156c:	f005 fb4f 	bl	1a006c0e <lcdSendStringRaw>
	lcdGoToXY( 0,2 );
1a001570:	2102      	movs	r1, #2
1a001572:	2000      	movs	r0, #0
1a001574:	f005 fb10 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( "Ingresar en ROM?" );
1a001578:	4806      	ldr	r0, [pc, #24]	; (1a001594 <altaSecUpdate+0x38>)
1a00157a:	f005 fb48 	bl	1a006c0e <lcdSendStringRaw>
	lcdGoToXY( 0,3 );
1a00157e:	2103      	movs	r1, #3
1a001580:	2000      	movs	r0, #0
1a001582:	f005 fb09 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( "NO                SI" );
1a001586:	4804      	ldr	r0, [pc, #16]	; (1a001598 <altaSecUpdate+0x3c>)
1a001588:	f005 fb41 	bl	1a006c0e <lcdSendStringRaw>
}
1a00158c:	bd08      	pop	{r3, pc}
1a00158e:	bf00      	nop
1a001590:	1a008090 	.word	0x1a008090
1a001594:	1a0080a4 	.word	0x1a0080a4
1a001598:	1a0080b8 	.word	0x1a0080b8

1a00159c <altaSec2Update>:
{
1a00159c:	b508      	push	{r3, lr}
	lcdClear();
1a00159e:	f005 fb23 	bl	1a006be8 <lcdClear>
	lcdGoToXY( 0,0 );
1a0015a2:	2100      	movs	r1, #0
1a0015a4:	4608      	mov	r0, r1
1a0015a6:	f005 faf7 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( "Sensor no detectado: " );
1a0015aa:	480c      	ldr	r0, [pc, #48]	; (1a0015dc <altaSec2Update+0x40>)
1a0015ac:	f005 fb2f 	bl	1a006c0e <lcdSendStringRaw>
	lcdGoToXY( 0,1 );
1a0015b0:	2101      	movs	r1, #1
1a0015b2:	2000      	movs	r0, #0
1a0015b4:	f005 faf0 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( "Conecte el sensor de " );
1a0015b8:	4809      	ldr	r0, [pc, #36]	; (1a0015e0 <altaSec2Update+0x44>)
1a0015ba:	f005 fb28 	bl	1a006c0e <lcdSendStringRaw>
	lcdGoToXY( 0,2 );
1a0015be:	2102      	movs	r1, #2
1a0015c0:	2000      	movs	r0, #0
1a0015c2:	f005 fae9 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( "recambio y haga " );
1a0015c6:	4807      	ldr	r0, [pc, #28]	; (1a0015e4 <altaSec2Update+0x48>)
1a0015c8:	f005 fb21 	bl	1a006c0e <lcdSendStringRaw>
	lcdGoToXY( 0,3 );
1a0015cc:	2103      	movs	r1, #3
1a0015ce:	2000      	movs	r0, #0
1a0015d0:	f005 fae2 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( "reset del bus" );
1a0015d4:	4804      	ldr	r0, [pc, #16]	; (1a0015e8 <altaSec2Update+0x4c>)
1a0015d6:	f005 fb1a 	bl	1a006c0e <lcdSendStringRaw>
}
1a0015da:	bd08      	pop	{r3, pc}
1a0015dc:	1a00803c 	.word	0x1a00803c
1a0015e0:	1a008054 	.word	0x1a008054
1a0015e4:	1a00806c 	.word	0x1a00806c
1a0015e8:	1a008080 	.word	0x1a008080

1a0015ec <menuInit>:
{
1a0015ec:	b430      	push	{r4, r5}
	strcpy(menu[0], "MENU:");
1a0015ee:	4b15      	ldr	r3, [pc, #84]	; (1a001644 <menuInit+0x58>)
1a0015f0:	4a15      	ldr	r2, [pc, #84]	; (1a001648 <menuInit+0x5c>)
1a0015f2:	6810      	ldr	r0, [r2, #0]
1a0015f4:	6018      	str	r0, [r3, #0]
1a0015f6:	8892      	ldrh	r2, [r2, #4]
1a0015f8:	809a      	strh	r2, [r3, #4]
	strcpy(menu[1], "Alarmas");
1a0015fa:	4a14      	ldr	r2, [pc, #80]	; (1a00164c <menuInit+0x60>)
1a0015fc:	ca03      	ldmia	r2!, {r0, r1}
1a0015fe:	6158      	str	r0, [r3, #20]
1a001600:	6199      	str	r1, [r3, #24]
	strcpy(menu[2], "Sensores");
1a001602:	4a13      	ldr	r2, [pc, #76]	; (1a001650 <menuInit+0x64>)
1a001604:	ca03      	ldmia	r2!, {r0, r1}
1a001606:	6298      	str	r0, [r3, #40]	; 0x28
1a001608:	62d9      	str	r1, [r3, #44]	; 0x2c
1a00160a:	7812      	ldrb	r2, [r2, #0]
1a00160c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	strcpy(menu[3], "ROM");
1a001610:	4a10      	ldr	r2, [pc, #64]	; (1a001654 <menuInit+0x68>)
1a001612:	6810      	ldr	r0, [r2, #0]
1a001614:	63d8      	str	r0, [r3, #60]	; 0x3c
	strcpy(menu[4], "Mantenimiento");
1a001616:	4c10      	ldr	r4, [pc, #64]	; (1a001658 <menuInit+0x6c>)
1a001618:	cc07      	ldmia	r4!, {r0, r1, r2}
1a00161a:	6518      	str	r0, [r3, #80]	; 0x50
1a00161c:	6559      	str	r1, [r3, #84]	; 0x54
1a00161e:	659a      	str	r2, [r3, #88]	; 0x58
1a001620:	8822      	ldrh	r2, [r4, #0]
1a001622:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	strcpy(menu[5], " ");
1a001626:	4a0d      	ldr	r2, [pc, #52]	; (1a00165c <menuInit+0x70>)
1a001628:	8812      	ldrh	r2, [r2, #0]
1a00162a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	strcpy(menu[6], " ");
1a00162e:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	windowStart = 0;
1a001632:	4b0b      	ldr	r3, [pc, #44]	; (1a001660 <menuInit+0x74>)
1a001634:	2200      	movs	r2, #0
1a001636:	601a      	str	r2, [r3, #0]
	itemSelected = 1;
1a001638:	4b0a      	ldr	r3, [pc, #40]	; (1a001664 <menuInit+0x78>)
1a00163a:	2201      	movs	r2, #1
1a00163c:	601a      	str	r2, [r3, #0]
}
1a00163e:	bc30      	pop	{r4, r5}
1a001640:	4770      	bx	lr
1a001642:	bf00      	nop
1a001644:	10004c34 	.word	0x10004c34
1a001648:	1a008250 	.word	0x1a008250
1a00164c:	1a008258 	.word	0x1a008258
1a001650:	1a008260 	.word	0x1a008260
1a001654:	1a00826c 	.word	0x1a00826c
1a001658:	1a008270 	.word	0x1a008270
1a00165c:	1a007fe0 	.word	0x1a007fe0
1a001660:	10004cc0 	.word	0x10004cc0
1a001664:	10004cc4 	.word	0x10004cc4

1a001668 <menuAlarmInit>:
{
1a001668:	b410      	push	{r4}
	strcpy(menu[0], "ALARMAS:");
1a00166a:	4b14      	ldr	r3, [pc, #80]	; (1a0016bc <menuAlarmInit+0x54>)
1a00166c:	4a14      	ldr	r2, [pc, #80]	; (1a0016c0 <menuAlarmInit+0x58>)
1a00166e:	ca03      	ldmia	r2!, {r0, r1}
1a001670:	6018      	str	r0, [r3, #0]
1a001672:	6059      	str	r1, [r3, #4]
1a001674:	7812      	ldrb	r2, [r2, #0]
1a001676:	721a      	strb	r2, [r3, #8]
	strcpy(menu[1], "Silenciar");
1a001678:	4a12      	ldr	r2, [pc, #72]	; (1a0016c4 <menuAlarmInit+0x5c>)
1a00167a:	ca03      	ldmia	r2!, {r0, r1}
1a00167c:	6158      	str	r0, [r3, #20]
1a00167e:	6199      	str	r1, [r3, #24]
1a001680:	8812      	ldrh	r2, [r2, #0]
1a001682:	839a      	strh	r2, [r3, #28]
	strcpy(menu[2], "Visualizar");
1a001684:	4a10      	ldr	r2, [pc, #64]	; (1a0016c8 <menuAlarmInit+0x60>)
1a001686:	ca03      	ldmia	r2!, {r0, r1}
1a001688:	6298      	str	r0, [r3, #40]	; 0x28
1a00168a:	62d9      	str	r1, [r3, #44]	; 0x2c
1a00168c:	8811      	ldrh	r1, [r2, #0]
1a00168e:	7892      	ldrb	r2, [r2, #2]
1a001690:	8619      	strh	r1, [r3, #48]	; 0x30
1a001692:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	strcpy(menu[3], " ");
1a001696:	4a0d      	ldr	r2, [pc, #52]	; (1a0016cc <menuAlarmInit+0x64>)
1a001698:	8812      	ldrh	r2, [r2, #0]
1a00169a:	879a      	strh	r2, [r3, #60]	; 0x3c
	strcpy(menu[4], " ");
1a00169c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	strcpy(menu[5], " ");
1a0016a0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	strcpy(menu[6], " ");
1a0016a4:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	windowStart = 0;
1a0016a8:	4b09      	ldr	r3, [pc, #36]	; (1a0016d0 <menuAlarmInit+0x68>)
1a0016aa:	2200      	movs	r2, #0
1a0016ac:	601a      	str	r2, [r3, #0]
	itemSelected = 1;
1a0016ae:	4b09      	ldr	r3, [pc, #36]	; (1a0016d4 <menuAlarmInit+0x6c>)
1a0016b0:	2201      	movs	r2, #1
1a0016b2:	601a      	str	r2, [r3, #0]
}
1a0016b4:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0016b8:	4770      	bx	lr
1a0016ba:	bf00      	nop
1a0016bc:	10004c34 	.word	0x10004c34
1a0016c0:	1a0081b4 	.word	0x1a0081b4
1a0016c4:	1a0081c0 	.word	0x1a0081c0
1a0016c8:	1a0081cc 	.word	0x1a0081cc
1a0016cc:	1a007fe0 	.word	0x1a007fe0
1a0016d0:	10004cc0 	.word	0x10004cc0
1a0016d4:	10004cc4 	.word	0x10004cc4

1a0016d8 <menuSensInit>:
{
1a0016d8:	b410      	push	{r4}
	strcpy(menu[0], "SENSORES:");
1a0016da:	4b16      	ldr	r3, [pc, #88]	; (1a001734 <menuSensInit+0x5c>)
1a0016dc:	4a16      	ldr	r2, [pc, #88]	; (1a001738 <menuSensInit+0x60>)
1a0016de:	ca03      	ldmia	r2!, {r0, r1}
1a0016e0:	6018      	str	r0, [r3, #0]
1a0016e2:	6059      	str	r1, [r3, #4]
1a0016e4:	8812      	ldrh	r2, [r2, #0]
1a0016e6:	811a      	strh	r2, [r3, #8]
	strcpy(menu[1], "Reset/Act");
1a0016e8:	4a14      	ldr	r2, [pc, #80]	; (1a00173c <menuSensInit+0x64>)
1a0016ea:	ca03      	ldmia	r2!, {r0, r1}
1a0016ec:	6158      	str	r0, [r3, #20]
1a0016ee:	6199      	str	r1, [r3, #24]
1a0016f0:	8812      	ldrh	r2, [r2, #0]
1a0016f2:	839a      	strh	r2, [r3, #28]
	strcpy(menu[2], "Alta");
1a0016f4:	4a12      	ldr	r2, [pc, #72]	; (1a001740 <menuSensInit+0x68>)
1a0016f6:	6810      	ldr	r0, [r2, #0]
1a0016f8:	6298      	str	r0, [r3, #40]	; 0x28
1a0016fa:	7912      	ldrb	r2, [r2, #4]
1a0016fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	strcpy(menu[3], "Recambio");
1a001700:	4a10      	ldr	r2, [pc, #64]	; (1a001744 <menuSensInit+0x6c>)
1a001702:	ca03      	ldmia	r2!, {r0, r1}
1a001704:	63d8      	str	r0, [r3, #60]	; 0x3c
1a001706:	6419      	str	r1, [r3, #64]	; 0x40
1a001708:	7812      	ldrb	r2, [r2, #0]
1a00170a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	strcpy(menu[4], "Visualizar");
1a00170e:	f103 0450 	add.w	r4, r3, #80	; 0x50
1a001712:	4a0d      	ldr	r2, [pc, #52]	; (1a001748 <menuSensInit+0x70>)
1a001714:	ca03      	ldmia	r2!, {r0, r1}
1a001716:	6518      	str	r0, [r3, #80]	; 0x50
1a001718:	6559      	str	r1, [r3, #84]	; 0x54
1a00171a:	8811      	ldrh	r1, [r2, #0]
1a00171c:	7893      	ldrb	r3, [r2, #2]
1a00171e:	8121      	strh	r1, [r4, #8]
1a001720:	72a3      	strb	r3, [r4, #10]
	windowStart = 0;
1a001722:	4b0a      	ldr	r3, [pc, #40]	; (1a00174c <menuSensInit+0x74>)
1a001724:	2200      	movs	r2, #0
1a001726:	601a      	str	r2, [r3, #0]
	itemSelected = 1;
1a001728:	4b09      	ldr	r3, [pc, #36]	; (1a001750 <menuSensInit+0x78>)
1a00172a:	2201      	movs	r2, #1
1a00172c:	601a      	str	r2, [r3, #0]
}
1a00172e:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001732:	4770      	bx	lr
1a001734:	10004c34 	.word	0x10004c34
1a001738:	1a008388 	.word	0x1a008388
1a00173c:	1a008394 	.word	0x1a008394
1a001740:	1a0083a0 	.word	0x1a0083a0
1a001744:	1a0083a8 	.word	0x1a0083a8
1a001748:	1a0081cc 	.word	0x1a0081cc
1a00174c:	10004cc0 	.word	0x10004cc0
1a001750:	10004cc4 	.word	0x10004cc4

1a001754 <menuROMInit>:
{
1a001754:	b430      	push	{r4, r5}
	strcpy(menu[0], "ROM:");
1a001756:	4b18      	ldr	r3, [pc, #96]	; (1a0017b8 <menuROMInit+0x64>)
1a001758:	4a18      	ldr	r2, [pc, #96]	; (1a0017bc <menuROMInit+0x68>)
1a00175a:	6810      	ldr	r0, [r2, #0]
1a00175c:	6018      	str	r0, [r3, #0]
1a00175e:	7912      	ldrb	r2, [r2, #4]
1a001760:	711a      	strb	r2, [r3, #4]
	strcpy(menu[1], "Consistencia");
1a001762:	4c17      	ldr	r4, [pc, #92]	; (1a0017c0 <menuROMInit+0x6c>)
1a001764:	cc07      	ldmia	r4!, {r0, r1, r2}
1a001766:	6158      	str	r0, [r3, #20]
1a001768:	6199      	str	r1, [r3, #24]
1a00176a:	61da      	str	r2, [r3, #28]
1a00176c:	7822      	ldrb	r2, [r4, #0]
1a00176e:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(menu[2], "Copiar");
1a001772:	4a14      	ldr	r2, [pc, #80]	; (1a0017c4 <menuROMInit+0x70>)
1a001774:	6810      	ldr	r0, [r2, #0]
1a001776:	6298      	str	r0, [r3, #40]	; 0x28
1a001778:	8890      	ldrh	r0, [r2, #4]
1a00177a:	7992      	ldrb	r2, [r2, #6]
1a00177c:	8598      	strh	r0, [r3, #44]	; 0x2c
1a00177e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	strcpy(menu[3], "Dump (USB)");
1a001782:	4a11      	ldr	r2, [pc, #68]	; (1a0017c8 <menuROMInit+0x74>)
1a001784:	ca03      	ldmia	r2!, {r0, r1}
1a001786:	63d8      	str	r0, [r3, #60]	; 0x3c
1a001788:	6419      	str	r1, [r3, #64]	; 0x40
1a00178a:	8811      	ldrh	r1, [r2, #0]
1a00178c:	7892      	ldrb	r2, [r2, #2]
1a00178e:	f8a3 1044 	strh.w	r1, [r3, #68]	; 0x44
1a001792:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	strcpy(menu[4], " ");
1a001796:	4a0d      	ldr	r2, [pc, #52]	; (1a0017cc <menuROMInit+0x78>)
1a001798:	8812      	ldrh	r2, [r2, #0]
1a00179a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	strcpy(menu[5], " ");
1a00179e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	strcpy(menu[6], " ");
1a0017a2:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	windowStart = 0;
1a0017a6:	4b0a      	ldr	r3, [pc, #40]	; (1a0017d0 <menuROMInit+0x7c>)
1a0017a8:	2200      	movs	r2, #0
1a0017aa:	601a      	str	r2, [r3, #0]
	itemSelected = 1;
1a0017ac:	4b09      	ldr	r3, [pc, #36]	; (1a0017d4 <menuROMInit+0x80>)
1a0017ae:	2201      	movs	r2, #1
1a0017b0:	601a      	str	r2, [r3, #0]
}
1a0017b2:	bc30      	pop	{r4, r5}
1a0017b4:	4770      	bx	lr
1a0017b6:	bf00      	nop
1a0017b8:	10004c34 	.word	0x10004c34
1a0017bc:	1a00831c 	.word	0x1a00831c
1a0017c0:	1a008324 	.word	0x1a008324
1a0017c4:	1a008334 	.word	0x1a008334
1a0017c8:	1a00833c 	.word	0x1a00833c
1a0017cc:	1a007fe0 	.word	0x1a007fe0
1a0017d0:	10004cc0 	.word	0x10004cc0
1a0017d4:	10004cc4 	.word	0x10004cc4

1a0017d8 <menuLoopInit>:
{
1a0017d8:	b470      	push	{r4, r5, r6}
	strcpy(menu[0], "MANTENIMIENTO:");
1a0017da:	4c1a      	ldr	r4, [pc, #104]	; (1a001844 <menuLoopInit+0x6c>)
1a0017dc:	4b1a      	ldr	r3, [pc, #104]	; (1a001848 <menuLoopInit+0x70>)
1a0017de:	cb07      	ldmia	r3!, {r0, r1, r2}
1a0017e0:	6020      	str	r0, [r4, #0]
1a0017e2:	6061      	str	r1, [r4, #4]
1a0017e4:	60a2      	str	r2, [r4, #8]
1a0017e6:	881a      	ldrh	r2, [r3, #0]
1a0017e8:	789b      	ldrb	r3, [r3, #2]
1a0017ea:	81a2      	strh	r2, [r4, #12]
1a0017ec:	73a3      	strb	r3, [r4, #14]
	strcpy(menu[1], "Ver estados");
1a0017ee:	4b17      	ldr	r3, [pc, #92]	; (1a00184c <menuLoopInit+0x74>)
1a0017f0:	cb07      	ldmia	r3!, {r0, r1, r2}
1a0017f2:	6160      	str	r0, [r4, #20]
1a0017f4:	61a1      	str	r1, [r4, #24]
1a0017f6:	61e2      	str	r2, [r4, #28]
	strcpy(menu[2], "Check matriz");
1a0017f8:	4b15      	ldr	r3, [pc, #84]	; (1a001850 <menuLoopInit+0x78>)
1a0017fa:	cb07      	ldmia	r3!, {r0, r1, r2}
1a0017fc:	62a0      	str	r0, [r4, #40]	; 0x28
1a0017fe:	62e1      	str	r1, [r4, #44]	; 0x2c
1a001800:	6322      	str	r2, [r4, #48]	; 0x30
1a001802:	781b      	ldrb	r3, [r3, #0]
1a001804:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	strcpy(menu[3], "Check buzzer ");
1a001808:	4b12      	ldr	r3, [pc, #72]	; (1a001854 <menuLoopInit+0x7c>)
1a00180a:	cb07      	ldmia	r3!, {r0, r1, r2}
1a00180c:	63e0      	str	r0, [r4, #60]	; 0x3c
1a00180e:	6421      	str	r1, [r4, #64]	; 0x40
1a001810:	6462      	str	r2, [r4, #68]	; 0x44
1a001812:	881b      	ldrh	r3, [r3, #0]
1a001814:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	strcpy(menu[4], "Check LED de estado");
1a001818:	4d0f      	ldr	r5, [pc, #60]	; (1a001858 <menuLoopInit+0x80>)
1a00181a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00181c:	6520      	str	r0, [r4, #80]	; 0x50
1a00181e:	6561      	str	r1, [r4, #84]	; 0x54
1a001820:	65a2      	str	r2, [r4, #88]	; 0x58
1a001822:	65e3      	str	r3, [r4, #92]	; 0x5c
1a001824:	6828      	ldr	r0, [r5, #0]
1a001826:	6620      	str	r0, [r4, #96]	; 0x60
	strcpy(menu[5], " ");
1a001828:	4b0c      	ldr	r3, [pc, #48]	; (1a00185c <menuLoopInit+0x84>)
1a00182a:	881b      	ldrh	r3, [r3, #0]
1a00182c:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
	strcpy(menu[6], " ");
1a001830:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
	windowStart = 0;
1a001834:	4b0a      	ldr	r3, [pc, #40]	; (1a001860 <menuLoopInit+0x88>)
1a001836:	2200      	movs	r2, #0
1a001838:	601a      	str	r2, [r3, #0]
	itemSelected = 1;
1a00183a:	4b0a      	ldr	r3, [pc, #40]	; (1a001864 <menuLoopInit+0x8c>)
1a00183c:	2201      	movs	r2, #1
1a00183e:	601a      	str	r2, [r3, #0]
}
1a001840:	bc70      	pop	{r4, r5, r6}
1a001842:	4770      	bx	lr
1a001844:	10004c34 	.word	0x10004c34
1a001848:	1a008280 	.word	0x1a008280
1a00184c:	1a008290 	.word	0x1a008290
1a001850:	1a00829c 	.word	0x1a00829c
1a001854:	1a0082ac 	.word	0x1a0082ac
1a001858:	1a0082bc 	.word	0x1a0082bc
1a00185c:	1a007fe0 	.word	0x1a007fe0
1a001860:	10004cc0 	.word	0x10004cc0
1a001864:	10004cc4 	.word	0x10004cc4

1a001868 <menuUpdate>:
{
1a001868:	b508      	push	{r3, lr}
	switch(button)
1a00186a:	2803      	cmp	r0, #3
1a00186c:	d806      	bhi.n	1a00187c <menuUpdate+0x14>
1a00186e:	e8df f000 	tbb	[pc, r0]
1a001872:	0602      	.short	0x0602
1a001874:	2e17      	.short	0x2e17
			systemMode = NORMAL;
1a001876:	4b26      	ldr	r3, [pc, #152]	; (1a001910 <menuUpdate+0xa8>)
1a001878:	2201      	movs	r2, #1
1a00187a:	701a      	strb	r2, [r3, #0]
}
1a00187c:	bd08      	pop	{r3, pc}
			itemSelected --;
1a00187e:	4a25      	ldr	r2, [pc, #148]	; (1a001914 <menuUpdate+0xac>)
1a001880:	6813      	ldr	r3, [r2, #0]
1a001882:	3b01      	subs	r3, #1
1a001884:	6013      	str	r3, [r2, #0]
			if (itemSelected < windowStart)
1a001886:	4a24      	ldr	r2, [pc, #144]	; (1a001918 <menuUpdate+0xb0>)
1a001888:	6812      	ldr	r2, [r2, #0]
1a00188a:	4293      	cmp	r3, r2
1a00188c:	da02      	bge.n	1a001894 <menuUpdate+0x2c>
				windowStart --;
1a00188e:	3a01      	subs	r2, #1
1a001890:	4921      	ldr	r1, [pc, #132]	; (1a001918 <menuUpdate+0xb0>)
1a001892:	600a      	str	r2, [r1, #0]
			if (itemSelected == 0)
1a001894:	2b00      	cmp	r3, #0
1a001896:	d1f1      	bne.n	1a00187c <menuUpdate+0x14>
				itemSelected = 1;
1a001898:	4b1e      	ldr	r3, [pc, #120]	; (1a001914 <menuUpdate+0xac>)
1a00189a:	2201      	movs	r2, #1
1a00189c:	601a      	str	r2, [r3, #0]
1a00189e:	e7ed      	b.n	1a00187c <menuUpdate+0x14>
			itemSelected ++;
1a0018a0:	4a1c      	ldr	r2, [pc, #112]	; (1a001914 <menuUpdate+0xac>)
1a0018a2:	6813      	ldr	r3, [r2, #0]
1a0018a4:	3301      	adds	r3, #1
1a0018a6:	6013      	str	r3, [r2, #0]
			if (itemSelected >= windowStart + WINDOW_HEIGHT)
1a0018a8:	4a1b      	ldr	r2, [pc, #108]	; (1a001918 <menuUpdate+0xb0>)
1a0018aa:	6812      	ldr	r2, [r2, #0]
1a0018ac:	1cd1      	adds	r1, r2, #3
1a0018ae:	428b      	cmp	r3, r1
1a0018b0:	dd02      	ble.n	1a0018b8 <menuUpdate+0x50>
				windowStart ++;
1a0018b2:	3201      	adds	r2, #1
1a0018b4:	4b18      	ldr	r3, [pc, #96]	; (1a001918 <menuUpdate+0xb0>)
1a0018b6:	601a      	str	r2, [r3, #0]
			if(windowStart > 1)
1a0018b8:	4b17      	ldr	r3, [pc, #92]	; (1a001918 <menuUpdate+0xb0>)
1a0018ba:	681b      	ldr	r3, [r3, #0]
1a0018bc:	2b01      	cmp	r3, #1
1a0018be:	dddd      	ble.n	1a00187c <menuUpdate+0x14>
				windowStart = 1;
1a0018c0:	4b15      	ldr	r3, [pc, #84]	; (1a001918 <menuUpdate+0xb0>)
1a0018c2:	2201      	movs	r2, #1
1a0018c4:	601a      	str	r2, [r3, #0]
				itemSelected = 4;
1a0018c6:	4b13      	ldr	r3, [pc, #76]	; (1a001914 <menuUpdate+0xac>)
1a0018c8:	2204      	movs	r2, #4
1a0018ca:	601a      	str	r2, [r3, #0]
1a0018cc:	e7d6      	b.n	1a00187c <menuUpdate+0x14>
			switch(itemSelected)
1a0018ce:	4b11      	ldr	r3, [pc, #68]	; (1a001914 <menuUpdate+0xac>)
1a0018d0:	681b      	ldr	r3, [r3, #0]
1a0018d2:	3b01      	subs	r3, #1
1a0018d4:	2b03      	cmp	r3, #3
1a0018d6:	d8d1      	bhi.n	1a00187c <menuUpdate+0x14>
1a0018d8:	e8df f003 	tbb	[pc, r3]
1a0018dc:	140e0802 	.word	0x140e0802
					menuAlarmInit();
1a0018e0:	f7ff fec2 	bl	1a001668 <menuAlarmInit>
					systemMode = ALARM_INIT;
1a0018e4:	4b0a      	ldr	r3, [pc, #40]	; (1a001910 <menuUpdate+0xa8>)
1a0018e6:	221e      	movs	r2, #30
1a0018e8:	701a      	strb	r2, [r3, #0]
					break;
1a0018ea:	e7c7      	b.n	1a00187c <menuUpdate+0x14>
					menuSensInit();
1a0018ec:	f7ff fef4 	bl	1a0016d8 <menuSensInit>
					systemMode = SENS_INIT;
1a0018f0:	4b07      	ldr	r3, [pc, #28]	; (1a001910 <menuUpdate+0xa8>)
1a0018f2:	2228      	movs	r2, #40	; 0x28
1a0018f4:	701a      	strb	r2, [r3, #0]
					break;
1a0018f6:	e7c1      	b.n	1a00187c <menuUpdate+0x14>
					menuROMInit();
1a0018f8:	f7ff ff2c 	bl	1a001754 <menuROMInit>
					systemMode = ROM_INIT;
1a0018fc:	4b04      	ldr	r3, [pc, #16]	; (1a001910 <menuUpdate+0xa8>)
1a0018fe:	223c      	movs	r2, #60	; 0x3c
1a001900:	701a      	strb	r2, [r3, #0]
					break;
1a001902:	e7bb      	b.n	1a00187c <menuUpdate+0x14>
					menuLoopInit();
1a001904:	f7ff ff68 	bl	1a0017d8 <menuLoopInit>
					systemMode = LOOP;
1a001908:	4b01      	ldr	r3, [pc, #4]	; (1a001910 <menuUpdate+0xa8>)
1a00190a:	2250      	movs	r2, #80	; 0x50
1a00190c:	701a      	strb	r2, [r3, #0]
}
1a00190e:	e7b5      	b.n	1a00187c <menuUpdate+0x14>
1a001910:	100000c8 	.word	0x100000c8
1a001914:	10004cc4 	.word	0x10004cc4
1a001918:	10004cc0 	.word	0x10004cc0

1a00191c <menuEjeInit>:
{
1a00191c:	b410      	push	{r4}
	strcpy(menu[0], "Par montado?");
1a00191e:	4b13      	ldr	r3, [pc, #76]	; (1a00196c <menuEjeInit+0x50>)
1a001920:	4c13      	ldr	r4, [pc, #76]	; (1a001970 <menuEjeInit+0x54>)
1a001922:	cc07      	ldmia	r4!, {r0, r1, r2}
1a001924:	6018      	str	r0, [r3, #0]
1a001926:	6059      	str	r1, [r3, #4]
1a001928:	609a      	str	r2, [r3, #8]
1a00192a:	7822      	ldrb	r2, [r4, #0]
1a00192c:	731a      	strb	r2, [r3, #12]
	strcpy(menu[1], "1");
1a00192e:	4a11      	ldr	r2, [pc, #68]	; (1a001974 <menuEjeInit+0x58>)
1a001930:	8812      	ldrh	r2, [r2, #0]
1a001932:	829a      	strh	r2, [r3, #20]
	strcpy(menu[2], "2");
1a001934:	4a10      	ldr	r2, [pc, #64]	; (1a001978 <menuEjeInit+0x5c>)
1a001936:	8812      	ldrh	r2, [r2, #0]
1a001938:	851a      	strh	r2, [r3, #40]	; 0x28
	strcpy(menu[3], "3");
1a00193a:	4a10      	ldr	r2, [pc, #64]	; (1a00197c <menuEjeInit+0x60>)
1a00193c:	8812      	ldrh	r2, [r2, #0]
1a00193e:	879a      	strh	r2, [r3, #60]	; 0x3c
	strcpy(menu[4], "4");
1a001940:	4a0f      	ldr	r2, [pc, #60]	; (1a001980 <menuEjeInit+0x64>)
1a001942:	8812      	ldrh	r2, [r2, #0]
1a001944:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	strcpy(menu[5], "5");
1a001948:	4a0e      	ldr	r2, [pc, #56]	; (1a001984 <menuEjeInit+0x68>)
1a00194a:	8812      	ldrh	r2, [r2, #0]
1a00194c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	strcpy(menu[6], "6");
1a001950:	4a0d      	ldr	r2, [pc, #52]	; (1a001988 <menuEjeInit+0x6c>)
1a001952:	8812      	ldrh	r2, [r2, #0]
1a001954:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	windowStart = 0;
1a001958:	4b0c      	ldr	r3, [pc, #48]	; (1a00198c <menuEjeInit+0x70>)
1a00195a:	2200      	movs	r2, #0
1a00195c:	601a      	str	r2, [r3, #0]
	itemSelected = 1;
1a00195e:	4b0c      	ldr	r3, [pc, #48]	; (1a001990 <menuEjeInit+0x74>)
1a001960:	2201      	movs	r2, #1
1a001962:	601a      	str	r2, [r3, #0]
}
1a001964:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001968:	4770      	bx	lr
1a00196a:	bf00      	nop
1a00196c:	10004c34 	.word	0x10004c34
1a001970:	1a008210 	.word	0x1a008210
1a001974:	1a008220 	.word	0x1a008220
1a001978:	1a008224 	.word	0x1a008224
1a00197c:	1a008228 	.word	0x1a008228
1a001980:	1a00822c 	.word	0x1a00822c
1a001984:	1a008230 	.word	0x1a008230
1a001988:	1a008234 	.word	0x1a008234
1a00198c:	10004cc0 	.word	0x10004cc0
1a001990:	10004cc4 	.word	0x10004cc4

1a001994 <menuPosInit>:
	strcpy(menu[0], "Posicion?");
1a001994:	4b11      	ldr	r3, [pc, #68]	; (1a0019dc <menuPosInit+0x48>)
1a001996:	4a12      	ldr	r2, [pc, #72]	; (1a0019e0 <menuPosInit+0x4c>)
1a001998:	ca03      	ldmia	r2!, {r0, r1}
1a00199a:	6018      	str	r0, [r3, #0]
1a00199c:	6059      	str	r1, [r3, #4]
1a00199e:	8812      	ldrh	r2, [r2, #0]
1a0019a0:	811a      	strh	r2, [r3, #8]
	strcpy(menu[1], "1");
1a0019a2:	4a10      	ldr	r2, [pc, #64]	; (1a0019e4 <menuPosInit+0x50>)
1a0019a4:	8812      	ldrh	r2, [r2, #0]
1a0019a6:	829a      	strh	r2, [r3, #20]
	strcpy(menu[2], "2");
1a0019a8:	4a0f      	ldr	r2, [pc, #60]	; (1a0019e8 <menuPosInit+0x54>)
1a0019aa:	8812      	ldrh	r2, [r2, #0]
1a0019ac:	851a      	strh	r2, [r3, #40]	; 0x28
	strcpy(menu[3], "3");
1a0019ae:	4a0f      	ldr	r2, [pc, #60]	; (1a0019ec <menuPosInit+0x58>)
1a0019b0:	8812      	ldrh	r2, [r2, #0]
1a0019b2:	879a      	strh	r2, [r3, #60]	; 0x3c
	strcpy(menu[4], "4");
1a0019b4:	4a0e      	ldr	r2, [pc, #56]	; (1a0019f0 <menuPosInit+0x5c>)
1a0019b6:	8812      	ldrh	r2, [r2, #0]
1a0019b8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	strcpy(menu[5], "5");
1a0019bc:	4a0d      	ldr	r2, [pc, #52]	; (1a0019f4 <menuPosInit+0x60>)
1a0019be:	8812      	ldrh	r2, [r2, #0]
1a0019c0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	strcpy(menu[6], "6");
1a0019c4:	4a0c      	ldr	r2, [pc, #48]	; (1a0019f8 <menuPosInit+0x64>)
1a0019c6:	8812      	ldrh	r2, [r2, #0]
1a0019c8:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	windowStart = 0;
1a0019cc:	4b0b      	ldr	r3, [pc, #44]	; (1a0019fc <menuPosInit+0x68>)
1a0019ce:	2200      	movs	r2, #0
1a0019d0:	601a      	str	r2, [r3, #0]
	itemSelected = 1;
1a0019d2:	4b0b      	ldr	r3, [pc, #44]	; (1a001a00 <menuPosInit+0x6c>)
1a0019d4:	2201      	movs	r2, #1
1a0019d6:	601a      	str	r2, [r3, #0]
}
1a0019d8:	4770      	bx	lr
1a0019da:	bf00      	nop
1a0019dc:	10004c34 	.word	0x10004c34
1a0019e0:	1a0082d0 	.word	0x1a0082d0
1a0019e4:	1a008220 	.word	0x1a008220
1a0019e8:	1a008224 	.word	0x1a008224
1a0019ec:	1a008228 	.word	0x1a008228
1a0019f0:	1a00822c 	.word	0x1a00822c
1a0019f4:	1a008230 	.word	0x1a008230
1a0019f8:	1a008234 	.word	0x1a008234
1a0019fc:	10004cc0 	.word	0x10004cc0
1a001a00:	10004cc4 	.word	0x10004cc4

1a001a04 <menuConfInit>:
{
1a001a04:	b538      	push	{r3, r4, r5, lr}
1a001a06:	4605      	mov	r5, r0
1a001a08:	460c      	mov	r4, r1
	lcdClear();
1a001a0a:	f005 f8ed 	bl	1a006be8 <lcdClear>
	printf("menuConfInit\r\n");
1a001a0e:	4815      	ldr	r0, [pc, #84]	; (1a001a64 <menuConfInit+0x60>)
1a001a10:	f006 f8ba 	bl	1a007b88 <puts>
	lcdGoToXY( 0,0 );
1a001a14:	2100      	movs	r1, #0
1a001a16:	4608      	mov	r0, r1
1a001a18:	f005 f8be 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( "Par montado: " );
1a001a1c:	4812      	ldr	r0, [pc, #72]	; (1a001a68 <menuConfInit+0x64>)
1a001a1e:	f005 f8f6 	bl	1a006c0e <lcdSendStringRaw>
	lcdData(aux_eje + 48);
1a001a22:	f105 0030 	add.w	r0, r5, #48	; 0x30
1a001a26:	b2c0      	uxtb	r0, r0
1a001a28:	f005 f824 	bl	1a006a74 <lcdData>
	lcdGoToXY( 0,1 );
1a001a2c:	2101      	movs	r1, #1
1a001a2e:	2000      	movs	r0, #0
1a001a30:	f005 f8b2 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( "Posicion: " );
1a001a34:	480d      	ldr	r0, [pc, #52]	; (1a001a6c <menuConfInit+0x68>)
1a001a36:	f005 f8ea 	bl	1a006c0e <lcdSendStringRaw>
	lcdData(aux_pos + 48);
1a001a3a:	f104 0030 	add.w	r0, r4, #48	; 0x30
1a001a3e:	b2c0      	uxtb	r0, r0
1a001a40:	f005 f818 	bl	1a006a74 <lcdData>
	lcdGoToXY( 5,2 );
1a001a44:	2102      	movs	r1, #2
1a001a46:	2005      	movs	r0, #5
1a001a48:	f005 f8a6 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( "Confirma? " );
1a001a4c:	4808      	ldr	r0, [pc, #32]	; (1a001a70 <menuConfInit+0x6c>)
1a001a4e:	f005 f8de 	bl	1a006c0e <lcdSendStringRaw>
	lcdGoToXY( 0,3 );
1a001a52:	2103      	movs	r1, #3
1a001a54:	2000      	movs	r0, #0
1a001a56:	f005 f89f 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( "NO                SI" );
1a001a5a:	4806      	ldr	r0, [pc, #24]	; (1a001a74 <menuConfInit+0x70>)
1a001a5c:	f005 f8d7 	bl	1a006c0e <lcdSendStringRaw>
}
1a001a60:	bd38      	pop	{r3, r4, r5, pc}
1a001a62:	bf00      	nop
1a001a64:	1a0081d8 	.word	0x1a0081d8
1a001a68:	1a0081e8 	.word	0x1a0081e8
1a001a6c:	1a0081f8 	.word	0x1a0081f8
1a001a70:	1a008204 	.word	0x1a008204
1a001a74:	1a0080b8 	.word	0x1a0080b8

1a001a78 <menuROMcopyInit>:
{
1a001a78:	b410      	push	{r4}
	strcpy(menu[0], "Copiar ROM: ");
1a001a7a:	4b13      	ldr	r3, [pc, #76]	; (1a001ac8 <menuROMcopyInit+0x50>)
1a001a7c:	4c13      	ldr	r4, [pc, #76]	; (1a001acc <menuROMcopyInit+0x54>)
1a001a7e:	cc07      	ldmia	r4!, {r0, r1, r2}
1a001a80:	6018      	str	r0, [r3, #0]
1a001a82:	6059      	str	r1, [r3, #4]
1a001a84:	609a      	str	r2, [r3, #8]
1a001a86:	7822      	ldrb	r2, [r4, #0]
1a001a88:	731a      	strb	r2, [r3, #12]
	strcpy(menu[1], "Loc a Rem");
1a001a8a:	4a11      	ldr	r2, [pc, #68]	; (1a001ad0 <menuROMcopyInit+0x58>)
1a001a8c:	ca03      	ldmia	r2!, {r0, r1}
1a001a8e:	6158      	str	r0, [r3, #20]
1a001a90:	6199      	str	r1, [r3, #24]
1a001a92:	8812      	ldrh	r2, [r2, #0]
1a001a94:	839a      	strh	r2, [r3, #28]
	strcpy(menu[2], "Rem a Loc");
1a001a96:	4a0f      	ldr	r2, [pc, #60]	; (1a001ad4 <menuROMcopyInit+0x5c>)
1a001a98:	ca03      	ldmia	r2!, {r0, r1}
1a001a9a:	6298      	str	r0, [r3, #40]	; 0x28
1a001a9c:	62d9      	str	r1, [r3, #44]	; 0x2c
1a001a9e:	8812      	ldrh	r2, [r2, #0]
1a001aa0:	861a      	strh	r2, [r3, #48]	; 0x30
	strcpy(menu[3], " ");
1a001aa2:	4a0d      	ldr	r2, [pc, #52]	; (1a001ad8 <menuROMcopyInit+0x60>)
1a001aa4:	8812      	ldrh	r2, [r2, #0]
1a001aa6:	879a      	strh	r2, [r3, #60]	; 0x3c
	strcpy(menu[4], " ");
1a001aa8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	strcpy(menu[5], " ");
1a001aac:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	strcpy(menu[6], " ");
1a001ab0:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	windowStart = 0;
1a001ab4:	4b09      	ldr	r3, [pc, #36]	; (1a001adc <menuROMcopyInit+0x64>)
1a001ab6:	2200      	movs	r2, #0
1a001ab8:	601a      	str	r2, [r3, #0]
	itemSelected = 1;
1a001aba:	4b09      	ldr	r3, [pc, #36]	; (1a001ae0 <menuROMcopyInit+0x68>)
1a001abc:	2201      	movs	r2, #1
1a001abe:	601a      	str	r2, [r3, #0]
}
1a001ac0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001ac4:	4770      	bx	lr
1a001ac6:	bf00      	nop
1a001ac8:	10004c34 	.word	0x10004c34
1a001acc:	1a008348 	.word	0x1a008348
1a001ad0:	1a008358 	.word	0x1a008358
1a001ad4:	1a008364 	.word	0x1a008364
1a001ad8:	1a007fe0 	.word	0x1a007fe0
1a001adc:	10004cc0 	.word	0x10004cc0
1a001ae0:	10004cc4 	.word	0x10004cc4

1a001ae4 <semaphoreInit>:
{
1a001ae4:	b508      	push	{r3, lr}
	gpioInit(SEM_RED, GPIO_OUTPUT);
1a001ae6:	2101      	movs	r1, #1
1a001ae8:	201b      	movs	r0, #27
1a001aea:	f004 fdad 	bl	1a006648 <gpioInit>
	gpioInit(SEM_GREEN, GPIO_OUTPUT);
1a001aee:	2101      	movs	r1, #1
1a001af0:	201c      	movs	r0, #28
1a001af2:	f004 fda9 	bl	1a006648 <gpioInit>
}
1a001af6:	bd08      	pop	{r3, pc}

1a001af8 <readROM>:
{
1a001af8:	b530      	push	{r4, r5, lr}
1a001afa:	b087      	sub	sp, #28
	printf("leido EEPROM:\r\n");
1a001afc:	4810      	ldr	r0, [pc, #64]	; (1a001b40 <readROM+0x48>)
1a001afe:	f006 f843 	bl	1a007b88 <puts>
	for(int i=0; i<N+1; i++ )
1a001b02:	2500      	movs	r5, #0
1a001b04:	e012      	b.n	1a001b2c <readROM+0x34>
			printf("%X - ",buffer.ROM_NO[j]);
1a001b06:	ab06      	add	r3, sp, #24
1a001b08:	4423      	add	r3, r4
1a001b0a:	f813 1c14 	ldrb.w	r1, [r3, #-20]
1a001b0e:	480d      	ldr	r0, [pc, #52]	; (1a001b44 <readROM+0x4c>)
1a001b10:	f005 ffa0 	bl	1a007a54 <iprintf>
		for(int j=0; j<8; j++ )
1a001b14:	3401      	adds	r4, #1
1a001b16:	2c07      	cmp	r4, #7
1a001b18:	ddf5      	ble.n	1a001b06 <readROM+0xe>
		printf("\r\n");
1a001b1a:	480b      	ldr	r0, [pc, #44]	; (1a001b48 <readROM+0x50>)
1a001b1c:	f006 f834 	bl	1a007b88 <puts>
		delay(1000);
1a001b20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a001b24:	2100      	movs	r1, #0
1a001b26:	f004 ff43 	bl	1a0069b0 <delay>
	for(int i=0; i<N+1; i++ )
1a001b2a:	3501      	adds	r5, #1
1a001b2c:	2d18      	cmp	r5, #24
1a001b2e:	dc05      	bgt.n	1a001b3c <readROM+0x44>
		Board_EEPROM_loadSensor(i, &buffer);
1a001b30:	a901      	add	r1, sp, #4
1a001b32:	4628      	mov	r0, r5
1a001b34:	f7fe fc64 	bl	1a000400 <Board_EEPROM_loadSensor>
		for(int j=0; j<8; j++ )
1a001b38:	2400      	movs	r4, #0
1a001b3a:	e7ec      	b.n	1a001b16 <readROM+0x1e>
}
1a001b3c:	b007      	add	sp, #28
1a001b3e:	bd30      	pop	{r4, r5, pc}
1a001b40:	1a0083b4 	.word	0x1a0083b4
1a001b44:	1a0083c4 	.word	0x1a0083c4
1a001b48:	1a0083fc 	.word	0x1a0083fc

1a001b4c <copyROM>:
{
1a001b4c:	b530      	push	{r4, r5, lr}
1a001b4e:	b08b      	sub	sp, #44	; 0x2c
	ROM_active = 0;
1a001b50:	4b3c      	ldr	r3, [pc, #240]	; (1a001c44 <copyROM+0xf8>)
1a001b52:	2200      	movs	r2, #0
1a001b54:	601a      	str	r2, [r3, #0]
	systemMode = ROM_COPY_2;
1a001b56:	4b3c      	ldr	r3, [pc, #240]	; (1a001c48 <copyROM+0xfc>)
1a001b58:	224a      	movs	r2, #74	; 0x4a
1a001b5a:	701a      	strb	r2, [r3, #0]
	if(source == 1)
1a001b5c:	2801      	cmp	r0, #1
1a001b5e:	d003      	beq.n	1a001b68 <copyROM+0x1c>
	else if(source == 2)
1a001b60:	2802      	cmp	r0, #2
1a001b62:	d013      	beq.n	1a001b8c <copyROM+0x40>
}
1a001b64:	b00b      	add	sp, #44	; 0x2c
1a001b66:	bd30      	pop	{r4, r5, pc}
		printf("copiar ROM local en remota\r\n");
1a001b68:	4838      	ldr	r0, [pc, #224]	; (1a001c4c <copyROM+0x100>)
1a001b6a:	f006 f80d 	bl	1a007b88 <puts>
		msgToRem.msgType = COMMAND;
1a001b6e:	23ff      	movs	r3, #255	; 0xff
1a001b70:	f88d 3008 	strb.w	r3, [sp, #8]
		msgToRem.order = PULL_CFG;
1a001b74:	23ed      	movs	r3, #237	; 0xed
1a001b76:	f88d 3009 	strb.w	r3, [sp, #9]
		xQueueSend(intercommQueue, &msgToRem, 1000);
1a001b7a:	2300      	movs	r3, #0
1a001b7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a001b80:	a902      	add	r1, sp, #8
1a001b82:	4833      	ldr	r0, [pc, #204]	; (1a001c50 <copyROM+0x104>)
1a001b84:	6800      	ldr	r0, [r0, #0]
1a001b86:	f002 f8f3 	bl	1a003d70 <xQueueGenericSend>
1a001b8a:	e7eb      	b.n	1a001b64 <copyROM+0x18>
		if (getStatus(BIT_ROM_CONS_CHK) == FALSE)
1a001b8c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
1a001b90:	f001 fc3e 	bl	1a003410 <getStatus>
1a001b94:	b130      	cbz	r0, 1a001ba4 <copyROM+0x58>
		if (getStatus(BIT_ROM_CONSIST))
1a001b96:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
1a001b9a:	f001 fc39 	bl	1a003410 <getStatus>
1a001b9e:	b938      	cbnz	r0, 1a001bb0 <copyROM+0x64>
		for(int i=0; i<N; i++)
1a001ba0:	2400      	movs	r4, #0
1a001ba2:	e03e      	b.n	1a001c22 <copyROM+0xd6>
			printf("consistency check not run\r\n");
1a001ba4:	482b      	ldr	r0, [pc, #172]	; (1a001c54 <copyROM+0x108>)
1a001ba6:	f005 ffef 	bl	1a007b88 <puts>
			SMTB_ROM_constCheckNotRun();
1a001baa:	f001 faad 	bl	1a003108 <SMTB_ROM_constCheckNotRun>
			return;
1a001bae:	e7d9      	b.n	1a001b64 <copyROM+0x18>
			printf("ROMs are consistent\r\n");
1a001bb0:	4829      	ldr	r0, [pc, #164]	; (1a001c58 <copyROM+0x10c>)
1a001bb2:	f005 ffe9 	bl	1a007b88 <puts>
			SMTB_ROM_constOk();
1a001bb6:	f001 fab3 	bl	1a003120 <SMTB_ROM_constOk>
			return;
1a001bba:	e7d3      	b.n	1a001b64 <copyROM+0x18>
				aux.ROM_NO[j] = rem_ROM[i][j];
1a001bbc:	4a27      	ldr	r2, [pc, #156]	; (1a001c5c <copyROM+0x110>)
1a001bbe:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
1a001bc2:	5cd1      	ldrb	r1, [r2, r3]
1a001bc4:	aa0a      	add	r2, sp, #40	; 0x28
1a001bc6:	441a      	add	r2, r3
1a001bc8:	f802 1c14 	strb.w	r1, [r2, #-20]
			for(int j=0; j<8;j++)
1a001bcc:	3301      	adds	r3, #1
1a001bce:	2b07      	cmp	r3, #7
1a001bd0:	ddf4      	ble.n	1a001bbc <copyROM+0x70>
			Board_EEPROM_recSensor(i, aux);
1a001bd2:	ab0a      	add	r3, sp, #40	; 0x28
1a001bd4:	e913 0003 	ldmdb	r3, {r0, r1}
1a001bd8:	e88d 0003 	stmia.w	sp, {r0, r1}
1a001bdc:	ad05      	add	r5, sp, #20
1a001bde:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
1a001be2:	4620      	mov	r0, r4
1a001be4:	f7fe fb8c 	bl	1a000300 <Board_EEPROM_recSensor>
			Board_EEPROM_loadSensor(i, &aux);
1a001be8:	4629      	mov	r1, r5
1a001bea:	4620      	mov	r0, r4
1a001bec:	f7fe fc08 	bl	1a000400 <Board_EEPROM_loadSensor>
			for(int j=0; j<8;j++)
1a001bf0:	2300      	movs	r3, #0
			equal_flag = 1;
1a001bf2:	2001      	movs	r0, #1
			for(int j=0; j<8;j++)
1a001bf4:	e000      	b.n	1a001bf8 <copyROM+0xac>
1a001bf6:	3301      	adds	r3, #1
1a001bf8:	2b07      	cmp	r3, #7
1a001bfa:	dc0b      	bgt.n	1a001c14 <copyROM+0xc8>
				if(aux.ROM_NO[j] != rem_ROM[i][j])
1a001bfc:	aa0a      	add	r2, sp, #40	; 0x28
1a001bfe:	441a      	add	r2, r3
1a001c00:	f812 1c14 	ldrb.w	r1, [r2, #-20]
1a001c04:	4a15      	ldr	r2, [pc, #84]	; (1a001c5c <copyROM+0x110>)
1a001c06:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
1a001c0a:	5cd2      	ldrb	r2, [r2, r3]
1a001c0c:	4291      	cmp	r1, r2
1a001c0e:	d0f2      	beq.n	1a001bf6 <copyROM+0xaa>
					equal_flag = 0;
1a001c10:	2000      	movs	r0, #0
1a001c12:	e7f0      	b.n	1a001bf6 <copyROM+0xaa>
			if(equal_flag != 1)
1a001c14:	b948      	cbnz	r0, 1a001c2a <copyROM+0xde>
				i--;
1a001c16:	3c01      	subs	r4, #1
			vTaskDelay(500);
1a001c18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a001c1c:	f002 fea4 	bl	1a004968 <vTaskDelay>
		for(int i=0; i<N; i++)
1a001c20:	3401      	adds	r4, #1
1a001c22:	2c17      	cmp	r4, #23
1a001c24:	dc06      	bgt.n	1a001c34 <copyROM+0xe8>
			for(int j=0; j<8;j++)
1a001c26:	2300      	movs	r3, #0
1a001c28:	e7d1      	b.n	1a001bce <copyROM+0x82>
				ROM_active = i;
1a001c2a:	4b06      	ldr	r3, [pc, #24]	; (1a001c44 <copyROM+0xf8>)
1a001c2c:	601c      	str	r4, [r3, #0]
				SMTB_ROM_consist_update();
1a001c2e:	f001 fa1b 	bl	1a003068 <SMTB_ROM_consist_update>
1a001c32:	e7f1      	b.n	1a001c18 <copyROM+0xcc>
		printf("ROM copy done\r\n");
1a001c34:	480a      	ldr	r0, [pc, #40]	; (1a001c60 <copyROM+0x114>)
1a001c36:	f005 ffa7 	bl	1a007b88 <puts>
		systemMode = NORMAL;
1a001c3a:	4b03      	ldr	r3, [pc, #12]	; (1a001c48 <copyROM+0xfc>)
1a001c3c:	2201      	movs	r2, #1
1a001c3e:	701a      	strb	r2, [r3, #0]
1a001c40:	e790      	b.n	1a001b64 <copyROM+0x18>
1a001c42:	bf00      	nop
1a001c44:	10004f80 	.word	0x10004f80
1a001c48:	100000c8 	.word	0x100000c8
1a001c4c:	1a008120 	.word	0x1a008120
1a001c50:	10004d98 	.word	0x10004d98
1a001c54:	1a00813c 	.word	0x1a00813c
1a001c58:	1a008158 	.word	0x1a008158
1a001c5c:	10004cc8 	.word	0x10004cc8
1a001c60:	1a008170 	.word	0x1a008170

1a001c64 <menuROMupdate>:
	switch(button)
1a001c64:	2803      	cmp	r0, #3
1a001c66:	d846      	bhi.n	1a001cf6 <menuROMupdate+0x92>
1a001c68:	e8df f000 	tbb	[pc, r0]
1a001c6c:	1d130241 	.word	0x1d130241
		itemSelected --;
1a001c70:	4a21      	ldr	r2, [pc, #132]	; (1a001cf8 <menuROMupdate+0x94>)
1a001c72:	6813      	ldr	r3, [r2, #0]
1a001c74:	3b01      	subs	r3, #1
1a001c76:	6013      	str	r3, [r2, #0]
		if (itemSelected < windowStart)
1a001c78:	4a20      	ldr	r2, [pc, #128]	; (1a001cfc <menuROMupdate+0x98>)
1a001c7a:	6812      	ldr	r2, [r2, #0]
1a001c7c:	4293      	cmp	r3, r2
1a001c7e:	da02      	bge.n	1a001c86 <menuROMupdate+0x22>
			windowStart --;
1a001c80:	3a01      	subs	r2, #1
1a001c82:	491e      	ldr	r1, [pc, #120]	; (1a001cfc <menuROMupdate+0x98>)
1a001c84:	600a      	str	r2, [r1, #0]
		if (itemSelected == 0)
1a001c86:	2b00      	cmp	r3, #0
1a001c88:	d135      	bne.n	1a001cf6 <menuROMupdate+0x92>
			itemSelected = 1;
1a001c8a:	4b1b      	ldr	r3, [pc, #108]	; (1a001cf8 <menuROMupdate+0x94>)
1a001c8c:	2201      	movs	r2, #1
1a001c8e:	601a      	str	r2, [r3, #0]
1a001c90:	4770      	bx	lr
		itemSelected ++;
1a001c92:	4a19      	ldr	r2, [pc, #100]	; (1a001cf8 <menuROMupdate+0x94>)
1a001c94:	6813      	ldr	r3, [r2, #0]
1a001c96:	3301      	adds	r3, #1
1a001c98:	6013      	str	r3, [r2, #0]
		if (itemSelected > 2)
1a001c9a:	2b02      	cmp	r3, #2
1a001c9c:	dd2b      	ble.n	1a001cf6 <menuROMupdate+0x92>
			itemSelected = 2;
1a001c9e:	4613      	mov	r3, r2
1a001ca0:	2202      	movs	r2, #2
1a001ca2:	601a      	str	r2, [r3, #0]
1a001ca4:	4770      	bx	lr
{
1a001ca6:	b510      	push	{r4, lr}
1a001ca8:	b082      	sub	sp, #8
		aux_ROM = itemSelected;///Almacenar !!!!!!!!!!!!!!!!!!!!!!!!
1a001caa:	4b13      	ldr	r3, [pc, #76]	; (1a001cf8 <menuROMupdate+0x94>)
1a001cac:	681c      	ldr	r4, [r3, #0]
		printf("ROM seleccionada: %d\r\n",aux_ROM); //test
1a001cae:	4621      	mov	r1, r4
1a001cb0:	4813      	ldr	r0, [pc, #76]	; (1a001d00 <menuROMupdate+0x9c>)
1a001cb2:	f005 fecf 	bl	1a007a54 <iprintf>
		if(aux_ROM == 1)
1a001cb6:	2c01      	cmp	r4, #1
1a001cb8:	d011      	beq.n	1a001cde <menuROMupdate+0x7a>
		else if(aux_ROM == 2)
1a001cba:	2c02      	cmp	r4, #2
1a001cbc:	d013      	beq.n	1a001ce6 <menuROMupdate+0x82>
			systemMode = NORMAL;//ToDo: log de error
1a001cbe:	4b11      	ldr	r3, [pc, #68]	; (1a001d04 <menuROMupdate+0xa0>)
1a001cc0:	2201      	movs	r2, #1
1a001cc2:	701a      	strb	r2, [r3, #0]
		xTimerStart(normalTimer,0);
1a001cc4:	4b10      	ldr	r3, [pc, #64]	; (1a001d08 <menuROMupdate+0xa4>)
1a001cc6:	681c      	ldr	r4, [r3, #0]
1a001cc8:	f002 fd3e 	bl	1a004748 <xTaskGetTickCount>
1a001ccc:	2300      	movs	r3, #0
1a001cce:	9300      	str	r3, [sp, #0]
1a001cd0:	4602      	mov	r2, r0
1a001cd2:	2101      	movs	r1, #1
1a001cd4:	4620      	mov	r0, r4
1a001cd6:	f003 f8e5 	bl	1a004ea4 <xTimerGenericCommand>
}
1a001cda:	b002      	add	sp, #8
1a001cdc:	bd10      	pop	{r4, pc}
			copyROM(1);
1a001cde:	2001      	movs	r0, #1
1a001ce0:	f7ff ff34 	bl	1a001b4c <copyROM>
1a001ce4:	e7ee      	b.n	1a001cc4 <menuROMupdate+0x60>
			copyROM(2);
1a001ce6:	2002      	movs	r0, #2
1a001ce8:	f7ff ff30 	bl	1a001b4c <copyROM>
1a001cec:	e7ea      	b.n	1a001cc4 <menuROMupdate+0x60>
		systemMode = NORMAL;
1a001cee:	4b05      	ldr	r3, [pc, #20]	; (1a001d04 <menuROMupdate+0xa0>)
1a001cf0:	2201      	movs	r2, #1
1a001cf2:	701a      	strb	r2, [r3, #0]
}
1a001cf4:	4770      	bx	lr
1a001cf6:	4770      	bx	lr
1a001cf8:	10004cc4 	.word	0x10004cc4
1a001cfc:	10004cc0 	.word	0x10004cc0
1a001d00:	1a008370 	.word	0x1a008370
1a001d04:	100000c8 	.word	0x100000c8
1a001d08:	10004d88 	.word	0x10004d88

1a001d0c <ROMconsist>:
{
1a001d0c:	b538      	push	{r3, r4, r5, lr}
	ROM_active=-1;
1a001d0e:	4b1c      	ldr	r3, [pc, #112]	; (1a001d80 <ROMconsist+0x74>)
1a001d10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001d14:	601a      	str	r2, [r3, #0]
	setStatus(BIT_ROM_CONSIST, TRUE);
1a001d16:	2101      	movs	r1, #1
1a001d18:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
1a001d1c:	f001 fb68 	bl	1a0033f0 <setStatus>
	setStatus(BIT_ROM_CONS_CHK, FALSE);
1a001d20:	2100      	movs	r1, #0
1a001d22:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
1a001d26:	f001 fb63 	bl	1a0033f0 <setStatus>
	for(int k=0;k<N;k++)
1a001d2a:	2400      	movs	r4, #0
1a001d2c:	e002      	b.n	1a001d34 <ROMconsist+0x28>
			SMTB_ROM_consist_update();
1a001d2e:	f001 f99b 	bl	1a003068 <SMTB_ROM_consist_update>
	for(int k=0;k<N;k++)
1a001d32:	3401      	adds	r4, #1
1a001d34:	2c17      	cmp	r4, #23
1a001d36:	dc10      	bgt.n	1a001d5a <ROMconsist+0x4e>
		ROM_request(k);
1a001d38:	b2e0      	uxtb	r0, r4
1a001d3a:	f001 fbcd 	bl	1a0034d8 <ROM_request>
		vTaskDelay(1000);///////////bajar?
1a001d3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a001d42:	f002 fe11 	bl	1a004968 <vTaskDelay>
		printf("ROM activa:%d\r\n",ROM_active);
1a001d46:	4d0e      	ldr	r5, [pc, #56]	; (1a001d80 <ROMconsist+0x74>)
1a001d48:	6829      	ldr	r1, [r5, #0]
1a001d4a:	480e      	ldr	r0, [pc, #56]	; (1a001d84 <ROMconsist+0x78>)
1a001d4c:	f005 fe82 	bl	1a007a54 <iprintf>
		if(ROM_active != k)
1a001d50:	682b      	ldr	r3, [r5, #0]
1a001d52:	42a3      	cmp	r3, r4
1a001d54:	d0eb      	beq.n	1a001d2e <ROMconsist+0x22>
			k--;
1a001d56:	3c01      	subs	r4, #1
1a001d58:	e7eb      	b.n	1a001d32 <ROMconsist+0x26>
	setStatus(BIT_ROM_CONS_CHK, TRUE);
1a001d5a:	2101      	movs	r1, #1
1a001d5c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
1a001d60:	f001 fb46 	bl	1a0033f0 <setStatus>
	if(getStatus(BIT_ROM_CONSIST))
1a001d64:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
1a001d68:	f001 fb52 	bl	1a003410 <getStatus>
1a001d6c:	b118      	cbz	r0, 1a001d76 <ROMconsist+0x6a>
		printf("ROMs consistency Ok\r\n");//ToDo: chequear flag de inconsistencia aca
1a001d6e:	4806      	ldr	r0, [pc, #24]	; (1a001d88 <ROMconsist+0x7c>)
1a001d70:	f005 ff0a 	bl	1a007b88 <puts>
}
1a001d74:	bd38      	pop	{r3, r4, r5, pc}
		printf("ROM consistency Nok\r\n");
1a001d76:	4805      	ldr	r0, [pc, #20]	; (1a001d8c <ROMconsist+0x80>)
1a001d78:	f005 ff06 	bl	1a007b88 <puts>
}
1a001d7c:	e7fa      	b.n	1a001d74 <ROMconsist+0x68>
1a001d7e:	bf00      	nop
1a001d80:	10004f80 	.word	0x10004f80
1a001d84:	1a007ffc 	.word	0x1a007ffc
1a001d88:	1a00800c 	.word	0x1a00800c
1a001d8c:	1a008024 	.word	0x1a008024

1a001d90 <vDisplayMng>:
{
1a001d90:	b570      	push	{r4, r5, r6, lr}
1a001d92:	e018      	b.n	1a001dc6 <vDisplayMng+0x36>
				lcdGoToXY( 13, 1 );
1a001d94:	2101      	movs	r1, #1
1a001d96:	200d      	movs	r0, #13
1a001d98:	f004 fefe 	bl	1a006b98 <lcdGoToXY>
				lcdData(0x32);
1a001d9c:	2032      	movs	r0, #50	; 0x32
1a001d9e:	f004 fe69 	bl	1a006a74 <lcdData>
				lcdGoToXY( 14, 1 );
1a001da2:	2101      	movs	r1, #1
1a001da4:	200e      	movs	r0, #14
1a001da6:	f004 fef7 	bl	1a006b98 <lcdGoToXY>
				lcdData(0x7F);
1a001daa:	207f      	movs	r0, #127	; 0x7f
1a001dac:	f004 fe62 	bl	1a006a74 <lcdData>
				lcdGoToXY( 15, 1 );
1a001db0:	2101      	movs	r1, #1
1a001db2:	200f      	movs	r0, #15
1a001db4:	f004 fef0 	bl	1a006b98 <lcdGoToXY>
				lcdData(0x31);
1a001db8:	2031      	movs	r0, #49	; 0x31
1a001dba:	f004 fe5b 	bl	1a006a74 <lcdData>
		vTaskDelay(1000);
1a001dbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a001dc2:	f002 fdd1 	bl	1a004968 <vTaskDelay>
		switch(systemMode)
1a001dc6:	4bd8      	ldr	r3, [pc, #864]	; (1a002128 <vDisplayMng+0x398>)
1a001dc8:	781b      	ldrb	r3, [r3, #0]
1a001dca:	2b5b      	cmp	r3, #91	; 0x5b
1a001dcc:	d8f7      	bhi.n	1a001dbe <vDisplayMng+0x2e>
1a001dce:	a201      	add	r2, pc, #4	; (adr r2, 1a001dd4 <vDisplayMng+0x44>)
1a001dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a001dd4:	1a001d95 	.word	0x1a001d95
1a001dd8:	1a002029 	.word	0x1a002029
1a001ddc:	1a00202d 	.word	0x1a00202d
1a001de0:	1a001dbf 	.word	0x1a001dbf
1a001de4:	1a001dbf 	.word	0x1a001dbf
1a001de8:	1a001dbf 	.word	0x1a001dbf
1a001dec:	1a001dbf 	.word	0x1a001dbf
1a001df0:	1a001dbf 	.word	0x1a001dbf
1a001df4:	1a001dbf 	.word	0x1a001dbf
1a001df8:	1a001dbf 	.word	0x1a001dbf
1a001dfc:	1a001dbf 	.word	0x1a001dbf
1a001e00:	1a001dbf 	.word	0x1a001dbf
1a001e04:	1a001dbf 	.word	0x1a001dbf
1a001e08:	1a001dbf 	.word	0x1a001dbf
1a001e0c:	1a001dbf 	.word	0x1a001dbf
1a001e10:	1a001dbf 	.word	0x1a001dbf
1a001e14:	1a001dbf 	.word	0x1a001dbf
1a001e18:	1a001dbf 	.word	0x1a001dbf
1a001e1c:	1a001dbf 	.word	0x1a001dbf
1a001e20:	1a001dbf 	.word	0x1a001dbf
1a001e24:	1a001dbf 	.word	0x1a001dbf
1a001e28:	1a001dbf 	.word	0x1a001dbf
1a001e2c:	1a001dbf 	.word	0x1a001dbf
1a001e30:	1a001dbf 	.word	0x1a001dbf
1a001e34:	1a001dbf 	.word	0x1a001dbf
1a001e38:	1a001dbf 	.word	0x1a001dbf
1a001e3c:	1a001dbf 	.word	0x1a001dbf
1a001e40:	1a001dbf 	.word	0x1a001dbf
1a001e44:	1a001dbf 	.word	0x1a001dbf
1a001e48:	1a001dbf 	.word	0x1a001dbf
1a001e4c:	1a002037 	.word	0x1a002037
1a001e50:	1a002041 	.word	0x1a002041
1a001e54:	1a001dbf 	.word	0x1a001dbf
1a001e58:	1a001dbf 	.word	0x1a001dbf
1a001e5c:	1a001dbf 	.word	0x1a001dbf
1a001e60:	1a001dbf 	.word	0x1a001dbf
1a001e64:	1a001dbf 	.word	0x1a001dbf
1a001e68:	1a001dbf 	.word	0x1a001dbf
1a001e6c:	1a001dbf 	.word	0x1a001dbf
1a001e70:	1a001dbf 	.word	0x1a001dbf
1a001e74:	1a00204b 	.word	0x1a00204b
1a001e78:	1a001dbf 	.word	0x1a001dbf
1a001e7c:	1a001dbf 	.word	0x1a001dbf
1a001e80:	1a002055 	.word	0x1a002055
1a001e84:	1a00205f 	.word	0x1a00205f
1a001e88:	1a001dbf 	.word	0x1a001dbf
1a001e8c:	1a001dbf 	.word	0x1a001dbf
1a001e90:	1a001dbf 	.word	0x1a001dbf
1a001e94:	1a001dbf 	.word	0x1a001dbf
1a001e98:	1a001dbf 	.word	0x1a001dbf
1a001e9c:	1a001dbf 	.word	0x1a001dbf
1a001ea0:	1a001dbf 	.word	0x1a001dbf
1a001ea4:	1a001dbf 	.word	0x1a001dbf
1a001ea8:	1a002069 	.word	0x1a002069
1a001eac:	1a002073 	.word	0x1a002073
1a001eb0:	1a002073 	.word	0x1a002073
1a001eb4:	1a00207d 	.word	0x1a00207d
1a001eb8:	1a002083 	.word	0x1a002083
1a001ebc:	1a001dbf 	.word	0x1a001dbf
1a001ec0:	1a001dbf 	.word	0x1a001dbf
1a001ec4:	1a00208d 	.word	0x1a00208d
1a001ec8:	1a001dbf 	.word	0x1a001dbf
1a001ecc:	1a001dbf 	.word	0x1a001dbf
1a001ed0:	1a001dbf 	.word	0x1a001dbf
1a001ed4:	1a001dbf 	.word	0x1a001dbf
1a001ed8:	1a001dbf 	.word	0x1a001dbf
1a001edc:	1a001dbf 	.word	0x1a001dbf
1a001ee0:	1a001dbf 	.word	0x1a001dbf
1a001ee4:	1a001dbf 	.word	0x1a001dbf
1a001ee8:	1a001dbf 	.word	0x1a001dbf
1a001eec:	1a001dbf 	.word	0x1a001dbf
1a001ef0:	1a002097 	.word	0x1a002097
1a001ef4:	1a0020a7 	.word	0x1a0020a7
1a001ef8:	1a0020d7 	.word	0x1a0020d7
1a001efc:	1a0020dd 	.word	0x1a0020dd
1a001f00:	1a001dbf 	.word	0x1a001dbf
1a001f04:	1a0020e9 	.word	0x1a0020e9
1a001f08:	1a001dbf 	.word	0x1a001dbf
1a001f0c:	1a001dbf 	.word	0x1a001dbf
1a001f10:	1a001dbf 	.word	0x1a001dbf
1a001f14:	1a002103 	.word	0x1a002103
1a001f18:	1a002109 	.word	0x1a002109
1a001f1c:	1a00210f 	.word	0x1a00210f
1a001f20:	1a00211b 	.word	0x1a00211b
1a001f24:	1a002135 	.word	0x1a002135
1a001f28:	1a001dbf 	.word	0x1a001dbf
1a001f2c:	1a001dbf 	.word	0x1a001dbf
1a001f30:	1a001dbf 	.word	0x1a001dbf
1a001f34:	1a001dbf 	.word	0x1a001dbf
1a001f38:	1a001dbf 	.word	0x1a001dbf
1a001f3c:	1a001dbf 	.word	0x1a001dbf
1a001f40:	1a002141 	.word	0x1a002141
							gpioWrite(SEM_RED, ON);
1a001f44:	2101      	movs	r1, #1
1a001f46:	201b      	movs	r0, #27
1a001f48:	f004 fc54 	bl	1a0067f4 <gpioWrite>
1a001f4c:	e003      	b.n	1a001f56 <vDisplayMng+0x1c6>
							gpioWrite(SEM_GREEN, ON);
1a001f4e:	2101      	movs	r1, #1
1a001f50:	201c      	movs	r0, #28
1a001f52:	f004 fc4f 	bl	1a0067f4 <gpioWrite>
						vTaskDelay(150);
1a001f56:	2096      	movs	r0, #150	; 0x96
1a001f58:	f002 fd06 	bl	1a004968 <vTaskDelay>
						if(sensor[k].estado != ACTIVE) //titilar
1a001f5c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a001f60:	009a      	lsls	r2, r3, #2
1a001f62:	4b72      	ldr	r3, [pc, #456]	; (1a00212c <vDisplayMng+0x39c>)
1a001f64:	4413      	add	r3, r2
1a001f66:	7a1b      	ldrb	r3, [r3, #8]
1a001f68:	2b01      	cmp	r3, #1
1a001f6a:	d127      	bne.n	1a001fbc <vDisplayMng+0x22c>
						if(sensor[k].estado == SEN_ALARM && quiet == 0)
1a001f6c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a001f70:	009a      	lsls	r2, r3, #2
1a001f72:	4b6e      	ldr	r3, [pc, #440]	; (1a00212c <vDisplayMng+0x39c>)
1a001f74:	4413      	add	r3, r2
1a001f76:	7a1b      	ldrb	r3, [r3, #8]
1a001f78:	2b02      	cmp	r3, #2
1a001f7a:	d02a      	beq.n	1a001fd2 <vDisplayMng+0x242>
							vTaskDelay(150);
1a001f7c:	2096      	movs	r0, #150	; 0x96
1a001f7e:	f002 fcf3 	bl	1a004968 <vTaskDelay>
					for (int i=0; i<6; i++)
1a001f82:	3601      	adds	r6, #1
1a001f84:	2e05      	cmp	r6, #5
1a001f86:	dc2c      	bgt.n	1a001fe2 <vDisplayMng+0x252>
						writeRow(sensor[k].eje,0x80>>(sensor[k].posicion));
1a001f88:	00a3      	lsls	r3, r4, #2
1a001f8a:	4423      	add	r3, r4
1a001f8c:	009a      	lsls	r2, r3, #2
1a001f8e:	4d67      	ldr	r5, [pc, #412]	; (1a00212c <vDisplayMng+0x39c>)
1a001f90:	4415      	add	r5, r2
1a001f92:	692b      	ldr	r3, [r5, #16]
1a001f94:	2180      	movs	r1, #128	; 0x80
1a001f96:	4119      	asrs	r1, r3
1a001f98:	b2c9      	uxtb	r1, r1
1a001f9a:	7b28      	ldrb	r0, [r5, #12]
1a001f9c:	f001 fae7 	bl	1a00356e <writeRow>
						if(sensor[k].estado == SEN_ALARM)
1a001fa0:	7a2b      	ldrb	r3, [r5, #8]
1a001fa2:	2b02      	cmp	r3, #2
1a001fa4:	d0ce      	beq.n	1a001f44 <vDisplayMng+0x1b4>
						else if(sensor[k].estado == INACTIVE)
1a001fa6:	2b00      	cmp	r3, #0
1a001fa8:	d1d1      	bne.n	1a001f4e <vDisplayMng+0x1be>
							gpioWrite(SEM_GREEN, ON);
1a001faa:	2101      	movs	r1, #1
1a001fac:	201c      	movs	r0, #28
1a001fae:	f004 fc21 	bl	1a0067f4 <gpioWrite>
							gpioWrite(SEM_RED, ON);
1a001fb2:	2101      	movs	r1, #1
1a001fb4:	201b      	movs	r0, #27
1a001fb6:	f004 fc1d 	bl	1a0067f4 <gpioWrite>
1a001fba:	e7cc      	b.n	1a001f56 <vDisplayMng+0x1c6>
							ledMatrixClear(); // ojo que apaga todos los leds!!!
1a001fbc:	f001 fb17 	bl	1a0035ee <ledMatrixClear>
							gpioWrite(SEM_GREEN, OFF); ///ToDo: función sAPI!!!
1a001fc0:	2100      	movs	r1, #0
1a001fc2:	201c      	movs	r0, #28
1a001fc4:	f004 fc16 	bl	1a0067f4 <gpioWrite>
							gpioWrite(SEM_RED, OFF);
1a001fc8:	2100      	movs	r1, #0
1a001fca:	201b      	movs	r0, #27
1a001fcc:	f004 fc12 	bl	1a0067f4 <gpioWrite>
1a001fd0:	e7cc      	b.n	1a001f6c <vDisplayMng+0x1dc>
						if(sensor[k].estado == SEN_ALARM && quiet == 0)
1a001fd2:	4b57      	ldr	r3, [pc, #348]	; (1a002130 <vDisplayMng+0x3a0>)
1a001fd4:	681b      	ldr	r3, [r3, #0]
1a001fd6:	2b00      	cmp	r3, #0
1a001fd8:	d1d0      	bne.n	1a001f7c <vDisplayMng+0x1ec>
							gpioToggle(GPIO4); // Buzzer ///ToDo: función sAPI!!!
1a001fda:	201e      	movs	r0, #30
1a001fdc:	f004 fc73 	bl	1a0068c6 <gpioToggle>
1a001fe0:	e7cc      	b.n	1a001f7c <vDisplayMng+0x1ec>
					if(systemMode != NORMAL)
1a001fe2:	4b51      	ldr	r3, [pc, #324]	; (1a002128 <vDisplayMng+0x398>)
1a001fe4:	781b      	ldrb	r3, [r3, #0]
1a001fe6:	2b01      	cmp	r3, #1
1a001fe8:	f47f aee9 	bne.w	1a001dbe <vDisplayMng+0x2e>
				for (k=0; k<N; k++)
1a001fec:	3401      	adds	r4, #1
1a001fee:	2c17      	cmp	r4, #23
1a001ff0:	f73f aee5 	bgt.w	1a001dbe <vDisplayMng+0x2e>
					gpioToggle(LEDB);
1a001ff4:	202a      	movs	r0, #42	; 0x2a
1a001ff6:	f004 fc66 	bl	1a0068c6 <gpioToggle>
					lcdClear();
1a001ffa:	f004 fdf5 	bl	1a006be8 <lcdClear>
					taskENTER_CRITICAL();
1a001ffe:	f003 f939 	bl	1a005274 <vPortEnterCritical>
					SMTB_Temp_Show(sensor[k].temp, sensor[k].eje, sensor[k].posicion, sensor[k].estado);
1a002002:	00a3      	lsls	r3, r4, #2
1a002004:	4423      	add	r3, r4
1a002006:	009a      	lsls	r2, r3, #2
1a002008:	4848      	ldr	r0, [pc, #288]	; (1a00212c <vDisplayMng+0x39c>)
1a00200a:	4410      	add	r0, r2
1a00200c:	7a03      	ldrb	r3, [r0, #8]
1a00200e:	7c02      	ldrb	r2, [r0, #16]
1a002010:	7b01      	ldrb	r1, [r0, #12]
1a002012:	7a40      	ldrb	r0, [r0, #9]
1a002014:	f000 fd72 	bl	1a002afc <SMTB_Temp_Show>
					taskEXIT_CRITICAL();
1a002018:	f003 f94e 	bl	1a0052b8 <vPortExitCritical>
					SMTB_Mode_Show();
1a00201c:	f000 fdd6 	bl	1a002bcc <SMTB_Mode_Show>
					ledMatrixClear();
1a002020:	f001 fae5 	bl	1a0035ee <ledMatrixClear>
					for (int i=0; i<6; i++)
1a002024:	2600      	movs	r6, #0
1a002026:	e7ad      	b.n	1a001f84 <vDisplayMng+0x1f4>
				for (k=0; k<N; k++)
1a002028:	2400      	movs	r4, #0
1a00202a:	e7e0      	b.n	1a001fee <vDisplayMng+0x25e>
				ledMatrixClear();
1a00202c:	f001 fadf 	bl	1a0035ee <ledMatrixClear>
				SMTB_Menu_Show();
1a002030:	f000 fea4 	bl	1a002d7c <SMTB_Menu_Show>
				break;
1a002034:	e6c3      	b.n	1a001dbe <vDisplayMng+0x2e>
				ledMatrixClear();
1a002036:	f001 fada 	bl	1a0035ee <ledMatrixClear>
				SMTB_Menu_Show();
1a00203a:	f000 fe9f 	bl	1a002d7c <SMTB_Menu_Show>
				break;
1a00203e:	e6be      	b.n	1a001dbe <vDisplayMng+0x2e>
				ledMatrixClear();
1a002040:	f001 fad5 	bl	1a0035ee <ledMatrixClear>
				SMTB_Alarm_View_Init();
1a002044:	f000 ff06 	bl	1a002e54 <SMTB_Alarm_View_Init>
				break;
1a002048:	e6b9      	b.n	1a001dbe <vDisplayMng+0x2e>
				ledMatrixClear();
1a00204a:	f001 fad0 	bl	1a0035ee <ledMatrixClear>
				SMTB_Menu_Show();
1a00204e:	f000 fe95 	bl	1a002d7c <SMTB_Menu_Show>
				break;
1a002052:	e6b4      	b.n	1a001dbe <vDisplayMng+0x2e>
				ledMatrixClear();
1a002054:	f001 facb 	bl	1a0035ee <ledMatrixClear>
				altaSecUpdate();
1a002058:	f7ff fa80 	bl	1a00155c <altaSecUpdate>
				break;
1a00205c:	e6af      	b.n	1a001dbe <vDisplayMng+0x2e>
				ledMatrixClear();
1a00205e:	f001 fac6 	bl	1a0035ee <ledMatrixClear>
				altaSec2Update();
1a002062:	f7ff fa9b 	bl	1a00159c <altaSec2Update>
				break;
1a002066:	e6aa      	b.n	1a001dbe <vDisplayMng+0x2e>
				ledMatrixClear();
1a002068:	f001 fac1 	bl	1a0035ee <ledMatrixClear>
				SMTB_Alta_Init();
1a00206c:	f000 ff4c 	bl	1a002f08 <SMTB_Alta_Init>
				break;
1a002070:	e6a5      	b.n	1a001dbe <vDisplayMng+0x2e>
				ledMatrixClear();
1a002072:	f001 fabc 	bl	1a0035ee <ledMatrixClear>
				SMTB_Menu_Show();
1a002076:	f000 fe81 	bl	1a002d7c <SMTB_Menu_Show>
				break;
1a00207a:	e6a0      	b.n	1a001dbe <vDisplayMng+0x2e>
				ledMatrixClear();
1a00207c:	f001 fab7 	bl	1a0035ee <ledMatrixClear>
				break;
1a002080:	e69d      	b.n	1a001dbe <vDisplayMng+0x2e>
				ledMatrixClear();
1a002082:	f001 fab4 	bl	1a0035ee <ledMatrixClear>
				SMTB_Sens_View_Init();
1a002086:	f000 ff67 	bl	1a002f58 <SMTB_Sens_View_Init>
				break;
1a00208a:	e698      	b.n	1a001dbe <vDisplayMng+0x2e>
				ledMatrixClear();
1a00208c:	f001 faaf 	bl	1a0035ee <ledMatrixClear>
				SMTB_Menu_Show();
1a002090:	f000 fe74 	bl	1a002d7c <SMTB_Menu_Show>
				break;
1a002094:	e693      	b.n	1a001dbe <vDisplayMng+0x2e>
				ledMatrixClear();
1a002096:	f001 faaa 	bl	1a0035ee <ledMatrixClear>
				SMTB_ROM_consist();
1a00209a:	f000 ffb7 	bl	1a00300c <SMTB_ROM_consist>
				systemMode = ROM_CONSIST_2;
1a00209e:	4b22      	ldr	r3, [pc, #136]	; (1a002128 <vDisplayMng+0x398>)
1a0020a0:	2248      	movs	r2, #72	; 0x48
1a0020a2:	701a      	strb	r2, [r3, #0]
				break;
1a0020a4:	e68b      	b.n	1a001dbe <vDisplayMng+0x2e>
				while(getStatus(BIT_ROM_CONS_CHK)== FALSE); //ToDo manejo de error (NORMAL timer)
1a0020a6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
1a0020aa:	f001 f9b1 	bl	1a003410 <getStatus>
1a0020ae:	2800      	cmp	r0, #0
1a0020b0:	d0f9      	beq.n	1a0020a6 <vDisplayMng+0x316>
				if(getStatus(BIT_ROM_CONSIST))
1a0020b2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
1a0020b6:	f001 f9ab 	bl	1a003410 <getStatus>
1a0020ba:	b148      	cbz	r0, 1a0020d0 <vDisplayMng+0x340>
					SMTB_ROM_consist_OK();
1a0020bc:	f000 ffbc 	bl	1a003038 <SMTB_ROM_consist_OK>
				vTaskDelay(4000);
1a0020c0:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
1a0020c4:	f002 fc50 	bl	1a004968 <vTaskDelay>
				systemMode = NORMAL;
1a0020c8:	4b17      	ldr	r3, [pc, #92]	; (1a002128 <vDisplayMng+0x398>)
1a0020ca:	2201      	movs	r2, #1
1a0020cc:	701a      	strb	r2, [r3, #0]
				break;
1a0020ce:	e676      	b.n	1a001dbe <vDisplayMng+0x2e>
					SMTB_ROM_consist_NOK();
1a0020d0:	f000 ffbe 	bl	1a003050 <SMTB_ROM_consist_NOK>
1a0020d4:	e7f4      	b.n	1a0020c0 <vDisplayMng+0x330>
				SMTB_Menu_Show();
1a0020d6:	f000 fe51 	bl	1a002d7c <SMTB_Menu_Show>
				break;
1a0020da:	e670      	b.n	1a001dbe <vDisplayMng+0x2e>
				SMTB_ROM_copying();
1a0020dc:	f000 fffe 	bl	1a0030dc <SMTB_ROM_copying>
				systemMode = ROM_COPY_3;
1a0020e0:	4b11      	ldr	r3, [pc, #68]	; (1a002128 <vDisplayMng+0x398>)
1a0020e2:	224b      	movs	r2, #75	; 0x4b
1a0020e4:	701a      	strb	r2, [r3, #0]
				break;
1a0020e6:	e66a      	b.n	1a001dbe <vDisplayMng+0x2e>
				SMTB_ROM_consist();
1a0020e8:	f000 ff90 	bl	1a00300c <SMTB_ROM_consist>
				ROMconsist();
1a0020ec:	f7ff fe0e 	bl	1a001d0c <ROMconsist>
				SMTB_ROM_copying();
1a0020f0:	f000 fff4 	bl	1a0030dc <SMTB_ROM_copying>
				copyROM(2);
1a0020f4:	2002      	movs	r0, #2
1a0020f6:	f7ff fd29 	bl	1a001b4c <copyROM>
				systemMode = NORMAL;
1a0020fa:	4b0b      	ldr	r3, [pc, #44]	; (1a002128 <vDisplayMng+0x398>)
1a0020fc:	2201      	movs	r2, #1
1a0020fe:	701a      	strb	r2, [r3, #0]
				break;
1a002100:	e65d      	b.n	1a001dbe <vDisplayMng+0x2e>
				SMTB_Menu_Show();
1a002102:	f000 fe3b 	bl	1a002d7c <SMTB_Menu_Show>
				break;
1a002106:	e65a      	b.n	1a001dbe <vDisplayMng+0x2e>
				SMTB_Status_Show();
1a002108:	f001 f824 	bl	1a003154 <SMTB_Status_Show>
				break;
1a00210c:	e657      	b.n	1a001dbe <vDisplayMng+0x2e>
				ledMatrixTest();
1a00210e:	f001 fa79 	bl	1a003604 <ledMatrixTest>
				systemMode = NORMAL;
1a002112:	4b05      	ldr	r3, [pc, #20]	; (1a002128 <vDisplayMng+0x398>)
1a002114:	2201      	movs	r2, #1
1a002116:	701a      	strb	r2, [r3, #0]
				break;
1a002118:	e651      	b.n	1a001dbe <vDisplayMng+0x2e>
				buzzer_test();
1a00211a:	f001 f9f9 	bl	1a003510 <buzzer_test>
				systemMode = NORMAL;
1a00211e:	4b02      	ldr	r3, [pc, #8]	; (1a002128 <vDisplayMng+0x398>)
1a002120:	2201      	movs	r2, #1
1a002122:	701a      	strb	r2, [r3, #0]
				break;
1a002124:	e64b      	b.n	1a001dbe <vDisplayMng+0x2e>
1a002126:	bf00      	nop
1a002128:	100000c8 	.word	0x100000c8
1a00212c:	10004d9c 	.word	0x10004d9c
1a002130:	100000c4 	.word	0x100000c4
				semaphoreTest();
1a002134:	f001 f9fd 	bl	1a003532 <semaphoreTest>
				systemMode = NORMAL;
1a002138:	4b06      	ldr	r3, [pc, #24]	; (1a002154 <vDisplayMng+0x3c4>)
1a00213a:	2201      	movs	r2, #1
1a00213c:	701a      	strb	r2, [r3, #0]
				break;
1a00213e:	e63e      	b.n	1a001dbe <vDisplayMng+0x2e>
				SMTB_pending();
1a002140:	f000 fffa 	bl	1a003138 <SMTB_pending>
				vTaskDelay(2000);
1a002144:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
1a002148:	f002 fc0e 	bl	1a004968 <vTaskDelay>
				systemMode = NORMAL;
1a00214c:	4b01      	ldr	r3, [pc, #4]	; (1a002154 <vDisplayMng+0x3c4>)
1a00214e:	2201      	movs	r2, #1
1a002150:	701a      	strb	r2, [r3, #0]
				break;
1a002152:	e634      	b.n	1a001dbe <vDisplayMng+0x2e>
1a002154:	100000c8 	.word	0x100000c8

1a002158 <menuROMupdate1>:
{
1a002158:	b508      	push	{r3, lr}
	switch(button)
1a00215a:	2803      	cmp	r0, #3
1a00215c:	d83a      	bhi.n	1a0021d4 <menuROMupdate1+0x7c>
1a00215e:	e8df f000 	tbb	[pc, r0]
1a002162:	0236      	.short	0x0236
1a002164:	1c12      	.short	0x1c12
		itemSelected --;
1a002166:	4a1c      	ldr	r2, [pc, #112]	; (1a0021d8 <menuROMupdate1+0x80>)
1a002168:	6813      	ldr	r3, [r2, #0]
1a00216a:	3b01      	subs	r3, #1
1a00216c:	6013      	str	r3, [r2, #0]
		if (itemSelected < windowStart)
1a00216e:	4a1b      	ldr	r2, [pc, #108]	; (1a0021dc <menuROMupdate1+0x84>)
1a002170:	6812      	ldr	r2, [r2, #0]
1a002172:	4293      	cmp	r3, r2
1a002174:	da02      	bge.n	1a00217c <menuROMupdate1+0x24>
			windowStart --;
1a002176:	3a01      	subs	r2, #1
1a002178:	4918      	ldr	r1, [pc, #96]	; (1a0021dc <menuROMupdate1+0x84>)
1a00217a:	600a      	str	r2, [r1, #0]
		if (itemSelected == 0)
1a00217c:	bb53      	cbnz	r3, 1a0021d4 <menuROMupdate1+0x7c>
			itemSelected = 1;
1a00217e:	4b16      	ldr	r3, [pc, #88]	; (1a0021d8 <menuROMupdate1+0x80>)
1a002180:	2201      	movs	r2, #1
1a002182:	601a      	str	r2, [r3, #0]
1a002184:	e026      	b.n	1a0021d4 <menuROMupdate1+0x7c>
		itemSelected ++;
1a002186:	4a14      	ldr	r2, [pc, #80]	; (1a0021d8 <menuROMupdate1+0x80>)
1a002188:	6813      	ldr	r3, [r2, #0]
1a00218a:	3301      	adds	r3, #1
1a00218c:	6013      	str	r3, [r2, #0]
		if (itemSelected > 2)
1a00218e:	2b02      	cmp	r3, #2
1a002190:	dd20      	ble.n	1a0021d4 <menuROMupdate1+0x7c>
			itemSelected = 3;
1a002192:	4613      	mov	r3, r2
1a002194:	2203      	movs	r2, #3
1a002196:	601a      	str	r2, [r3, #0]
1a002198:	e01c      	b.n	1a0021d4 <menuROMupdate1+0x7c>
		switch(itemSelected)
1a00219a:	4b0f      	ldr	r3, [pc, #60]	; (1a0021d8 <menuROMupdate1+0x80>)
1a00219c:	681b      	ldr	r3, [r3, #0]
1a00219e:	2b02      	cmp	r3, #2
1a0021a0:	d009      	beq.n	1a0021b6 <menuROMupdate1+0x5e>
1a0021a2:	2b03      	cmp	r3, #3
1a0021a4:	d00d      	beq.n	1a0021c2 <menuROMupdate1+0x6a>
1a0021a6:	2b01      	cmp	r3, #1
1a0021a8:	d114      	bne.n	1a0021d4 <menuROMupdate1+0x7c>
			systemMode = ROM_CONSIST;
1a0021aa:	4b0d      	ldr	r3, [pc, #52]	; (1a0021e0 <menuROMupdate1+0x88>)
1a0021ac:	2247      	movs	r2, #71	; 0x47
1a0021ae:	701a      	strb	r2, [r3, #0]
			ROMconsist();
1a0021b0:	f7ff fdac 	bl	1a001d0c <ROMconsist>
			break;
1a0021b4:	e00e      	b.n	1a0021d4 <menuROMupdate1+0x7c>
			menuROMcopyInit();
1a0021b6:	f7ff fc5f 	bl	1a001a78 <menuROMcopyInit>
			systemMode = ROM_COPY;
1a0021ba:	4b09      	ldr	r3, [pc, #36]	; (1a0021e0 <menuROMupdate1+0x88>)
1a0021bc:	2249      	movs	r2, #73	; 0x49
1a0021be:	701a      	strb	r2, [r3, #0]
			break;
1a0021c0:	e008      	b.n	1a0021d4 <menuROMupdate1+0x7c>
			readROM();
1a0021c2:	f7ff fc99 	bl	1a001af8 <readROM>
			systemMode = NORMAL;
1a0021c6:	4b06      	ldr	r3, [pc, #24]	; (1a0021e0 <menuROMupdate1+0x88>)
1a0021c8:	2201      	movs	r2, #1
1a0021ca:	701a      	strb	r2, [r3, #0]
			break;
1a0021cc:	e002      	b.n	1a0021d4 <menuROMupdate1+0x7c>
		systemMode = NORMAL;
1a0021ce:	4b04      	ldr	r3, [pc, #16]	; (1a0021e0 <menuROMupdate1+0x88>)
1a0021d0:	2201      	movs	r2, #1
1a0021d2:	701a      	strb	r2, [r3, #0]
}
1a0021d4:	bd08      	pop	{r3, pc}
1a0021d6:	bf00      	nop
1a0021d8:	10004cc4 	.word	0x10004cc4
1a0021dc:	10004cc0 	.word	0x10004cc0
1a0021e0:	100000c8 	.word	0x100000c8

1a0021e4 <resetSensors>:
{
1a0021e4:	b508      	push	{r3, lr}
	setStatus(BIT_SENSORS, FALSE);
1a0021e6:	2100      	movs	r1, #0
1a0021e8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
1a0021ec:	f001 f900 	bl	1a0033f0 <setStatus>
}
1a0021f0:	bd08      	pop	{r3, pc}
1a0021f2:	Address 0x000000001a0021f2 is out of bounds.


1a0021f4 <menuSensUpdate>:
	switch(button)
1a0021f4:	2803      	cmp	r0, #3
1a0021f6:	d868      	bhi.n	1a0022ca <menuSensUpdate+0xd6>
1a0021f8:	e8df f000 	tbb	[pc, r0]
1a0021fc:	2e170602 	.word	0x2e170602
			systemMode = NORMAL;
1a002200:	4b32      	ldr	r3, [pc, #200]	; (1a0022cc <menuSensUpdate+0xd8>)
1a002202:	2201      	movs	r2, #1
1a002204:	701a      	strb	r2, [r3, #0]
			break;
1a002206:	4770      	bx	lr
			itemSelected --;
1a002208:	4a31      	ldr	r2, [pc, #196]	; (1a0022d0 <menuSensUpdate+0xdc>)
1a00220a:	6813      	ldr	r3, [r2, #0]
1a00220c:	3b01      	subs	r3, #1
1a00220e:	6013      	str	r3, [r2, #0]
			if (itemSelected < windowStart)
1a002210:	4a30      	ldr	r2, [pc, #192]	; (1a0022d4 <menuSensUpdate+0xe0>)
1a002212:	6812      	ldr	r2, [r2, #0]
1a002214:	4293      	cmp	r3, r2
1a002216:	da02      	bge.n	1a00221e <menuSensUpdate+0x2a>
				windowStart --;
1a002218:	3a01      	subs	r2, #1
1a00221a:	492e      	ldr	r1, [pc, #184]	; (1a0022d4 <menuSensUpdate+0xe0>)
1a00221c:	600a      	str	r2, [r1, #0]
			if (itemSelected == 0)
1a00221e:	2b00      	cmp	r3, #0
1a002220:	d153      	bne.n	1a0022ca <menuSensUpdate+0xd6>
				itemSelected = 1;
1a002222:	4b2b      	ldr	r3, [pc, #172]	; (1a0022d0 <menuSensUpdate+0xdc>)
1a002224:	2201      	movs	r2, #1
1a002226:	601a      	str	r2, [r3, #0]
1a002228:	4770      	bx	lr
			itemSelected ++;
1a00222a:	4a29      	ldr	r2, [pc, #164]	; (1a0022d0 <menuSensUpdate+0xdc>)
1a00222c:	6813      	ldr	r3, [r2, #0]
1a00222e:	3301      	adds	r3, #1
1a002230:	6013      	str	r3, [r2, #0]
			if (itemSelected >= windowStart + WINDOW_HEIGHT)
1a002232:	4a28      	ldr	r2, [pc, #160]	; (1a0022d4 <menuSensUpdate+0xe0>)
1a002234:	6812      	ldr	r2, [r2, #0]
1a002236:	1cd1      	adds	r1, r2, #3
1a002238:	428b      	cmp	r3, r1
1a00223a:	dd02      	ble.n	1a002242 <menuSensUpdate+0x4e>
				windowStart ++;
1a00223c:	3201      	adds	r2, #1
1a00223e:	4b25      	ldr	r3, [pc, #148]	; (1a0022d4 <menuSensUpdate+0xe0>)
1a002240:	601a      	str	r2, [r3, #0]
			if(windowStart > 1)
1a002242:	4b24      	ldr	r3, [pc, #144]	; (1a0022d4 <menuSensUpdate+0xe0>)
1a002244:	681b      	ldr	r3, [r3, #0]
1a002246:	2b01      	cmp	r3, #1
1a002248:	dd3f      	ble.n	1a0022ca <menuSensUpdate+0xd6>
				windowStart = 1;
1a00224a:	4b22      	ldr	r3, [pc, #136]	; (1a0022d4 <menuSensUpdate+0xe0>)
1a00224c:	2201      	movs	r2, #1
1a00224e:	601a      	str	r2, [r3, #0]
				itemSelected = 4;
1a002250:	4b1f      	ldr	r3, [pc, #124]	; (1a0022d0 <menuSensUpdate+0xdc>)
1a002252:	2204      	movs	r2, #4
1a002254:	601a      	str	r2, [r3, #0]
1a002256:	4770      	bx	lr
{
1a002258:	b510      	push	{r4, lr}
1a00225a:	b082      	sub	sp, #8
			switch(itemSelected)
1a00225c:	4b1c      	ldr	r3, [pc, #112]	; (1a0022d0 <menuSensUpdate+0xdc>)
1a00225e:	681b      	ldr	r3, [r3, #0]
1a002260:	3b01      	subs	r3, #1
1a002262:	2b03      	cmp	r3, #3
1a002264:	d805      	bhi.n	1a002272 <menuSensUpdate+0x7e>
1a002266:	e8df f003 	tbb	[pc, r3]
1a00226a:	0602      	.short	0x0602
1a00226c:	210a      	.short	0x210a
					resetSensors();
1a00226e:	f7ff ffb9 	bl	1a0021e4 <resetSensors>
}
1a002272:	b002      	add	sp, #8
1a002274:	bd10      	pop	{r4, pc}
					systemMode = ALTA_INIT;
1a002276:	4b15      	ldr	r3, [pc, #84]	; (1a0022cc <menuSensUpdate+0xd8>)
1a002278:	2235      	movs	r2, #53	; 0x35
1a00227a:	701a      	strb	r2, [r3, #0]
					break;
1a00227c:	e7f9      	b.n	1a002272 <menuSensUpdate+0x7e>
					if(un_buffer.ROM_NO[0] == 0x28)
1a00227e:	4b16      	ldr	r3, [pc, #88]	; (1a0022d8 <menuSensUpdate+0xe4>)
1a002280:	781b      	ldrb	r3, [r3, #0]
1a002282:	2b28      	cmp	r3, #40	; 0x28
1a002284:	d103      	bne.n	1a00228e <menuSensUpdate+0x9a>
						systemMode = ALTA_SEC;
1a002286:	4b11      	ldr	r3, [pc, #68]	; (1a0022cc <menuSensUpdate+0xd8>)
1a002288:	222b      	movs	r2, #43	; 0x2b
1a00228a:	701a      	strb	r2, [r3, #0]
1a00228c:	e7f1      	b.n	1a002272 <menuSensUpdate+0x7e>
						systemMode = ALTA_SEC_2;
1a00228e:	4b0f      	ldr	r3, [pc, #60]	; (1a0022cc <menuSensUpdate+0xd8>)
1a002290:	222c      	movs	r2, #44	; 0x2c
1a002292:	701a      	strb	r2, [r3, #0]
						xTimerStart(normalTimer,0);
1a002294:	4b11      	ldr	r3, [pc, #68]	; (1a0022dc <menuSensUpdate+0xe8>)
1a002296:	681c      	ldr	r4, [r3, #0]
1a002298:	f002 fa56 	bl	1a004748 <xTaskGetTickCount>
1a00229c:	2300      	movs	r3, #0
1a00229e:	9300      	str	r3, [sp, #0]
1a0022a0:	4602      	mov	r2, r0
1a0022a2:	2101      	movs	r1, #1
1a0022a4:	4620      	mov	r0, r4
1a0022a6:	f002 fdfd 	bl	1a004ea4 <xTimerGenericCommand>
1a0022aa:	e7e2      	b.n	1a002272 <menuSensUpdate+0x7e>
					xTimerStart(normalTimer,0);
1a0022ac:	4b0b      	ldr	r3, [pc, #44]	; (1a0022dc <menuSensUpdate+0xe8>)
1a0022ae:	681c      	ldr	r4, [r3, #0]
1a0022b0:	f002 fa4a 	bl	1a004748 <xTaskGetTickCount>
1a0022b4:	2300      	movs	r3, #0
1a0022b6:	9300      	str	r3, [sp, #0]
1a0022b8:	4602      	mov	r2, r0
1a0022ba:	2101      	movs	r1, #1
1a0022bc:	4620      	mov	r0, r4
1a0022be:	f002 fdf1 	bl	1a004ea4 <xTimerGenericCommand>
					systemMode = SENS_VIEW;
1a0022c2:	4b02      	ldr	r3, [pc, #8]	; (1a0022cc <menuSensUpdate+0xd8>)
1a0022c4:	2239      	movs	r2, #57	; 0x39
1a0022c6:	701a      	strb	r2, [r3, #0]
}
1a0022c8:	e7d3      	b.n	1a002272 <menuSensUpdate+0x7e>
1a0022ca:	4770      	bx	lr
1a0022cc:	100000c8 	.word	0x100000c8
1a0022d0:	10004cc4 	.word	0x10004cc4
1a0022d4:	10004cc0 	.word	0x10004cc0
1a0022d8:	10004f90 	.word	0x10004f90
1a0022dc:	10004d88 	.word	0x10004d88

1a0022e0 <vButtonMng>:
{
1a0022e0:	b570      	push	{r4, r5, r6, lr}
1a0022e2:	b088      	sub	sp, #32
	vTaskDelay(2000);//////////////////chequear
1a0022e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
1a0022e8:	f002 fb3e 	bl	1a004968 <vTaskDelay>
1a0022ec:	e00b      	b.n	1a002306 <vButtonMng+0x26>
					if(button == LEFT)
1a0022ee:	b938      	cbnz	r0, 1a002300 <vButtonMng+0x20>
						systemMode = MAIN_MENU;
1a0022f0:	4b9b      	ldr	r3, [pc, #620]	; (1a002560 <vButtonMng+0x280>)
1a0022f2:	2202      	movs	r2, #2
1a0022f4:	701a      	strb	r2, [r3, #0]
						menuInit();
1a0022f6:	f7ff f979 	bl	1a0015ec <menuInit>
1a0022fa:	e001      	b.n	1a002300 <vButtonMng+0x20>
					menuUpdate(button);
1a0022fc:	f7ff fab4 	bl	1a001868 <menuUpdate>
		vTaskDelay(40);// este marca la cadencia de los botones (antirrebote)
1a002300:	2028      	movs	r0, #40	; 0x28
1a002302:	f002 fb31 	bl	1a004968 <vTaskDelay>
		button = buttonsUpdate();
1a002306:	f7fe facd 	bl	1a0008a4 <buttonsUpdate>
1a00230a:	4604      	mov	r4, r0
		if (button != -1)
1a00230c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a002310:	d0f6      	beq.n	1a002300 <vButtonMng+0x20>
			switch(systemMode)
1a002312:	4b93      	ldr	r3, [pc, #588]	; (1a002560 <vButtonMng+0x280>)
1a002314:	781b      	ldrb	r3, [r3, #0]
1a002316:	3b01      	subs	r3, #1
1a002318:	2b4f      	cmp	r3, #79	; 0x4f
1a00231a:	d8f1      	bhi.n	1a002300 <vButtonMng+0x20>
1a00231c:	a201      	add	r2, pc, #4	; (adr r2, 1a002324 <vButtonMng+0x44>)
1a00231e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a002322:	bf00      	nop
1a002324:	1a0022ef 	.word	0x1a0022ef
1a002328:	1a0022fd 	.word	0x1a0022fd
1a00232c:	1a002301 	.word	0x1a002301
1a002330:	1a002301 	.word	0x1a002301
1a002334:	1a002301 	.word	0x1a002301
1a002338:	1a002301 	.word	0x1a002301
1a00233c:	1a002301 	.word	0x1a002301
1a002340:	1a002301 	.word	0x1a002301
1a002344:	1a002301 	.word	0x1a002301
1a002348:	1a002301 	.word	0x1a002301
1a00234c:	1a002301 	.word	0x1a002301
1a002350:	1a002301 	.word	0x1a002301
1a002354:	1a002301 	.word	0x1a002301
1a002358:	1a002301 	.word	0x1a002301
1a00235c:	1a002301 	.word	0x1a002301
1a002360:	1a002301 	.word	0x1a002301
1a002364:	1a002301 	.word	0x1a002301
1a002368:	1a002301 	.word	0x1a002301
1a00236c:	1a002301 	.word	0x1a002301
1a002370:	1a002301 	.word	0x1a002301
1a002374:	1a002301 	.word	0x1a002301
1a002378:	1a002301 	.word	0x1a002301
1a00237c:	1a002301 	.word	0x1a002301
1a002380:	1a002301 	.word	0x1a002301
1a002384:	1a002301 	.word	0x1a002301
1a002388:	1a002301 	.word	0x1a002301
1a00238c:	1a002301 	.word	0x1a002301
1a002390:	1a002301 	.word	0x1a002301
1a002394:	1a002301 	.word	0x1a002301
1a002398:	1a002465 	.word	0x1a002465
1a00239c:	1a00246b 	.word	0x1a00246b
1a0023a0:	1a002301 	.word	0x1a002301
1a0023a4:	1a002301 	.word	0x1a002301
1a0023a8:	1a002301 	.word	0x1a002301
1a0023ac:	1a002301 	.word	0x1a002301
1a0023b0:	1a002301 	.word	0x1a002301
1a0023b4:	1a002301 	.word	0x1a002301
1a0023b8:	1a002301 	.word	0x1a002301
1a0023bc:	1a002301 	.word	0x1a002301
1a0023c0:	1a002471 	.word	0x1a002471
1a0023c4:	1a002301 	.word	0x1a002301
1a0023c8:	1a002301 	.word	0x1a002301
1a0023cc:	1a002477 	.word	0x1a002477
1a0023d0:	1a0024a1 	.word	0x1a0024a1
1a0023d4:	1a002301 	.word	0x1a002301
1a0023d8:	1a002301 	.word	0x1a002301
1a0023dc:	1a002301 	.word	0x1a002301
1a0023e0:	1a002301 	.word	0x1a002301
1a0023e4:	1a002301 	.word	0x1a002301
1a0023e8:	1a002301 	.word	0x1a002301
1a0023ec:	1a002301 	.word	0x1a002301
1a0023f0:	1a002301 	.word	0x1a002301
1a0023f4:	1a0024af 	.word	0x1a0024af
1a0023f8:	1a0024d3 	.word	0x1a0024d3
1a0023fc:	1a0024eb 	.word	0x1a0024eb
1a002400:	1a002509 	.word	0x1a002509
1a002404:	1a002549 	.word	0x1a002549
1a002408:	1a002301 	.word	0x1a002301
1a00240c:	1a002301 	.word	0x1a002301
1a002410:	1a00254f 	.word	0x1a00254f
1a002414:	1a002301 	.word	0x1a002301
1a002418:	1a002301 	.word	0x1a002301
1a00241c:	1a002301 	.word	0x1a002301
1a002420:	1a002301 	.word	0x1a002301
1a002424:	1a002301 	.word	0x1a002301
1a002428:	1a002301 	.word	0x1a002301
1a00242c:	1a002301 	.word	0x1a002301
1a002430:	1a002301 	.word	0x1a002301
1a002434:	1a002301 	.word	0x1a002301
1a002438:	1a002301 	.word	0x1a002301
1a00243c:	1a002301 	.word	0x1a002301
1a002440:	1a002301 	.word	0x1a002301
1a002444:	1a002555 	.word	0x1a002555
1a002448:	1a002301 	.word	0x1a002301
1a00244c:	1a002301 	.word	0x1a002301
1a002450:	1a002301 	.word	0x1a002301
1a002454:	1a002301 	.word	0x1a002301
1a002458:	1a002301 	.word	0x1a002301
1a00245c:	1a002301 	.word	0x1a002301
1a002460:	1a00255b 	.word	0x1a00255b
					menuAlarmUpdate(button);
1a002464:	f7fe ff16 	bl	1a001294 <menuAlarmUpdate>
					break;
1a002468:	e74a      	b.n	1a002300 <vButtonMng+0x20>
					menuViewUpdate(button);
1a00246a:	f7fe ff67 	bl	1a00133c <menuViewUpdate>
					break;
1a00246e:	e747      	b.n	1a002300 <vButtonMng+0x20>
					menuSensUpdate(button);
1a002470:	f7ff fec0 	bl	1a0021f4 <menuSensUpdate>
					break;
1a002474:	e744      	b.n	1a002300 <vButtonMng+0x20>
					if(button == RIGHT)
1a002476:	2803      	cmp	r0, #3
1a002478:	d006      	beq.n	1a002488 <vButtonMng+0x1a8>
					if(button == LEFT)
1a00247a:	2c00      	cmp	r4, #0
1a00247c:	f47f af40 	bne.w	1a002300 <vButtonMng+0x20>
						systemMode = NORMAL;
1a002480:	4b37      	ldr	r3, [pc, #220]	; (1a002560 <vButtonMng+0x280>)
1a002482:	2201      	movs	r2, #1
1a002484:	701a      	strb	r2, [r3, #0]
1a002486:	e73b      	b.n	1a002300 <vButtonMng+0x20>
						systemMode = ALTA_EJE;
1a002488:	4b35      	ldr	r3, [pc, #212]	; (1a002560 <vButtonMng+0x280>)
1a00248a:	2236      	movs	r2, #54	; 0x36
1a00248c:	701a      	strb	r2, [r3, #0]
						SensorPrueba = un_buffer;
1a00248e:	ad03      	add	r5, sp, #12
1a002490:	4e34      	ldr	r6, [pc, #208]	; (1a002564 <vButtonMng+0x284>)
1a002492:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
1a002494:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1a002496:	6833      	ldr	r3, [r6, #0]
1a002498:	602b      	str	r3, [r5, #0]
						menuEjeInit();
1a00249a:	f7ff fa3f 	bl	1a00191c <menuEjeInit>
1a00249e:	e7ec      	b.n	1a00247a <vButtonMng+0x19a>
					if(button == LEFT)
1a0024a0:	2800      	cmp	r0, #0
1a0024a2:	f47f af2d 	bne.w	1a002300 <vButtonMng+0x20>
						systemMode = NORMAL;
1a0024a6:	4b2e      	ldr	r3, [pc, #184]	; (1a002560 <vButtonMng+0x280>)
1a0024a8:	2201      	movs	r2, #1
1a0024aa:	701a      	strb	r2, [r3, #0]
1a0024ac:	e728      	b.n	1a002300 <vButtonMng+0x20>
					if(button == RIGHT)
1a0024ae:	2803      	cmp	r0, #3
1a0024b0:	d006      	beq.n	1a0024c0 <vButtonMng+0x1e0>
					if(button == LEFT)
1a0024b2:	2c00      	cmp	r4, #0
1a0024b4:	f47f af24 	bne.w	1a002300 <vButtonMng+0x20>
						systemMode = MAIN_MENU;
1a0024b8:	4b29      	ldr	r3, [pc, #164]	; (1a002560 <vButtonMng+0x280>)
1a0024ba:	2202      	movs	r2, #2
1a0024bc:	701a      	strb	r2, [r3, #0]
1a0024be:	e71f      	b.n	1a002300 <vButtonMng+0x20>
						systemMode = ALTA_EJE;
1a0024c0:	4b27      	ldr	r3, [pc, #156]	; (1a002560 <vButtonMng+0x280>)
1a0024c2:	2236      	movs	r2, #54	; 0x36
1a0024c4:	701a      	strb	r2, [r3, #0]
						SensorPrueba = altaUpdate(); //ToDo: manejo de error
1a0024c6:	a803      	add	r0, sp, #12
1a0024c8:	f7fe fe7c 	bl	1a0011c4 <altaUpdate>
						menuEjeInit();
1a0024cc:	f7ff fa26 	bl	1a00191c <menuEjeInit>
1a0024d0:	e7ef      	b.n	1a0024b2 <vButtonMng+0x1d2>
					SensorPrueba.eje = menuEjeUpdate(button);
1a0024d2:	f7fe ff3b 	bl	1a00134c <menuEjeUpdate>
1a0024d6:	9006      	str	r0, [sp, #24]
					if(button == RIGHT)
1a0024d8:	2c03      	cmp	r4, #3
1a0024da:	f47f af11 	bne.w	1a002300 <vButtonMng+0x20>
						systemMode = ALTA_POS;
1a0024de:	4b20      	ldr	r3, [pc, #128]	; (1a002560 <vButtonMng+0x280>)
1a0024e0:	2237      	movs	r2, #55	; 0x37
1a0024e2:	701a      	strb	r2, [r3, #0]
						menuPosInit();
1a0024e4:	f7ff fa56 	bl	1a001994 <menuPosInit>
1a0024e8:	e70a      	b.n	1a002300 <vButtonMng+0x20>
					SensorPrueba.posicion = menuPosUpdate(button);
1a0024ea:	f7fe ff73 	bl	1a0013d4 <menuPosUpdate>
1a0024ee:	9007      	str	r0, [sp, #28]
					if(SensorPrueba.posicion != -1)
1a0024f0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0024f4:	f43f af04 	beq.w	1a002300 <vButtonMng+0x20>
						systemMode = ALTA_CONF;
1a0024f8:	4b19      	ldr	r3, [pc, #100]	; (1a002560 <vButtonMng+0x280>)
1a0024fa:	2238      	movs	r2, #56	; 0x38
1a0024fc:	701a      	strb	r2, [r3, #0]
						menuConfInit(SensorPrueba.eje, SensorPrueba.posicion);
1a0024fe:	4601      	mov	r1, r0
1a002500:	9806      	ldr	r0, [sp, #24]
1a002502:	f7ff fa7f 	bl	1a001a04 <menuConfInit>
1a002506:	e6fb      	b.n	1a002300 <vButtonMng+0x20>
					if(button == RIGHT)
1a002508:	2803      	cmp	r0, #3
1a00250a:	d006      	beq.n	1a00251a <vButtonMng+0x23a>
					if(button == LEFT)
1a00250c:	2c00      	cmp	r4, #0
1a00250e:	f47f aef7 	bne.w	1a002300 <vButtonMng+0x20>
						systemMode = NORMAL;
1a002512:	4b13      	ldr	r3, [pc, #76]	; (1a002560 <vButtonMng+0x280>)
1a002514:	2201      	movs	r2, #1
1a002516:	701a      	strb	r2, [r3, #0]
1a002518:	e6f2      	b.n	1a002300 <vButtonMng+0x20>
						int aux = (SensorPrueba.eje - 1)*6 + SensorPrueba.posicion-1;
1a00251a:	9b06      	ldr	r3, [sp, #24]
1a00251c:	3b01      	subs	r3, #1
1a00251e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
1a002522:	005a      	lsls	r2, r3, #1
1a002524:	9d07      	ldr	r5, [sp, #28]
1a002526:	4415      	add	r5, r2
						if(Board_EEPROM_recSensor(aux,SensorPrueba)!=0)
1a002528:	ab08      	add	r3, sp, #32
1a00252a:	e913 0003 	ldmdb	r3, {r0, r1}
1a00252e:	e88d 0003 	stmia.w	sp, {r0, r1}
1a002532:	ab03      	add	r3, sp, #12
1a002534:	cb0e      	ldmia	r3, {r1, r2, r3}
1a002536:	1e68      	subs	r0, r5, #1
1a002538:	f7fd fee2 	bl	1a000300 <Board_EEPROM_recSensor>
1a00253c:	2800      	cmp	r0, #0
1a00253e:	d1e5      	bne.n	1a00250c <vButtonMng+0x22c>
							systemMode = NORMAL;
1a002540:	4b07      	ldr	r3, [pc, #28]	; (1a002560 <vButtonMng+0x280>)
1a002542:	2201      	movs	r2, #1
1a002544:	701a      	strb	r2, [r3, #0]
1a002546:	e7e1      	b.n	1a00250c <vButtonMng+0x22c>
					menuViewUpdate(button);
1a002548:	f7fe fef8 	bl	1a00133c <menuViewUpdate>
					break;
1a00254c:	e6d8      	b.n	1a002300 <vButtonMng+0x20>
					menuROMupdate1(button);
1a00254e:	f7ff fe03 	bl	1a002158 <menuROMupdate1>
					break;
1a002552:	e6d5      	b.n	1a002300 <vButtonMng+0x20>
					menuROMupdate(button);
1a002554:	f7ff fb86 	bl	1a001c64 <menuROMupdate>
					break;
1a002558:	e6d2      	b.n	1a002300 <vButtonMng+0x20>
					menuLoopUpdate(button);
1a00255a:	f7fe ff97 	bl	1a00148c <menuLoopUpdate>
					break;
1a00255e:	e6cf      	b.n	1a002300 <vButtonMng+0x20>
1a002560:	100000c8 	.word	0x100000c8
1a002564:	10004f90 	.word	0x10004f90

1a002568 <OWinit>:
	int * H_DWT_DEMCR	 = (int *)0xE000EDFC;
	int * H_DWT_CTRL	 = (int *)0xE0001000;

	static OWbus_t bus;
	static OWbus_t* punt = &bus;
	OneWireStruct = punt;//------------------------SACAR
1a002568:	4b29      	ldr	r3, [pc, #164]	; (1a002610 <OWinit+0xa8>)
1a00256a:	681a      	ldr	r2, [r3, #0]
1a00256c:	4b29      	ldr	r3, [pc, #164]	; (1a002614 <OWinit+0xac>)
1a00256e:	601a      	str	r2, [r3, #0]

	bus.OWgpio = GPIO_OW;
1a002570:	4b29      	ldr	r3, [pc, #164]	; (1a002618 <OWinit+0xb0>)
1a002572:	7018      	strb	r0, [r3, #0]
	// Look up table GPIO/ port,pin
	switch(GPIO_OW)
1a002574:	3810      	subs	r0, #16
1a002576:	2810      	cmp	r0, #16
1a002578:	d846      	bhi.n	1a002608 <OWinit+0xa0>
1a00257a:	e8df f000 	tbb	[pc, r0]
1a00257e:	4534      	.short	0x4534
1a002580:	45454545 	.word	0x45454545
1a002584:	45454545 	.word	0x45454545
1a002588:	3f454545 	.word	0x3f454545
1a00258c:	3945      	.short	0x3945
1a00258e:	09          	.byte	0x09
1a00258f:	00          	.byte	0x00
		{
		case GPIO_0:
			bus.OWport = 3;
1a002590:	4b21      	ldr	r3, [pc, #132]	; (1a002618 <OWinit+0xb0>)
1a002592:	2203      	movs	r2, #3
1a002594:	605a      	str	r2, [r3, #4]
			bus.OWpin = 0;
1a002596:	2200      	movs	r2, #0
1a002598:	609a      	str	r2, [r3, #8]
{
1a00259a:	b410      	push	{r4}
			punt = NULL;
			return (punt);
		}

	 // seteo de modo de pin oneWire
	Chip_SCU_PinMux (bus.OWport,bus.OWpin,SCU_MODE_INACT | SCU_MODE_ZIF_DIS, SCU_MODE_FUNC0 );
1a00259c:	4a1e      	ldr	r2, [pc, #120]	; (1a002618 <OWinit+0xb0>)
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00259e:	7911      	ldrb	r1, [r2, #4]
1a0025a0:	7a13      	ldrb	r3, [r2, #8]
1a0025a2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0025a6:	491d      	ldr	r1, [pc, #116]	; (1a00261c <OWinit+0xb4>)
1a0025a8:	2090      	movs	r0, #144	; 0x90
1a0025aa:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0025ae:	7913      	ldrb	r3, [r2, #4]
1a0025b0:	481b      	ldr	r0, [pc, #108]	; (1a002620 <OWinit+0xb8>)
1a0025b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0025b6:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
1a0025ba:	7a14      	ldrb	r4, [r2, #8]
1a0025bc:	2201      	movs	r2, #1
1a0025be:	40a2      	lsls	r2, r4
1a0025c0:	ea21 0202 	bic.w	r2, r1, r2
1a0025c4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, bus.OWport, bus.OWpin);
	// bit24[TRCENA]   = habilita todos los DWT
	*H_DWT_DEMCR |= 1<<24;
1a0025c8:	4a16      	ldr	r2, [pc, #88]	; (1a002624 <OWinit+0xbc>)
1a0025ca:	6813      	ldr	r3, [r2, #0]
1a0025cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
1a0025d0:	6013      	str	r3, [r2, #0]
	// bit0[CYCCNTENA] =  enable CYCCNT
	*H_DWT_CTRL |= 1;
1a0025d2:	4a15      	ldr	r2, [pc, #84]	; (1a002628 <OWinit+0xc0>)
1a0025d4:	6813      	ldr	r3, [r2, #0]
1a0025d6:	f043 0301 	orr.w	r3, r3, #1
1a0025da:	6013      	str	r3, [r2, #0]
	return (punt);
1a0025dc:	4b0c      	ldr	r3, [pc, #48]	; (1a002610 <OWinit+0xa8>)
1a0025de:	6818      	ldr	r0, [r3, #0]
}
1a0025e0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0025e4:	4770      	bx	lr
			bus.OWport = 3;
1a0025e6:	4b0c      	ldr	r3, [pc, #48]	; (1a002618 <OWinit+0xb0>)
1a0025e8:	2203      	movs	r2, #3
1a0025ea:	605a      	str	r2, [r3, #4]
			bus.OWpin = 3;
1a0025ec:	609a      	str	r2, [r3, #8]
			break;
1a0025ee:	e7d4      	b.n	1a00259a <OWinit+0x32>
			bus.OWport = 3;
1a0025f0:	4b09      	ldr	r3, [pc, #36]	; (1a002618 <OWinit+0xb0>)
1a0025f2:	2203      	movs	r2, #3
1a0025f4:	605a      	str	r2, [r3, #4]
			bus.OWpin = 4;
1a0025f6:	2204      	movs	r2, #4
1a0025f8:	609a      	str	r2, [r3, #8]
			break;
1a0025fa:	e7ce      	b.n	1a00259a <OWinit+0x32>
			bus.OWport = 3;
1a0025fc:	4b06      	ldr	r3, [pc, #24]	; (1a002618 <OWinit+0xb0>)
1a0025fe:	2203      	movs	r2, #3
1a002600:	605a      	str	r2, [r3, #4]
			bus.OWpin = 6;
1a002602:	2206      	movs	r2, #6
1a002604:	609a      	str	r2, [r3, #8]
			break;
1a002606:	e7c8      	b.n	1a00259a <OWinit+0x32>
			punt = NULL;
1a002608:	2000      	movs	r0, #0
1a00260a:	4b01      	ldr	r3, [pc, #4]	; (1a002610 <OWinit+0xa8>)
1a00260c:	6018      	str	r0, [r3, #0]
}
1a00260e:	4770      	bx	lr
1a002610:	10000004 	.word	0x10000004
1a002614:	10004c28 	.word	0x10004c28
1a002618:	100000cc 	.word	0x100000cc
1a00261c:	40086000 	.word	0x40086000
1a002620:	400f4000 	.word	0x400f4000
1a002624:	e000edfc 	.word	0xe000edfc
1a002628:	e0001000 	.word	0xe0001000

1a00262c <OWinit2>:
	int * H_DWT_DEMCR	 = (int *)0xE000EDFC;
	int * H_DWT_CTRL	 = (int *)0xE0001000;

	static OWbus_t bus;
	static OWbus_t* punt = &bus;
	OneWireStruct2 = punt;//------------------------SACAR
1a00262c:	4b29      	ldr	r3, [pc, #164]	; (1a0026d4 <OWinit2+0xa8>)
1a00262e:	681a      	ldr	r2, [r3, #0]
1a002630:	4b29      	ldr	r3, [pc, #164]	; (1a0026d8 <OWinit2+0xac>)
1a002632:	601a      	str	r2, [r3, #0]

	bus.OWgpio = GPIO_OW;
1a002634:	4b29      	ldr	r3, [pc, #164]	; (1a0026dc <OWinit2+0xb0>)
1a002636:	7018      	strb	r0, [r3, #0]
	// Look up table GPIO/ port,pin
	switch(GPIO_OW)
1a002638:	3810      	subs	r0, #16
1a00263a:	2810      	cmp	r0, #16
1a00263c:	d846      	bhi.n	1a0026cc <OWinit2+0xa0>
1a00263e:	e8df f000 	tbb	[pc, r0]
1a002642:	4534      	.short	0x4534
1a002644:	45454545 	.word	0x45454545
1a002648:	45454545 	.word	0x45454545
1a00264c:	3f454545 	.word	0x3f454545
1a002650:	3945      	.short	0x3945
1a002652:	09          	.byte	0x09
1a002653:	00          	.byte	0x00
		{
		case GPIO_0:
			bus.OWport = 3;
1a002654:	4b21      	ldr	r3, [pc, #132]	; (1a0026dc <OWinit2+0xb0>)
1a002656:	2203      	movs	r2, #3
1a002658:	605a      	str	r2, [r3, #4]
			bus.OWpin = 0;
1a00265a:	2200      	movs	r2, #0
1a00265c:	609a      	str	r2, [r3, #8]
{
1a00265e:	b410      	push	{r4}
			punt = NULL;
			return (punt);
		}

	 // seteo de modo de pin oneWire
	Chip_SCU_PinMux (bus.OWport,bus.OWpin,SCU_MODE_INACT | SCU_MODE_ZIF_DIS, SCU_MODE_FUNC0 );
1a002660:	4a1e      	ldr	r2, [pc, #120]	; (1a0026dc <OWinit2+0xb0>)
1a002662:	7911      	ldrb	r1, [r2, #4]
1a002664:	7a13      	ldrb	r3, [r2, #8]
1a002666:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00266a:	491d      	ldr	r1, [pc, #116]	; (1a0026e0 <OWinit2+0xb4>)
1a00266c:	2090      	movs	r0, #144	; 0x90
1a00266e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
1a002672:	7913      	ldrb	r3, [r2, #4]
1a002674:	481b      	ldr	r0, [pc, #108]	; (1a0026e4 <OWinit2+0xb8>)
1a002676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00267a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
1a00267e:	7a14      	ldrb	r4, [r2, #8]
1a002680:	2201      	movs	r2, #1
1a002682:	40a2      	lsls	r2, r4
1a002684:	ea21 0202 	bic.w	r2, r1, r2
1a002688:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, bus.OWport, bus.OWpin);
	// bit24[TRCENA]   = habilita todos los DWT
	*H_DWT_DEMCR |= 1<<24;
1a00268c:	4a16      	ldr	r2, [pc, #88]	; (1a0026e8 <OWinit2+0xbc>)
1a00268e:	6813      	ldr	r3, [r2, #0]
1a002690:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
1a002694:	6013      	str	r3, [r2, #0]
	// bit0[CYCCNTENA] =  enable CYCCNT
	*H_DWT_CTRL |= 1;
1a002696:	4a15      	ldr	r2, [pc, #84]	; (1a0026ec <OWinit2+0xc0>)
1a002698:	6813      	ldr	r3, [r2, #0]
1a00269a:	f043 0301 	orr.w	r3, r3, #1
1a00269e:	6013      	str	r3, [r2, #0]
	return (punt);
1a0026a0:	4b0c      	ldr	r3, [pc, #48]	; (1a0026d4 <OWinit2+0xa8>)
1a0026a2:	6818      	ldr	r0, [r3, #0]
}
1a0026a4:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0026a8:	4770      	bx	lr
			bus.OWport = 3;
1a0026aa:	4b0c      	ldr	r3, [pc, #48]	; (1a0026dc <OWinit2+0xb0>)
1a0026ac:	2203      	movs	r2, #3
1a0026ae:	605a      	str	r2, [r3, #4]
			bus.OWpin = 3;
1a0026b0:	609a      	str	r2, [r3, #8]
			break;
1a0026b2:	e7d4      	b.n	1a00265e <OWinit2+0x32>
			bus.OWport = 3;
1a0026b4:	4b09      	ldr	r3, [pc, #36]	; (1a0026dc <OWinit2+0xb0>)
1a0026b6:	2203      	movs	r2, #3
1a0026b8:	605a      	str	r2, [r3, #4]
			bus.OWpin = 4;
1a0026ba:	2204      	movs	r2, #4
1a0026bc:	609a      	str	r2, [r3, #8]
			break;
1a0026be:	e7ce      	b.n	1a00265e <OWinit2+0x32>
			bus.OWport = 3;
1a0026c0:	4b06      	ldr	r3, [pc, #24]	; (1a0026dc <OWinit2+0xb0>)
1a0026c2:	2203      	movs	r2, #3
1a0026c4:	605a      	str	r2, [r3, #4]
			bus.OWpin = 6;
1a0026c6:	2206      	movs	r2, #6
1a0026c8:	609a      	str	r2, [r3, #8]
			break;
1a0026ca:	e7c8      	b.n	1a00265e <OWinit2+0x32>
			punt = NULL;
1a0026cc:	2000      	movs	r0, #0
1a0026ce:	4b01      	ldr	r3, [pc, #4]	; (1a0026d4 <OWinit2+0xa8>)
1a0026d0:	6018      	str	r0, [r3, #0]
}
1a0026d2:	4770      	bx	lr
1a0026d4:	10000008 	.word	0x10000008
1a0026d8:	10004c2c 	.word	0x10004c2c
1a0026dc:	100000e4 	.word	0x100000e4
1a0026e0:	40086000 	.word	0x40086000
1a0026e4:	400f4000 	.word	0x400f4000
1a0026e8:	e000edfc 	.word	0xe000edfc
1a0026ec:	e0001000 	.word	0xe0001000

1a0026f0 <OWdelay_uS>:
void OWdelay_uS(unsigned t)
{
	static volatile int * H_DWT_CYCCNT	 = (int *)0xE0001004;

	// carga el contador de ciclos en 0
	*H_DWT_CYCCNT = 0;
1a0026f0:	4b07      	ldr	r3, [pc, #28]	; (1a002710 <OWdelay_uS+0x20>)
1a0026f2:	2200      	movs	r2, #0
1a0026f4:	601a      	str	r2, [r3, #0]
	// carga los uS a esperar
	t *= (SystemCoreClock/1000000);
1a0026f6:	4b07      	ldr	r3, [pc, #28]	; (1a002714 <OWdelay_uS+0x24>)
1a0026f8:	681b      	ldr	r3, [r3, #0]
1a0026fa:	4a07      	ldr	r2, [pc, #28]	; (1a002718 <OWdelay_uS+0x28>)
1a0026fc:	fba2 2303 	umull	r2, r3, r2, r3
1a002700:	0c9b      	lsrs	r3, r3, #18
1a002702:	fb00 f003 	mul.w	r0, r0, r3
	// chequea si el contador alcanzó la cuenta
	while(*H_DWT_CYCCNT < t);
1a002706:	4b02      	ldr	r3, [pc, #8]	; (1a002710 <OWdelay_uS+0x20>)
1a002708:	681b      	ldr	r3, [r3, #0]
1a00270a:	4283      	cmp	r3, r0
1a00270c:	d3fb      	bcc.n	1a002706 <OWdelay_uS+0x16>
}
1a00270e:	4770      	bx	lr
1a002710:	e0001004 	.word	0xe0001004
1a002714:	10004fe4 	.word	0x10004fe4
1a002718:	431bde83 	.word	0x431bde83

1a00271c <OWreadBit>:
* Que recibe: (puntero a OWbus_t) estructura que indentifica el bus a leer.
* Que devuelve: el bit leido.
* Variables externas que modifca: N/A
*============================================================================*/
char OWreadBit(OWbus_t* OneWireStruct)
{
1a00271c:	b570      	push	{r4, r5, r6, lr}
1a00271e:	4605      	mov	r5, r0
	pGPIO->DIR[port] |= 1UL << pin;
1a002720:	7903      	ldrb	r3, [r0, #4]
1a002722:	4c19      	ldr	r4, [pc, #100]	; (1a002788 <OWreadBit+0x6c>)
1a002724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002728:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00272c:	7a01      	ldrb	r1, [r0, #8]
1a00272e:	2601      	movs	r6, #1
1a002730:	fa06 f101 	lsl.w	r1, r6, r1
1a002734:	430a      	orrs	r2, r1
1a002736:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	pGPIO->CLR[port] = (1 << pin);
1a00273a:	7903      	ldrb	r3, [r0, #4]
1a00273c:	7a02      	ldrb	r2, [r0, #8]
1a00273e:	fa06 f202 	lsl.w	r2, r6, r2
1a002742:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
1a002746:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	char bit = 0;

	OWsetOut(OneWireStruct->OWport, OneWireStruct->OWpin);
	OWlow(OneWireStruct->OWport, OneWireStruct->OWpin);
	OWdelay_uS(3);
1a00274a:	2003      	movs	r0, #3
1a00274c:	f7ff ffd0 	bl	1a0026f0 <OWdelay_uS>
	pGPIO->DIR[port] &= ~(1UL << pin);
1a002750:	792b      	ldrb	r3, [r5, #4]
1a002752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002756:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00275a:	7a29      	ldrb	r1, [r5, #8]
1a00275c:	408e      	lsls	r6, r1
1a00275e:	ea22 0606 	bic.w	r6, r2, r6
1a002762:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
	OWsetIn(OneWireStruct->OWport, OneWireStruct->OWpin);
	OWdelay_uS(12);
1a002766:	200c      	movs	r0, #12
1a002768:	f7ff ffc2 	bl	1a0026f0 <OWdelay_uS>
	return (bool) pGPIO->B[port][pin];
1a00276c:	792a      	ldrb	r2, [r5, #4]
1a00276e:	7a2b      	ldrb	r3, [r5, #8]
1a002770:	eb04 1442 	add.w	r4, r4, r2, lsl #5
1a002774:	5ce3      	ldrb	r3, [r4, r3]
	if(OWread(OneWireStruct->OWport, OneWireStruct->OWpin))
1a002776:	b92b      	cbnz	r3, 1a002784 <OWreadBit+0x68>
	char bit = 0;
1a002778:	2400      	movs	r4, #0
		bit = 1;
	OWdelay_uS(55);
1a00277a:	2037      	movs	r0, #55	; 0x37
1a00277c:	f7ff ffb8 	bl	1a0026f0 <OWdelay_uS>
	// Return bit value
	return bit;
}
1a002780:	4620      	mov	r0, r4
1a002782:	bd70      	pop	{r4, r5, r6, pc}
		bit = 1;
1a002784:	2401      	movs	r4, #1
1a002786:	e7f8      	b.n	1a00277a <OWreadBit+0x5e>
1a002788:	400f4000 	.word	0x400f4000

1a00278c <OWwriteBit>:
* 			  (char) valor del bit a escribir.
* Que devuelve: N/A
* Variables externas que modifca: N/A
*============================================================================*/
void OWwriteBit(OWbus_t* OneWireStruct, char bit)
{
1a00278c:	b570      	push	{r4, r5, r6, lr}
1a00278e:	4604      	mov	r4, r0
	if (bit)
1a002790:	b371      	cbz	r1, 1a0027f0 <OWwriteBit+0x64>
	pGPIO->CLR[port] = (1 << pin);
1a002792:	7903      	ldrb	r3, [r0, #4]
1a002794:	7a02      	ldrb	r2, [r0, #8]
1a002796:	2601      	movs	r6, #1
1a002798:	fa06 f202 	lsl.w	r2, r6, r2
1a00279c:	4d2c      	ldr	r5, [pc, #176]	; (1a002850 <OWwriteBit+0xc4>)
1a00279e:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
1a0027a2:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
	pGPIO->DIR[port] |= 1UL << pin;
1a0027a6:	7903      	ldrb	r3, [r0, #4]
1a0027a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0027ac:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
1a0027b0:	7a01      	ldrb	r1, [r0, #8]
1a0027b2:	fa06 f101 	lsl.w	r1, r6, r1
1a0027b6:	430a      	orrs	r2, r1
1a0027b8:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
	{
		OWlow(OneWireStruct->OWport, OneWireStruct->OWpin);
		OWsetOut(OneWireStruct->OWport, OneWireStruct->OWpin);
		OWdelay_uS(3);
1a0027bc:	2003      	movs	r0, #3
1a0027be:	f7ff ff97 	bl	1a0026f0 <OWdelay_uS>
	pGPIO->SET[port] = (1 << pin);
1a0027c2:	7923      	ldrb	r3, [r4, #4]
1a0027c4:	7a22      	ldrb	r2, [r4, #8]
1a0027c6:	fa06 f202 	lsl.w	r2, r6, r2
1a0027ca:	f503 6308 	add.w	r3, r3, #2176	; 0x880
1a0027ce:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0027d2:	7923      	ldrb	r3, [r4, #4]
1a0027d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0027d8:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
1a0027dc:	7a21      	ldrb	r1, [r4, #8]
1a0027de:	408e      	lsls	r6, r1
1a0027e0:	ea22 0606 	bic.w	r6, r2, r6
1a0027e4:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
		OWhigh(OneWireStruct->OWport, OneWireStruct->OWpin);
		OWsetIn(OneWireStruct->OWport, OneWireStruct->OWpin);
		OWdelay_uS(60);
1a0027e8:	203c      	movs	r0, #60	; 0x3c
1a0027ea:	f7ff ff81 	bl	1a0026f0 <OWdelay_uS>
		OWhigh(OneWireStruct->OWport, OneWireStruct->OWpin);
		OWsetIn(OneWireStruct->OWport, OneWireStruct->OWpin);
		OWdelay_uS(10);

	}
}
1a0027ee:	bd70      	pop	{r4, r5, r6, pc}
	pGPIO->CLR[port] = (1 << pin);
1a0027f0:	7903      	ldrb	r3, [r0, #4]
1a0027f2:	7a02      	ldrb	r2, [r0, #8]
1a0027f4:	2601      	movs	r6, #1
1a0027f6:	fa06 f202 	lsl.w	r2, r6, r2
1a0027fa:	4d15      	ldr	r5, [pc, #84]	; (1a002850 <OWwriteBit+0xc4>)
1a0027fc:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
1a002800:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
	pGPIO->DIR[port] |= 1UL << pin;
1a002804:	7903      	ldrb	r3, [r0, #4]
1a002806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00280a:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
1a00280e:	7a01      	ldrb	r1, [r0, #8]
1a002810:	fa06 f101 	lsl.w	r1, r6, r1
1a002814:	430a      	orrs	r2, r1
1a002816:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
		OWdelay_uS(60);
1a00281a:	203c      	movs	r0, #60	; 0x3c
1a00281c:	f7ff ff68 	bl	1a0026f0 <OWdelay_uS>
	pGPIO->SET[port] = (1 << pin);
1a002820:	7923      	ldrb	r3, [r4, #4]
1a002822:	7a22      	ldrb	r2, [r4, #8]
1a002824:	fa06 f202 	lsl.w	r2, r6, r2
1a002828:	f503 6308 	add.w	r3, r3, #2176	; 0x880
1a00282c:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a002830:	7923      	ldrb	r3, [r4, #4]
1a002832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002836:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
1a00283a:	7a21      	ldrb	r1, [r4, #8]
1a00283c:	408e      	lsls	r6, r1
1a00283e:	ea22 0606 	bic.w	r6, r2, r6
1a002842:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
		OWdelay_uS(10);
1a002846:	200a      	movs	r0, #10
1a002848:	f7ff ff52 	bl	1a0026f0 <OWdelay_uS>
}
1a00284c:	e7cf      	b.n	1a0027ee <OWwriteBit+0x62>
1a00284e:	bf00      	nop
1a002850:	400f4000 	.word	0x400f4000

1a002854 <disableInterrupts>:
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1a002854:	2301      	movs	r3, #1
1a002856:	f383 8810 	msr	PRIMASK, r3
* Variables externas que modifca: N/A
*============================================================================*/
void disableInterrupts(void)
{
	__set_PRIMASK(1);
}
1a00285a:	4770      	bx	lr

1a00285c <enableInterrupts>:
1a00285c:	2300      	movs	r3, #0
1a00285e:	f383 8810 	msr	PRIMASK, r3
* Variables externas que modifca: N/A
*============================================================================*/
void enableInterrupts(void)
{
	__set_PRIMASK(0);
}
1a002862:	4770      	bx	lr

1a002864 <SMTB_LCD_Init>:
extern int windowStart;
extern int itemSelected;

bool_t printDig(uint8_t , uint8_t );

int SMTB_LCD_Init( void ){
1a002864:	b508      	push	{r3, lr}

   // Inicializar y configurar la plataforma

   //i2cInit( I2C0, 100000 ); // A prueba//////////////////////////////////////

   delay( LCD_STARTUP_WAIT_MS );   // Wait for stable power (some LCD need that)
1a002866:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a00286a:	2100      	movs	r1, #0
1a00286c:	f004 f8a0 	bl	1a0069b0 <delay>

   // Inicializar LCD de 16x2 (caracteres x lineas) con cada caracter de 5x8 pixeles
   lcdInit( 20, 4, 5, 8 );
1a002870:	2308      	movs	r3, #8
1a002872:	2205      	movs	r2, #5
1a002874:	2104      	movs	r1, #4
1a002876:	2014      	movs	r0, #20
1a002878:	f004 f914 	bl	1a006aa4 <lcdInit>
   //printf("col: %d , fil: %d",lcd.x, lcd.y );
   //debe descomentarse #define LCD_HD44780_I2C_PCF8574T en display_lcd_hd44780_gpios.h
   lcdCreateChar( SI, SupIzq );
1a00287c:	4913      	ldr	r1, [pc, #76]	; (1a0028cc <SMTB_LCD_Init+0x68>)
1a00287e:	2000      	movs	r0, #0
1a002880:	f004 f9d0 	bl	1a006c24 <lcdCreateChar>
   lcdCreateChar( Te, Techo );
1a002884:	4912      	ldr	r1, [pc, #72]	; (1a0028d0 <SMTB_LCD_Init+0x6c>)
1a002886:	2001      	movs	r0, #1
1a002888:	f004 f9cc 	bl	1a006c24 <lcdCreateChar>
   lcdCreateChar( SD, SupDer );
1a00288c:	4911      	ldr	r1, [pc, #68]	; (1a0028d4 <SMTB_LCD_Init+0x70>)
1a00288e:	2002      	movs	r0, #2
1a002890:	f004 f9c8 	bl	1a006c24 <lcdCreateChar>
   lcdCreateChar( II, InfIzq);
1a002894:	4910      	ldr	r1, [pc, #64]	; (1a0028d8 <SMTB_LCD_Init+0x74>)
1a002896:	2003      	movs	r0, #3
1a002898:	f004 f9c4 	bl	1a006c24 <lcdCreateChar>
   lcdCreateChar( Pi, Piso );
1a00289c:	490f      	ldr	r1, [pc, #60]	; (1a0028dc <SMTB_LCD_Init+0x78>)
1a00289e:	2004      	movs	r0, #4
1a0028a0:	f004 f9c0 	bl	1a006c24 <lcdCreateChar>
   lcdCreateChar( ID, InfDer );
1a0028a4:	490e      	ldr	r1, [pc, #56]	; (1a0028e0 <SMTB_LCD_Init+0x7c>)
1a0028a6:	2005      	movs	r0, #5
1a0028a8:	f004 f9bc 	bl	1a006c24 <lcdCreateChar>
   lcdCreateChar( EP, Entrepiso);
1a0028ac:	490d      	ldr	r1, [pc, #52]	; (1a0028e4 <SMTB_LCD_Init+0x80>)
1a0028ae:	2006      	movs	r0, #6
1a0028b0:	f004 f9b8 	bl	1a006c24 <lcdCreateChar>
   lcdCreateChar( Bl, Bloque );
1a0028b4:	490c      	ldr	r1, [pc, #48]	; (1a0028e8 <SMTB_LCD_Init+0x84>)
1a0028b6:	2007      	movs	r0, #7
1a0028b8:	f004 f9b4 	bl	1a006c24 <lcdCreateChar>

   lcdCursorSet( LCD_CURSOR_OFF ); // Apaga el cursor
1a0028bc:	2000      	movs	r0, #0
1a0028be:	f004 f99c 	bl	1a006bfa <lcdCursorSet>
   //lcdGoToXY( 0, 0 ); ///////////////////////////////////////////////////////////////////////
   lcdClear();                     // Borrar la pantalla
1a0028c2:	f004 f991 	bl	1a006be8 <lcdClear>
//   lcdSendStringRaw( "SMTB_Init" );
   //delay (2000);
   return 0;
}
1a0028c6:	2000      	movs	r0, #0
1a0028c8:	bd08      	pop	{r3, pc}
1a0028ca:	bf00      	nop
1a0028cc:	1a0087dc 	.word	0x1a0087dc
1a0028d0:	1a0087e4 	.word	0x1a0087e4
1a0028d4:	1a0087d4 	.word	0x1a0087d4
1a0028d8:	1a0085dc 	.word	0x1a0085dc
1a0028dc:	1a0085e4 	.word	0x1a0085e4
1a0028e0:	1a0085d4 	.word	0x1a0085d4
1a0028e4:	1a0085cc 	.word	0x1a0085cc
1a0028e8:	1a0085c4 	.word	0x1a0085c4

1a0028ec <printDig>:

 bool_t printDig(uint8_t dig, uint8_t pos)
 {
1a0028ec:	b538      	push	{r3, r4, r5, lr}
1a0028ee:	4605      	mov	r5, r0
1a0028f0:	460c      	mov	r4, r1
	 uint8_t fil;
	 uint8_t col;
	 if(pos==1)
1a0028f2:	2901      	cmp	r1, #1
1a0028f4:	d003      	beq.n	1a0028fe <printDig+0x12>
	 {
		 fil = 0;
		 col = 1;
		 lcdGoToXY( col, fil );
	 }
	 else if (pos==2)
1a0028f6:	2902      	cmp	r1, #2
1a0028f8:	d006      	beq.n	1a002908 <printDig+0x1c>
	 {
		 fil = 0;
		 col = 4;
		 lcdGoToXY( col, fil );
	 }
	 else return(FALSE);
1a0028fa:	2000      	movs	r0, #0
	 	 lcdSendStringRaw( " " );
	 	 lcdSendStringRaw( " " );
	 	 lcdData(ID);
	 	 break;
	 }
 }
1a0028fc:	bd38      	pop	{r3, r4, r5, pc}
		 lcdGoToXY( col, fil );
1a0028fe:	2100      	movs	r1, #0
1a002900:	2001      	movs	r0, #1
1a002902:	f004 f949 	bl	1a006b98 <lcdGoToXY>
1a002906:	e004      	b.n	1a002912 <printDig+0x26>
		 lcdGoToXY( col, fil );
1a002908:	2100      	movs	r1, #0
1a00290a:	2004      	movs	r0, #4
1a00290c:	f004 f944 	bl	1a006b98 <lcdGoToXY>
		 col = 4;
1a002910:	2404      	movs	r4, #4
	 switch(dig)
1a002912:	2d09      	cmp	r5, #9
1a002914:	d8f2      	bhi.n	1a0028fc <printDig+0x10>
1a002916:	e8df f005 	tbb	[pc, r5]
1a00291a:	1c05      	.short	0x1c05
1a00291c:	7a624b34 	.word	0x7a624b34
1a002920:	d7c0a891 	.word	0xd7c0a891
	 	 lcdData(SI);
1a002924:	2000      	movs	r0, #0
1a002926:	f004 f8a5 	bl	1a006a74 <lcdData>
	 	 lcdData(Te);
1a00292a:	2001      	movs	r0, #1
1a00292c:	f004 f8a2 	bl	1a006a74 <lcdData>
	 	 lcdData(SD);
1a002930:	2002      	movs	r0, #2
1a002932:	f004 f89f 	bl	1a006a74 <lcdData>
	 	 lcdGoToXY( col, fil );
1a002936:	2101      	movs	r1, #1
1a002938:	4620      	mov	r0, r4
1a00293a:	f004 f92d 	bl	1a006b98 <lcdGoToXY>
	 	 lcdData(II);
1a00293e:	2003      	movs	r0, #3
1a002940:	f004 f898 	bl	1a006a74 <lcdData>
	 	 lcdData(Pi);
1a002944:	2004      	movs	r0, #4
1a002946:	f004 f895 	bl	1a006a74 <lcdData>
	 	 lcdData(ID);
1a00294a:	2005      	movs	r0, #5
1a00294c:	f004 f892 	bl	1a006a74 <lcdData>
	 	 break;
1a002950:	e7d4      	b.n	1a0028fc <printDig+0x10>
		 lcdSendStringRaw( " " );
1a002952:	4d69      	ldr	r5, [pc, #420]	; (1a002af8 <printDig+0x20c>)
1a002954:	4628      	mov	r0, r5
1a002956:	f004 f95a 	bl	1a006c0e <lcdSendStringRaw>
		 lcdData(SI);
1a00295a:	2000      	movs	r0, #0
1a00295c:	f004 f88a 	bl	1a006a74 <lcdData>
		 lcdSendStringRaw( " " );
1a002960:	4628      	mov	r0, r5
1a002962:	f004 f954 	bl	1a006c0e <lcdSendStringRaw>
		 lcdGoToXY( col, fil );
1a002966:	2101      	movs	r1, #1
1a002968:	4620      	mov	r0, r4
1a00296a:	f004 f915 	bl	1a006b98 <lcdGoToXY>
		 lcdSendStringRaw( " " );
1a00296e:	4628      	mov	r0, r5
1a002970:	f004 f94d 	bl	1a006c0e <lcdSendStringRaw>
		 lcdData(ID);
1a002974:	2005      	movs	r0, #5
1a002976:	f004 f87d 	bl	1a006a74 <lcdData>
		 lcdSendStringRaw( " " );
1a00297a:	4628      	mov	r0, r5
1a00297c:	f004 f947 	bl	1a006c0e <lcdSendStringRaw>
		 break;
1a002980:	e7bc      	b.n	1a0028fc <printDig+0x10>
	 	 lcdData(EP);
1a002982:	2006      	movs	r0, #6
1a002984:	f004 f876 	bl	1a006a74 <lcdData>
	 	 lcdData(EP);
1a002988:	2006      	movs	r0, #6
1a00298a:	f004 f873 	bl	1a006a74 <lcdData>
	 	 lcdData(SD);
1a00298e:	2002      	movs	r0, #2
1a002990:	f004 f870 	bl	1a006a74 <lcdData>
	 	 lcdGoToXY( col, fil );
1a002994:	2101      	movs	r1, #1
1a002996:	4620      	mov	r0, r4
1a002998:	f004 f8fe 	bl	1a006b98 <lcdGoToXY>
	 	 lcdData(II);
1a00299c:	2003      	movs	r0, #3
1a00299e:	f004 f869 	bl	1a006a74 <lcdData>
	 	 lcdData(Pi);
1a0029a2:	2004      	movs	r0, #4
1a0029a4:	f004 f866 	bl	1a006a74 <lcdData>
	 	 lcdData(Pi);
1a0029a8:	2004      	movs	r0, #4
1a0029aa:	f004 f863 	bl	1a006a74 <lcdData>
	 	 break;
1a0029ae:	e7a5      	b.n	1a0028fc <printDig+0x10>
	 	 lcdData(EP);
1a0029b0:	2006      	movs	r0, #6
1a0029b2:	f004 f85f 	bl	1a006a74 <lcdData>
	 	 lcdData(EP);
1a0029b6:	2006      	movs	r0, #6
1a0029b8:	f004 f85c 	bl	1a006a74 <lcdData>
	 	 lcdData(SD);
1a0029bc:	2002      	movs	r0, #2
1a0029be:	f004 f859 	bl	1a006a74 <lcdData>
	 	 lcdGoToXY( col, fil );
1a0029c2:	2101      	movs	r1, #1
1a0029c4:	4620      	mov	r0, r4
1a0029c6:	f004 f8e7 	bl	1a006b98 <lcdGoToXY>
	 	 lcdData(Pi);
1a0029ca:	2004      	movs	r0, #4
1a0029cc:	f004 f852 	bl	1a006a74 <lcdData>
	 	 lcdData(Pi);
1a0029d0:	2004      	movs	r0, #4
1a0029d2:	f004 f84f 	bl	1a006a74 <lcdData>
	 	 lcdData(ID);
1a0029d6:	2005      	movs	r0, #5
1a0029d8:	f004 f84c 	bl	1a006a74 <lcdData>
	 	 break;
1a0029dc:	e78e      	b.n	1a0028fc <printDig+0x10>
	 	 lcdData(II);
1a0029de:	2003      	movs	r0, #3
1a0029e0:	f004 f848 	bl	1a006a74 <lcdData>
	 	 lcdData(Pi);
1a0029e4:	2004      	movs	r0, #4
1a0029e6:	f004 f845 	bl	1a006a74 <lcdData>
	 	 lcdData(Bl);
1a0029ea:	2007      	movs	r0, #7
1a0029ec:	f004 f842 	bl	1a006a74 <lcdData>
	 	 lcdGoToXY( col, fil );
1a0029f0:	2101      	movs	r1, #1
1a0029f2:	4620      	mov	r0, r4
1a0029f4:	f004 f8d0 	bl	1a006b98 <lcdGoToXY>
	 	 lcdSendStringRaw( " " );
1a0029f8:	4c3f      	ldr	r4, [pc, #252]	; (1a002af8 <printDig+0x20c>)
1a0029fa:	4620      	mov	r0, r4
1a0029fc:	f004 f907 	bl	1a006c0e <lcdSendStringRaw>
	 	 lcdSendStringRaw( " " );
1a002a00:	4620      	mov	r0, r4
1a002a02:	f004 f904 	bl	1a006c0e <lcdSendStringRaw>
	 	 lcdData(Bl);
1a002a06:	2007      	movs	r0, #7
1a002a08:	f004 f834 	bl	1a006a74 <lcdData>
	 	 break;
1a002a0c:	e776      	b.n	1a0028fc <printDig+0x10>
	 	 lcdData(Bl);
1a002a0e:	2007      	movs	r0, #7
1a002a10:	f004 f830 	bl	1a006a74 <lcdData>
	 	 lcdData(EP);
1a002a14:	2006      	movs	r0, #6
1a002a16:	f004 f82d 	bl	1a006a74 <lcdData>
	 	 lcdData(EP);
1a002a1a:	2006      	movs	r0, #6
1a002a1c:	f004 f82a 	bl	1a006a74 <lcdData>
	 	 lcdGoToXY( col, fil );
1a002a20:	2101      	movs	r1, #1
1a002a22:	4620      	mov	r0, r4
1a002a24:	f004 f8b8 	bl	1a006b98 <lcdGoToXY>
	 	 lcdData(Pi);
1a002a28:	2004      	movs	r0, #4
1a002a2a:	f004 f823 	bl	1a006a74 <lcdData>
	 	 lcdData(Pi);
1a002a2e:	2004      	movs	r0, #4
1a002a30:	f004 f820 	bl	1a006a74 <lcdData>
	 	 lcdData(ID);
1a002a34:	2005      	movs	r0, #5
1a002a36:	f004 f81d 	bl	1a006a74 <lcdData>
	 	 break;
1a002a3a:	e75f      	b.n	1a0028fc <printDig+0x10>
	 	 lcdData(SI);
1a002a3c:	2000      	movs	r0, #0
1a002a3e:	f004 f819 	bl	1a006a74 <lcdData>
	 	 lcdData(EP);
1a002a42:	2006      	movs	r0, #6
1a002a44:	f004 f816 	bl	1a006a74 <lcdData>
	 	 lcdData(EP);
1a002a48:	2006      	movs	r0, #6
1a002a4a:	f004 f813 	bl	1a006a74 <lcdData>
	 	 lcdGoToXY( col, fil );
1a002a4e:	2101      	movs	r1, #1
1a002a50:	4620      	mov	r0, r4
1a002a52:	f004 f8a1 	bl	1a006b98 <lcdGoToXY>
	 	 lcdData(II);
1a002a56:	2003      	movs	r0, #3
1a002a58:	f004 f80c 	bl	1a006a74 <lcdData>
	 	 lcdData(Pi);
1a002a5c:	2004      	movs	r0, #4
1a002a5e:	f004 f809 	bl	1a006a74 <lcdData>
	 	 lcdData(ID);
1a002a62:	2005      	movs	r0, #5
1a002a64:	f004 f806 	bl	1a006a74 <lcdData>
	 	 break;
1a002a68:	e748      	b.n	1a0028fc <printDig+0x10>
	  	 lcdData(Te);
1a002a6a:	2001      	movs	r0, #1
1a002a6c:	f004 f802 	bl	1a006a74 <lcdData>
	  	 lcdData(Te);
1a002a70:	2001      	movs	r0, #1
1a002a72:	f003 ffff 	bl	1a006a74 <lcdData>
	  	 lcdData(Bl);
1a002a76:	2007      	movs	r0, #7
1a002a78:	f003 fffc 	bl	1a006a74 <lcdData>
	  	 lcdGoToXY( col, fil );
1a002a7c:	2101      	movs	r1, #1
1a002a7e:	4620      	mov	r0, r4
1a002a80:	f004 f88a 	bl	1a006b98 <lcdGoToXY>
	  	 lcdSendStringRaw( " " );
1a002a84:	4c1c      	ldr	r4, [pc, #112]	; (1a002af8 <printDig+0x20c>)
1a002a86:	4620      	mov	r0, r4
1a002a88:	f004 f8c1 	bl	1a006c0e <lcdSendStringRaw>
	  	 lcdSendStringRaw( " " );
1a002a8c:	4620      	mov	r0, r4
1a002a8e:	f004 f8be 	bl	1a006c0e <lcdSendStringRaw>
	  	 lcdData(ID);
1a002a92:	2005      	movs	r0, #5
1a002a94:	f003 ffee 	bl	1a006a74 <lcdData>
	  	 break;
1a002a98:	e730      	b.n	1a0028fc <printDig+0x10>
	 	 lcdData(SI);
1a002a9a:	2000      	movs	r0, #0
1a002a9c:	f003 ffea 	bl	1a006a74 <lcdData>
	 	 lcdData(EP);
1a002aa0:	2006      	movs	r0, #6
1a002aa2:	f003 ffe7 	bl	1a006a74 <lcdData>
	 	 lcdData(SD);
1a002aa6:	2002      	movs	r0, #2
1a002aa8:	f003 ffe4 	bl	1a006a74 <lcdData>
	 	 lcdGoToXY( col, fil );
1a002aac:	2101      	movs	r1, #1
1a002aae:	4620      	mov	r0, r4
1a002ab0:	f004 f872 	bl	1a006b98 <lcdGoToXY>
	 	 lcdData(II);
1a002ab4:	2003      	movs	r0, #3
1a002ab6:	f003 ffdd 	bl	1a006a74 <lcdData>
	 	 lcdData(Pi);
1a002aba:	2004      	movs	r0, #4
1a002abc:	f003 ffda 	bl	1a006a74 <lcdData>
	 	 lcdData(ID);
1a002ac0:	2005      	movs	r0, #5
1a002ac2:	f003 ffd7 	bl	1a006a74 <lcdData>
	 	 break;
1a002ac6:	e719      	b.n	1a0028fc <printDig+0x10>
	 	 lcdData(SI);
1a002ac8:	2000      	movs	r0, #0
1a002aca:	f003 ffd3 	bl	1a006a74 <lcdData>
	 	 lcdData(EP);
1a002ace:	2006      	movs	r0, #6
1a002ad0:	f003 ffd0 	bl	1a006a74 <lcdData>
	 	 lcdData(SD);
1a002ad4:	2002      	movs	r0, #2
1a002ad6:	f003 ffcd 	bl	1a006a74 <lcdData>
	 	 lcdGoToXY( col, fil );
1a002ada:	2101      	movs	r1, #1
1a002adc:	4620      	mov	r0, r4
1a002ade:	f004 f85b 	bl	1a006b98 <lcdGoToXY>
	 	 lcdSendStringRaw( " " );
1a002ae2:	4c05      	ldr	r4, [pc, #20]	; (1a002af8 <printDig+0x20c>)
1a002ae4:	4620      	mov	r0, r4
1a002ae6:	f004 f892 	bl	1a006c0e <lcdSendStringRaw>
	 	 lcdSendStringRaw( " " );
1a002aea:	4620      	mov	r0, r4
1a002aec:	f004 f88f 	bl	1a006c0e <lcdSendStringRaw>
	 	 lcdData(ID);
1a002af0:	2005      	movs	r0, #5
1a002af2:	f003 ffbf 	bl	1a006a74 <lcdData>
 }
1a002af6:	e701      	b.n	1a0028fc <printDig+0x10>
1a002af8:	1a007fe0 	.word	0x1a007fe0

1a002afc <SMTB_Temp_Show>:

 void SMTB_Temp_Show(int tempToDisp, uint8_t eje, uint8_t sensor, uint8_t status)
{
1a002afc:	b570      	push	{r4, r5, r6, lr}
1a002afe:	4604      	mov	r4, r0
1a002b00:	460e      	mov	r6, r1
1a002b02:	4615      	mov	r5, r2
	uint8_t dig1;
	uint8_t dig2;

// saturación del dato máximo
	if(tempToDisp > 125)
1a002b04:	287d      	cmp	r0, #125	; 0x7d
1a002b06:	dd00      	ble.n	1a002b0a <SMTB_Temp_Show+0xe>
	{
		tempToDisp = 125;
1a002b08:	247d      	movs	r4, #125	; 0x7d
	}
// imprime guiones si el sensor está inactivo
	if(status == INACTIVE)
1a002b0a:	b3a3      	cbz	r3, 1a002b76 <SMTB_Temp_Show+0x7a>
		lcdData(Pi);
	}
	else
	{
//impresión de la centena
		if(tempToDisp > 100)
1a002b0c:	2c64      	cmp	r4, #100	; 0x64
1a002b0e:	dc47      	bgt.n	1a002ba0 <SMTB_Temp_Show+0xa4>
			lcdData(SD);
			lcdGoToXY( 0, 1 );
			lcdData(ID);
			tempToDisp -= 100;
		}
		dig1 = tempToDisp / 10;
1a002b10:	4b2b      	ldr	r3, [pc, #172]	; (1a002bc0 <SMTB_Temp_Show+0xc4>)
1a002b12:	fb83 2304 	smull	r2, r3, r3, r4
1a002b16:	17e0      	asrs	r0, r4, #31
1a002b18:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
		dig2 = tempToDisp % 10;
1a002b1c:	eb00 0280 	add.w	r2, r0, r0, lsl #2
1a002b20:	0053      	lsls	r3, r2, #1
1a002b22:	1ae3      	subs	r3, r4, r3
1a002b24:	b2dc      	uxtb	r4, r3
		printDig(dig1, 1);
1a002b26:	2101      	movs	r1, #1
1a002b28:	b2c0      	uxtb	r0, r0
1a002b2a:	f7ff fedf 	bl	1a0028ec <printDig>
		printDig(dig2, 2);
1a002b2e:	2102      	movs	r1, #2
1a002b30:	4620      	mov	r0, r4
1a002b32:	f7ff fedb 	bl	1a0028ec <printDig>
	}
	lcdGoToXY( 7, 0 );
1a002b36:	2100      	movs	r1, #0
1a002b38:	2007      	movs	r0, #7
1a002b3a:	f004 f82d 	bl	1a006b98 <lcdGoToXY>
	lcdData(0x6f); // imprime el cerito
1a002b3e:	206f      	movs	r0, #111	; 0x6f
1a002b40:	f003 ff98 	bl	1a006a74 <lcdData>
	lcdGoToXY( 1, 2 );
1a002b44:	2102      	movs	r1, #2
1a002b46:	2001      	movs	r0, #1
1a002b48:	f004 f826 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( "Eje: " );
1a002b4c:	481d      	ldr	r0, [pc, #116]	; (1a002bc4 <SMTB_Temp_Show+0xc8>)
1a002b4e:	f004 f85e 	bl	1a006c0e <lcdSendStringRaw>
	lcdData(0x30 + eje);
1a002b52:	f106 0030 	add.w	r0, r6, #48	; 0x30
1a002b56:	b2c0      	uxtb	r0, r0
1a002b58:	f003 ff8c 	bl	1a006a74 <lcdData>
	lcdGoToXY( 1, 3 );
1a002b5c:	2103      	movs	r1, #3
1a002b5e:	2001      	movs	r0, #1
1a002b60:	f004 f81a 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( "Sen: " );
1a002b64:	4818      	ldr	r0, [pc, #96]	; (1a002bc8 <SMTB_Temp_Show+0xcc>)
1a002b66:	f004 f852 	bl	1a006c0e <lcdSendStringRaw>
	lcdData(0x30 + sensor);
1a002b6a:	f105 0030 	add.w	r0, r5, #48	; 0x30
1a002b6e:	b2c0      	uxtb	r0, r0
1a002b70:	f003 ff80 	bl	1a006a74 <lcdData>
}
1a002b74:	bd70      	pop	{r4, r5, r6, pc}
		lcdGoToXY( 1, 0 );
1a002b76:	2100      	movs	r1, #0
1a002b78:	2001      	movs	r0, #1
1a002b7a:	f004 f80d 	bl	1a006b98 <lcdGoToXY>
		lcdData(Pi);
1a002b7e:	2004      	movs	r0, #4
1a002b80:	f003 ff78 	bl	1a006a74 <lcdData>
		lcdData(Pi);
1a002b84:	2004      	movs	r0, #4
1a002b86:	f003 ff75 	bl	1a006a74 <lcdData>
		lcdGoToXY( 4, 0 );
1a002b8a:	2100      	movs	r1, #0
1a002b8c:	2004      	movs	r0, #4
1a002b8e:	f004 f803 	bl	1a006b98 <lcdGoToXY>
		lcdData(Pi);
1a002b92:	2004      	movs	r0, #4
1a002b94:	f003 ff6e 	bl	1a006a74 <lcdData>
		lcdData(Pi);
1a002b98:	2004      	movs	r0, #4
1a002b9a:	f003 ff6b 	bl	1a006a74 <lcdData>
1a002b9e:	e7ca      	b.n	1a002b36 <SMTB_Temp_Show+0x3a>
			lcdGoToXY( 0, 0 );
1a002ba0:	2100      	movs	r1, #0
1a002ba2:	4608      	mov	r0, r1
1a002ba4:	f003 fff8 	bl	1a006b98 <lcdGoToXY>
			lcdData(SD);
1a002ba8:	2002      	movs	r0, #2
1a002baa:	f003 ff63 	bl	1a006a74 <lcdData>
			lcdGoToXY( 0, 1 );
1a002bae:	2101      	movs	r1, #1
1a002bb0:	2000      	movs	r0, #0
1a002bb2:	f003 fff1 	bl	1a006b98 <lcdGoToXY>
			lcdData(ID);
1a002bb6:	2005      	movs	r0, #5
1a002bb8:	f003 ff5c 	bl	1a006a74 <lcdData>
			tempToDisp -= 100;
1a002bbc:	3c64      	subs	r4, #100	; 0x64
1a002bbe:	e7a7      	b.n	1a002b10 <SMTB_Temp_Show+0x14>
1a002bc0:	66666667 	.word	0x66666667
1a002bc4:	1a0087b0 	.word	0x1a0087b0
1a002bc8:	1a0087b8 	.word	0x1a0087b8

1a002bcc <SMTB_Mode_Show>:

void SMTB_Mode_Show(void)
{
1a002bcc:	b508      	push	{r3, lr}
	lcdGoToXY( 9, 0 );
1a002bce:	2100      	movs	r1, #0
1a002bd0:	2009      	movs	r0, #9
1a002bd2:	f003 ffe1 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( "UCI #" );
1a002bd6:	485a      	ldr	r0, [pc, #360]	; (1a002d40 <SMTB_Mode_Show+0x174>)
1a002bd8:	f004 f819 	bl	1a006c0e <lcdSendStringRaw>
	if(getStatus(BIT_UCI_1))
1a002bdc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
1a002be0:	f000 fc16 	bl	1a003410 <getStatus>
1a002be4:	bb70      	cbnz	r0, 1a002c44 <SMTB_Mode_Show+0x78>
		{
			lcdData(0x7E); //Imprime la flechita
			lcdSendStringRaw( " #2" );
		}
	}
	if(getStatus(BIT_UCI_2))
1a002be6:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
1a002bea:	f000 fc11 	bl	1a003410 <getStatus>
1a002bee:	2800      	cmp	r0, #0
1a002bf0:	d13b      	bne.n	1a002c6a <SMTB_Mode_Show+0x9e>
		{
			lcdData(0x7F); //Imprime la flechita
			lcdSendStringRaw( " #1" );
		}
	}
	lcdGoToXY( 9, 1 );
1a002bf2:	2101      	movs	r1, #1
1a002bf4:	2009      	movs	r0, #9
1a002bf6:	f003 ffcf 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( "MOD:");
1a002bfa:	4852      	ldr	r0, [pc, #328]	; (1a002d44 <SMTB_Mode_Show+0x178>)
1a002bfc:	f004 f807 	bl	1a006c0e <lcdSendStringRaw>
	if (flagAlarm != 0)
1a002c00:	4b51      	ldr	r3, [pc, #324]	; (1a002d48 <SMTB_Mode_Show+0x17c>)
1a002c02:	781b      	ldrb	r3, [r3, #0]
1a002c04:	2b00      	cmp	r3, #0
1a002c06:	d143      	bne.n	1a002c90 <SMTB_Mode_Show+0xc4>
		lcdSendStringRaw( " ALARMA");
	else if (flagDegraded != 0)
1a002c08:	4b50      	ldr	r3, [pc, #320]	; (1a002d4c <SMTB_Mode_Show+0x180>)
1a002c0a:	781b      	ldrb	r3, [r3, #0]
1a002c0c:	2b00      	cmp	r3, #0
1a002c0e:	d043      	beq.n	1a002c98 <SMTB_Mode_Show+0xcc>
		lcdSendStringRaw( "  FALLA");
1a002c10:	484f      	ldr	r0, [pc, #316]	; (1a002d50 <SMTB_Mode_Show+0x184>)
1a002c12:	f003 fffc 	bl	1a006c0e <lcdSendStringRaw>
	else
		lcdSendStringRaw( " NORMAL");
	lcdGoToXY( 9, 2 );
1a002c16:	2102      	movs	r1, #2
1a002c18:	2009      	movs	r0, #9
1a002c1a:	f003 ffbd 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( "ACT:  ");
1a002c1e:	484d      	ldr	r0, [pc, #308]	; (1a002d54 <SMTB_Mode_Show+0x188>)
1a002c20:	f003 fff5 	bl	1a006c0e <lcdSendStringRaw>
	if(quantActive >= 30)
1a002c24:	4b4c      	ldr	r3, [pc, #304]	; (1a002d58 <SMTB_Mode_Show+0x18c>)
1a002c26:	781b      	ldrb	r3, [r3, #0]
1a002c28:	2b1d      	cmp	r3, #29
1a002c2a:	d839      	bhi.n	1a002ca0 <SMTB_Mode_Show+0xd4>
	{
		lcdData(0x33);
		quantActive -= 30;
	}
	else if(quantActive >= 20)
1a002c2c:	2b13      	cmp	r3, #19
1a002c2e:	d85e      	bhi.n	1a002cee <SMTB_Mode_Show+0x122>
	{
		lcdData(0x32);
		quantActive -= 20;
	}
	else if(quantActive >= 10)
1a002c30:	2b09      	cmp	r3, #9
1a002c32:	d964      	bls.n	1a002cfe <SMTB_Mode_Show+0x132>
	{
		lcdData(0x31);
1a002c34:	2031      	movs	r0, #49	; 0x31
1a002c36:	f003 ff1d 	bl	1a006a74 <lcdData>
		quantActive -= 10;
1a002c3a:	4a47      	ldr	r2, [pc, #284]	; (1a002d58 <SMTB_Mode_Show+0x18c>)
1a002c3c:	7813      	ldrb	r3, [r2, #0]
1a002c3e:	3b0a      	subs	r3, #10
1a002c40:	7013      	strb	r3, [r2, #0]
1a002c42:	e034      	b.n	1a002cae <SMTB_Mode_Show+0xe2>
		lcdData(0x31);
1a002c44:	2031      	movs	r0, #49	; 0x31
1a002c46:	f003 ff15 	bl	1a006a74 <lcdData>
		lcdSendStringRaw( " " );
1a002c4a:	4844      	ldr	r0, [pc, #272]	; (1a002d5c <SMTB_Mode_Show+0x190>)
1a002c4c:	f003 ffdf 	bl	1a006c0e <lcdSendStringRaw>
		if(getStatus(BIT_REMOTE))
1a002c50:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
1a002c54:	f000 fbdc 	bl	1a003410 <getStatus>
1a002c58:	2800      	cmp	r0, #0
1a002c5a:	d0c4      	beq.n	1a002be6 <SMTB_Mode_Show+0x1a>
			lcdData(0x7E); //Imprime la flechita
1a002c5c:	207e      	movs	r0, #126	; 0x7e
1a002c5e:	f003 ff09 	bl	1a006a74 <lcdData>
			lcdSendStringRaw( " #2" );
1a002c62:	483f      	ldr	r0, [pc, #252]	; (1a002d60 <SMTB_Mode_Show+0x194>)
1a002c64:	f003 ffd3 	bl	1a006c0e <lcdSendStringRaw>
1a002c68:	e7bd      	b.n	1a002be6 <SMTB_Mode_Show+0x1a>
		lcdData(0x32);
1a002c6a:	2032      	movs	r0, #50	; 0x32
1a002c6c:	f003 ff02 	bl	1a006a74 <lcdData>
		lcdSendStringRaw( " " );
1a002c70:	483a      	ldr	r0, [pc, #232]	; (1a002d5c <SMTB_Mode_Show+0x190>)
1a002c72:	f003 ffcc 	bl	1a006c0e <lcdSendStringRaw>
		if(getStatus(BIT_REMOTE))
1a002c76:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
1a002c7a:	f000 fbc9 	bl	1a003410 <getStatus>
1a002c7e:	2800      	cmp	r0, #0
1a002c80:	d0b7      	beq.n	1a002bf2 <SMTB_Mode_Show+0x26>
			lcdData(0x7F); //Imprime la flechita
1a002c82:	207f      	movs	r0, #127	; 0x7f
1a002c84:	f003 fef6 	bl	1a006a74 <lcdData>
			lcdSendStringRaw( " #1" );
1a002c88:	4836      	ldr	r0, [pc, #216]	; (1a002d64 <SMTB_Mode_Show+0x198>)
1a002c8a:	f003 ffc0 	bl	1a006c0e <lcdSendStringRaw>
1a002c8e:	e7b0      	b.n	1a002bf2 <SMTB_Mode_Show+0x26>
		lcdSendStringRaw( " ALARMA");
1a002c90:	4835      	ldr	r0, [pc, #212]	; (1a002d68 <SMTB_Mode_Show+0x19c>)
1a002c92:	f003 ffbc 	bl	1a006c0e <lcdSendStringRaw>
1a002c96:	e7be      	b.n	1a002c16 <SMTB_Mode_Show+0x4a>
		lcdSendStringRaw( " NORMAL");
1a002c98:	4834      	ldr	r0, [pc, #208]	; (1a002d6c <SMTB_Mode_Show+0x1a0>)
1a002c9a:	f003 ffb8 	bl	1a006c0e <lcdSendStringRaw>
1a002c9e:	e7ba      	b.n	1a002c16 <SMTB_Mode_Show+0x4a>
		lcdData(0x33);
1a002ca0:	2033      	movs	r0, #51	; 0x33
1a002ca2:	f003 fee7 	bl	1a006a74 <lcdData>
		quantActive -= 30;
1a002ca6:	4a2c      	ldr	r2, [pc, #176]	; (1a002d58 <SMTB_Mode_Show+0x18c>)
1a002ca8:	7813      	ldrb	r3, [r2, #0]
1a002caa:	3b1e      	subs	r3, #30
1a002cac:	7013      	strb	r3, [r2, #0]
	}
	else
		lcdSendStringRaw( " ");
	lcdData(0x30 + quantActive);
1a002cae:	4b2a      	ldr	r3, [pc, #168]	; (1a002d58 <SMTB_Mode_Show+0x18c>)
1a002cb0:	7818      	ldrb	r0, [r3, #0]
1a002cb2:	3030      	adds	r0, #48	; 0x30
1a002cb4:	b2c0      	uxtb	r0, r0
1a002cb6:	f003 fedd 	bl	1a006a74 <lcdData>
	lcdSendStringRaw( "/36");
1a002cba:	482d      	ldr	r0, [pc, #180]	; (1a002d70 <SMTB_Mode_Show+0x1a4>)
1a002cbc:	f003 ffa7 	bl	1a006c0e <lcdSendStringRaw>

	/*Cantidad de sensores en alarma*/
	lcdGoToXY( 9, 3 );
1a002cc0:	2103      	movs	r1, #3
1a002cc2:	2009      	movs	r0, #9
1a002cc4:	f003 ff68 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( "ALRM: ");
1a002cc8:	482a      	ldr	r0, [pc, #168]	; (1a002d74 <SMTB_Mode_Show+0x1a8>)
1a002cca:	f003 ffa0 	bl	1a006c0e <lcdSendStringRaw>
	if(quantAlarm >= 30)
1a002cce:	4b2a      	ldr	r3, [pc, #168]	; (1a002d78 <SMTB_Mode_Show+0x1ac>)
1a002cd0:	781b      	ldrb	r3, [r3, #0]
1a002cd2:	2b1d      	cmp	r3, #29
1a002cd4:	d817      	bhi.n	1a002d06 <SMTB_Mode_Show+0x13a>
	{
		lcdData(0x33);
		quantAlarm -= 30;
	}
	else if(quantAlarm >= 20)
1a002cd6:	2b13      	cmp	r3, #19
1a002cd8:	d826      	bhi.n	1a002d28 <SMTB_Mode_Show+0x15c>
	{
		lcdData(0x32);
		quantAlarm -= 20;
	}
	else if(quantAlarm >= 10)
1a002cda:	2b09      	cmp	r3, #9
1a002cdc:	d92c      	bls.n	1a002d38 <SMTB_Mode_Show+0x16c>
		{
			lcdData(0x31);
1a002cde:	2031      	movs	r0, #49	; 0x31
1a002ce0:	f003 fec8 	bl	1a006a74 <lcdData>
			quantAlarm -= 10;
1a002ce4:	4a24      	ldr	r2, [pc, #144]	; (1a002d78 <SMTB_Mode_Show+0x1ac>)
1a002ce6:	7813      	ldrb	r3, [r2, #0]
1a002ce8:	3b0a      	subs	r3, #10
1a002cea:	7013      	strb	r3, [r2, #0]
1a002cec:	e012      	b.n	1a002d14 <SMTB_Mode_Show+0x148>
		lcdData(0x32);
1a002cee:	2032      	movs	r0, #50	; 0x32
1a002cf0:	f003 fec0 	bl	1a006a74 <lcdData>
		quantActive -= 20;
1a002cf4:	4a18      	ldr	r2, [pc, #96]	; (1a002d58 <SMTB_Mode_Show+0x18c>)
1a002cf6:	7813      	ldrb	r3, [r2, #0]
1a002cf8:	3b14      	subs	r3, #20
1a002cfa:	7013      	strb	r3, [r2, #0]
1a002cfc:	e7d7      	b.n	1a002cae <SMTB_Mode_Show+0xe2>
		lcdSendStringRaw( " ");
1a002cfe:	4817      	ldr	r0, [pc, #92]	; (1a002d5c <SMTB_Mode_Show+0x190>)
1a002d00:	f003 ff85 	bl	1a006c0e <lcdSendStringRaw>
1a002d04:	e7d3      	b.n	1a002cae <SMTB_Mode_Show+0xe2>
		lcdData(0x33);
1a002d06:	2033      	movs	r0, #51	; 0x33
1a002d08:	f003 feb4 	bl	1a006a74 <lcdData>
		quantAlarm -= 30;
1a002d0c:	4a1a      	ldr	r2, [pc, #104]	; (1a002d78 <SMTB_Mode_Show+0x1ac>)
1a002d0e:	7813      	ldrb	r3, [r2, #0]
1a002d10:	3b1e      	subs	r3, #30
1a002d12:	7013      	strb	r3, [r2, #0]
		}
	else
		lcdSendStringRaw( " ");
	lcdData(0x30 + quantAlarm);
1a002d14:	4b18      	ldr	r3, [pc, #96]	; (1a002d78 <SMTB_Mode_Show+0x1ac>)
1a002d16:	7818      	ldrb	r0, [r3, #0]
1a002d18:	3030      	adds	r0, #48	; 0x30
1a002d1a:	b2c0      	uxtb	r0, r0
1a002d1c:	f003 feaa 	bl	1a006a74 <lcdData>
	lcdSendStringRaw( "/36");
1a002d20:	4813      	ldr	r0, [pc, #76]	; (1a002d70 <SMTB_Mode_Show+0x1a4>)
1a002d22:	f003 ff74 	bl	1a006c0e <lcdSendStringRaw>
}
1a002d26:	bd08      	pop	{r3, pc}
		lcdData(0x32);
1a002d28:	2032      	movs	r0, #50	; 0x32
1a002d2a:	f003 fea3 	bl	1a006a74 <lcdData>
		quantAlarm -= 20;
1a002d2e:	4a12      	ldr	r2, [pc, #72]	; (1a002d78 <SMTB_Mode_Show+0x1ac>)
1a002d30:	7813      	ldrb	r3, [r2, #0]
1a002d32:	3b14      	subs	r3, #20
1a002d34:	7013      	strb	r3, [r2, #0]
1a002d36:	e7ed      	b.n	1a002d14 <SMTB_Mode_Show+0x148>
		lcdSendStringRaw( " ");
1a002d38:	4808      	ldr	r0, [pc, #32]	; (1a002d5c <SMTB_Mode_Show+0x190>)
1a002d3a:	f003 ff68 	bl	1a006c0e <lcdSendStringRaw>
1a002d3e:	e7e9      	b.n	1a002d14 <SMTB_Mode_Show+0x148>
1a002d40:	1a008688 	.word	0x1a008688
1a002d44:	1a008698 	.word	0x1a008698
1a002d48:	10004f88 	.word	0x10004f88
1a002d4c:	10004d95 	.word	0x10004d95
1a002d50:	1a0086a8 	.word	0x1a0086a8
1a002d54:	1a0086b8 	.word	0x1a0086b8
1a002d58:	10004d94 	.word	0x10004d94
1a002d5c:	1a007fe0 	.word	0x1a007fe0
1a002d60:	1a008690 	.word	0x1a008690
1a002d64:	1a008694 	.word	0x1a008694
1a002d68:	1a0086a0 	.word	0x1a0086a0
1a002d6c:	1a0086b0 	.word	0x1a0086b0
1a002d70:	1a0086c0 	.word	0x1a0086c0
1a002d74:	1a0086c4 	.word	0x1a0086c4
1a002d78:	10004d8e 	.word	0x10004d8e

1a002d7c <SMTB_Menu_Show>:

void SMTB_Menu_Show(void)
{
1a002d7c:	b510      	push	{r4, lr}
	lcdClear();
1a002d7e:	f003 ff33 	bl	1a006be8 <lcdClear>
	if (itemSelected == windowStart)
1a002d82:	4b30      	ldr	r3, [pc, #192]	; (1a002e44 <SMTB_Menu_Show+0xc8>)
1a002d84:	681a      	ldr	r2, [r3, #0]
1a002d86:	4b30      	ldr	r3, [pc, #192]	; (1a002e48 <SMTB_Menu_Show+0xcc>)
1a002d88:	681b      	ldr	r3, [r3, #0]
1a002d8a:	429a      	cmp	r2, r3
1a002d8c:	d045      	beq.n	1a002e1a <SMTB_Menu_Show+0x9e>
	{
		lcdGoToXY( 0, 0 );
		lcdSendStringRaw( "-> " );
	}
	lcdSendStringRaw( menu + windowStart);
1a002d8e:	4c2e      	ldr	r4, [pc, #184]	; (1a002e48 <SMTB_Menu_Show+0xcc>)
1a002d90:	6823      	ldr	r3, [r4, #0]
1a002d92:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002d96:	009a      	lsls	r2, r3, #2
1a002d98:	482c      	ldr	r0, [pc, #176]	; (1a002e4c <SMTB_Menu_Show+0xd0>)
1a002d9a:	4410      	add	r0, r2
1a002d9c:	f003 ff37 	bl	1a006c0e <lcdSendStringRaw>
	lcdGoToXY( 0, 1 );
1a002da0:	2101      	movs	r1, #1
1a002da2:	2000      	movs	r0, #0
1a002da4:	f003 fef8 	bl	1a006b98 <lcdGoToXY>
	if (itemSelected == windowStart+1)
1a002da8:	6823      	ldr	r3, [r4, #0]
1a002daa:	3301      	adds	r3, #1
1a002dac:	4a25      	ldr	r2, [pc, #148]	; (1a002e44 <SMTB_Menu_Show+0xc8>)
1a002dae:	6812      	ldr	r2, [r2, #0]
1a002db0:	4293      	cmp	r3, r2
1a002db2:	d03a      	beq.n	1a002e2a <SMTB_Menu_Show+0xae>
		 lcdSendStringRaw( "-> " );
	lcdSendStringRaw( menu + windowStart+1 );
1a002db4:	4c24      	ldr	r4, [pc, #144]	; (1a002e48 <SMTB_Menu_Show+0xcc>)
1a002db6:	6823      	ldr	r3, [r4, #0]
1a002db8:	3301      	adds	r3, #1
1a002dba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002dbe:	009a      	lsls	r2, r3, #2
1a002dc0:	4822      	ldr	r0, [pc, #136]	; (1a002e4c <SMTB_Menu_Show+0xd0>)
1a002dc2:	4410      	add	r0, r2
1a002dc4:	f003 ff23 	bl	1a006c0e <lcdSendStringRaw>
	lcdGoToXY( 0, 2 );
1a002dc8:	2102      	movs	r1, #2
1a002dca:	2000      	movs	r0, #0
1a002dcc:	f003 fee4 	bl	1a006b98 <lcdGoToXY>
	if (itemSelected == windowStart+2)
1a002dd0:	6823      	ldr	r3, [r4, #0]
1a002dd2:	3302      	adds	r3, #2
1a002dd4:	4a1b      	ldr	r2, [pc, #108]	; (1a002e44 <SMTB_Menu_Show+0xc8>)
1a002dd6:	6812      	ldr	r2, [r2, #0]
1a002dd8:	4293      	cmp	r3, r2
1a002dda:	d02a      	beq.n	1a002e32 <SMTB_Menu_Show+0xb6>
		lcdSendStringRaw( "-> " );
	lcdSendStringRaw( menu + windowStart+2 );
1a002ddc:	4c1a      	ldr	r4, [pc, #104]	; (1a002e48 <SMTB_Menu_Show+0xcc>)
1a002dde:	6823      	ldr	r3, [r4, #0]
1a002de0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002de4:	0098      	lsls	r0, r3, #2
1a002de6:	3028      	adds	r0, #40	; 0x28
1a002de8:	4b18      	ldr	r3, [pc, #96]	; (1a002e4c <SMTB_Menu_Show+0xd0>)
1a002dea:	4418      	add	r0, r3
1a002dec:	f003 ff0f 	bl	1a006c0e <lcdSendStringRaw>
	lcdGoToXY( 0, 3 );
1a002df0:	2103      	movs	r1, #3
1a002df2:	2000      	movs	r0, #0
1a002df4:	f003 fed0 	bl	1a006b98 <lcdGoToXY>
	if (itemSelected == windowStart+3)
1a002df8:	6823      	ldr	r3, [r4, #0]
1a002dfa:	3303      	adds	r3, #3
1a002dfc:	4a11      	ldr	r2, [pc, #68]	; (1a002e44 <SMTB_Menu_Show+0xc8>)
1a002dfe:	6812      	ldr	r2, [r2, #0]
1a002e00:	4293      	cmp	r3, r2
1a002e02:	d01a      	beq.n	1a002e3a <SMTB_Menu_Show+0xbe>
		lcdSendStringRaw( "-> " );
	lcdSendStringRaw( menu + windowStart+3 );
1a002e04:	4b10      	ldr	r3, [pc, #64]	; (1a002e48 <SMTB_Menu_Show+0xcc>)
1a002e06:	681b      	ldr	r3, [r3, #0]
1a002e08:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002e0c:	0098      	lsls	r0, r3, #2
1a002e0e:	303c      	adds	r0, #60	; 0x3c
1a002e10:	4b0e      	ldr	r3, [pc, #56]	; (1a002e4c <SMTB_Menu_Show+0xd0>)
1a002e12:	4418      	add	r0, r3
1a002e14:	f003 fefb 	bl	1a006c0e <lcdSendStringRaw>
}
1a002e18:	bd10      	pop	{r4, pc}
		lcdGoToXY( 0, 0 );
1a002e1a:	2100      	movs	r1, #0
1a002e1c:	4608      	mov	r0, r1
1a002e1e:	f003 febb 	bl	1a006b98 <lcdGoToXY>
		lcdSendStringRaw( "-> " );
1a002e22:	480b      	ldr	r0, [pc, #44]	; (1a002e50 <SMTB_Menu_Show+0xd4>)
1a002e24:	f003 fef3 	bl	1a006c0e <lcdSendStringRaw>
1a002e28:	e7b1      	b.n	1a002d8e <SMTB_Menu_Show+0x12>
		 lcdSendStringRaw( "-> " );
1a002e2a:	4809      	ldr	r0, [pc, #36]	; (1a002e50 <SMTB_Menu_Show+0xd4>)
1a002e2c:	f003 feef 	bl	1a006c0e <lcdSendStringRaw>
1a002e30:	e7c0      	b.n	1a002db4 <SMTB_Menu_Show+0x38>
		lcdSendStringRaw( "-> " );
1a002e32:	4807      	ldr	r0, [pc, #28]	; (1a002e50 <SMTB_Menu_Show+0xd4>)
1a002e34:	f003 feeb 	bl	1a006c0e <lcdSendStringRaw>
1a002e38:	e7d0      	b.n	1a002ddc <SMTB_Menu_Show+0x60>
		lcdSendStringRaw( "-> " );
1a002e3a:	4805      	ldr	r0, [pc, #20]	; (1a002e50 <SMTB_Menu_Show+0xd4>)
1a002e3c:	f003 fee7 	bl	1a006c0e <lcdSendStringRaw>
1a002e40:	e7e0      	b.n	1a002e04 <SMTB_Menu_Show+0x88>
1a002e42:	bf00      	nop
1a002e44:	10004cc4 	.word	0x10004cc4
1a002e48:	10004cc0 	.word	0x10004cc0
1a002e4c:	10004c34 	.word	0x10004c34
1a002e50:	1a008684 	.word	0x1a008684

1a002e54 <SMTB_Alarm_View_Init>:

void SMTB_Alarm_View_Init(void)
{
1a002e54:	b510      	push	{r4, lr}
1a002e56:	b082      	sub	sp, #8
	uint8_t data[6] = {0};
1a002e58:	2400      	movs	r4, #0
1a002e5a:	9400      	str	r4, [sp, #0]
1a002e5c:	f8ad 4004 	strh.w	r4, [sp, #4]
//Actualización del LCD
	lcdClear();
1a002e60:	f003 fec2 	bl	1a006be8 <lcdClear>
	lcdGoToXY( 0, 0 );
1a002e64:	4621      	mov	r1, r4
1a002e66:	4620      	mov	r0, r4
1a002e68:	f003 fe96 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( "Visualizando: " );
1a002e6c:	4821      	ldr	r0, [pc, #132]	; (1a002ef4 <SMTB_Alarm_View_Init+0xa0>)
1a002e6e:	f003 fece 	bl	1a006c0e <lcdSendStringRaw>
	lcdGoToXY( 0, 1 );
1a002e72:	2101      	movs	r1, #1
1a002e74:	4620      	mov	r0, r4
1a002e76:	f003 fe8f 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( "Sensores en alarma" );
1a002e7a:	481f      	ldr	r0, [pc, #124]	; (1a002ef8 <SMTB_Alarm_View_Init+0xa4>)
1a002e7c:	f003 fec7 	bl	1a006c0e <lcdSendStringRaw>
	lcdGoToXY( 0, 2 );
1a002e80:	2102      	movs	r1, #2
1a002e82:	4620      	mov	r0, r4
1a002e84:	f003 fe88 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( "presione una tecla" );
1a002e88:	481c      	ldr	r0, [pc, #112]	; (1a002efc <SMTB_Alarm_View_Init+0xa8>)
1a002e8a:	f003 fec0 	bl	1a006c0e <lcdSendStringRaw>
	lcdGoToXY( 0, 3 );
1a002e8e:	2103      	movs	r1, #3
1a002e90:	4620      	mov	r0, r4
1a002e92:	f003 fe81 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( "para SALIR" );
1a002e96:	481a      	ldr	r0, [pc, #104]	; (1a002f00 <SMTB_Alarm_View_Init+0xac>)
1a002e98:	f003 feb9 	bl	1a006c0e <lcdSendStringRaw>

//Actualización de la matriz
	for (int k=0; k<N; k++)
1a002e9c:	4620      	mov	r0, r4
1a002e9e:	e000      	b.n	1a002ea2 <SMTB_Alarm_View_Init+0x4e>
1a002ea0:	3001      	adds	r0, #1
1a002ea2:	2817      	cmp	r0, #23
1a002ea4:	dc17      	bgt.n	1a002ed6 <SMTB_Alarm_View_Init+0x82>
	{
		if(sensor[k].estado == SEN_ALARM)
1a002ea6:	eb00 0380 	add.w	r3, r0, r0, lsl #2
1a002eaa:	009a      	lsls	r2, r3, #2
1a002eac:	4b15      	ldr	r3, [pc, #84]	; (1a002f04 <SMTB_Alarm_View_Init+0xb0>)
1a002eae:	4413      	add	r3, r2
1a002eb0:	7a1b      	ldrb	r3, [r3, #8]
1a002eb2:	2b02      	cmp	r3, #2
1a002eb4:	d1f4      	bne.n	1a002ea0 <SMTB_Alarm_View_Init+0x4c>
		{
			data[sensor[k].eje] |= 0x80>>(sensor[k].posicion);
1a002eb6:	4611      	mov	r1, r2
1a002eb8:	4a12      	ldr	r2, [pc, #72]	; (1a002f04 <SMTB_Alarm_View_Init+0xb0>)
1a002eba:	440a      	add	r2, r1
1a002ebc:	68d3      	ldr	r3, [r2, #12]
1a002ebe:	6911      	ldr	r1, [r2, #16]
1a002ec0:	2280      	movs	r2, #128	; 0x80
1a002ec2:	fa42 f101 	asr.w	r1, r2, r1
1a002ec6:	aa02      	add	r2, sp, #8
1a002ec8:	4413      	add	r3, r2
1a002eca:	f813 2c08 	ldrb.w	r2, [r3, #-8]
1a002ece:	430a      	orrs	r2, r1
1a002ed0:	f803 2c08 	strb.w	r2, [r3, #-8]
1a002ed4:	e7e4      	b.n	1a002ea0 <SMTB_Alarm_View_Init+0x4c>
		}
	}
	for (uint8_t i=0; i<6; i++)
1a002ed6:	2400      	movs	r4, #0
1a002ed8:	2c05      	cmp	r4, #5
1a002eda:	d809      	bhi.n	1a002ef0 <SMTB_Alarm_View_Init+0x9c>
	{
		writeRow(i, data[i]);
1a002edc:	ab02      	add	r3, sp, #8
1a002ede:	4423      	add	r3, r4
1a002ee0:	f813 1c08 	ldrb.w	r1, [r3, #-8]
1a002ee4:	4620      	mov	r0, r4
1a002ee6:	f000 fb42 	bl	1a00356e <writeRow>
	for (uint8_t i=0; i<6; i++)
1a002eea:	3401      	adds	r4, #1
1a002eec:	b2e4      	uxtb	r4, r4
1a002eee:	e7f3      	b.n	1a002ed8 <SMTB_Alarm_View_Init+0x84>
	}
}
1a002ef0:	b002      	add	sp, #8
1a002ef2:	bd10      	pop	{r4, pc}
1a002ef4:	1a0085ec 	.word	0x1a0085ec
1a002ef8:	1a0085fc 	.word	0x1a0085fc
1a002efc:	1a008610 	.word	0x1a008610
1a002f00:	1a008624 	.word	0x1a008624
1a002f04:	10004d9c 	.word	0x10004d9c

1a002f08 <SMTB_Alta_Init>:

void SMTB_Alta_Init(void)
{
1a002f08:	b508      	push	{r3, lr}
	lcdClear();
1a002f0a:	f003 fe6d 	bl	1a006be8 <lcdClear>
	lcdGoToXY( 0, 0 );
1a002f0e:	2100      	movs	r1, #0
1a002f10:	4608      	mov	r0, r1
1a002f12:	f003 fe41 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( "Alta de sensor: " );
1a002f16:	480c      	ldr	r0, [pc, #48]	; (1a002f48 <SMTB_Alta_Init+0x40>)
1a002f18:	f003 fe79 	bl	1a006c0e <lcdSendStringRaw>
	lcdGoToXY( 0, 1 );
1a002f1c:	2101      	movs	r1, #1
1a002f1e:	2000      	movs	r0, #0
1a002f20:	f003 fe3a 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( "Conecte el sensor en" );
1a002f24:	4809      	ldr	r0, [pc, #36]	; (1a002f4c <SMTB_Alta_Init+0x44>)
1a002f26:	f003 fe72 	bl	1a006c0e <lcdSendStringRaw>
	lcdGoToXY( 0, 2 );
1a002f2a:	2102      	movs	r1, #2
1a002f2c:	2000      	movs	r0, #0
1a002f2e:	f003 fe33 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( "el frente de la UCI" );
1a002f32:	4807      	ldr	r0, [pc, #28]	; (1a002f50 <SMTB_Alta_Init+0x48>)
1a002f34:	f003 fe6b 	bl	1a006c0e <lcdSendStringRaw>
	lcdGoToXY( 0, 3 );
1a002f38:	2103      	movs	r1, #3
1a002f3a:	2000      	movs	r0, #0
1a002f3c:	f003 fe2c 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( "y presione ENTER" );
1a002f40:	4804      	ldr	r0, [pc, #16]	; (1a002f54 <SMTB_Alta_Init+0x4c>)
1a002f42:	f003 fe64 	bl	1a006c0e <lcdSendStringRaw>
}
1a002f46:	bd08      	pop	{r3, pc}
1a002f48:	1a008630 	.word	0x1a008630
1a002f4c:	1a008644 	.word	0x1a008644
1a002f50:	1a00865c 	.word	0x1a00865c
1a002f54:	1a008670 	.word	0x1a008670

1a002f58 <SMTB_Sens_View_Init>:

void SMTB_Sens_View_Init(void)
{
1a002f58:	b510      	push	{r4, lr}
1a002f5a:	b082      	sub	sp, #8
	uint8_t data[6] = {0};
1a002f5c:	2400      	movs	r4, #0
1a002f5e:	9400      	str	r4, [sp, #0]
1a002f60:	f8ad 4004 	strh.w	r4, [sp, #4]
//Actualización del LCD
	lcdClear();
1a002f64:	f003 fe40 	bl	1a006be8 <lcdClear>
	lcdGoToXY( 0, 0 );
1a002f68:	4621      	mov	r1, r4
1a002f6a:	4620      	mov	r0, r4
1a002f6c:	f003 fe14 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( "Visualizando: " );
1a002f70:	4821      	ldr	r0, [pc, #132]	; (1a002ff8 <SMTB_Sens_View_Init+0xa0>)
1a002f72:	f003 fe4c 	bl	1a006c0e <lcdSendStringRaw>
	lcdGoToXY( 0, 1 );
1a002f76:	2101      	movs	r1, #1
1a002f78:	4620      	mov	r0, r4
1a002f7a:	f003 fe0d 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( "Sensores inactivos" );
1a002f7e:	481f      	ldr	r0, [pc, #124]	; (1a002ffc <SMTB_Sens_View_Init+0xa4>)
1a002f80:	f003 fe45 	bl	1a006c0e <lcdSendStringRaw>
	lcdGoToXY( 0, 2 );
1a002f84:	2102      	movs	r1, #2
1a002f86:	4620      	mov	r0, r4
1a002f88:	f003 fe06 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( "presione una tecla" );
1a002f8c:	481c      	ldr	r0, [pc, #112]	; (1a003000 <SMTB_Sens_View_Init+0xa8>)
1a002f8e:	f003 fe3e 	bl	1a006c0e <lcdSendStringRaw>
	lcdGoToXY( 0, 3 );
1a002f92:	2103      	movs	r1, #3
1a002f94:	4620      	mov	r0, r4
1a002f96:	f003 fdff 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( "para SALIR" );
1a002f9a:	481a      	ldr	r0, [pc, #104]	; (1a003004 <SMTB_Sens_View_Init+0xac>)
1a002f9c:	f003 fe37 	bl	1a006c0e <lcdSendStringRaw>

//Actualización de la matriz
	for (int k=0; k<N; k++)
1a002fa0:	4620      	mov	r0, r4
1a002fa2:	e000      	b.n	1a002fa6 <SMTB_Sens_View_Init+0x4e>
1a002fa4:	3001      	adds	r0, #1
1a002fa6:	2817      	cmp	r0, #23
1a002fa8:	dc17      	bgt.n	1a002fda <SMTB_Sens_View_Init+0x82>
	{
		if(sensor[k].estado == INACTIVE)
1a002faa:	eb00 0380 	add.w	r3, r0, r0, lsl #2
1a002fae:	009a      	lsls	r2, r3, #2
1a002fb0:	4b15      	ldr	r3, [pc, #84]	; (1a003008 <SMTB_Sens_View_Init+0xb0>)
1a002fb2:	4413      	add	r3, r2
1a002fb4:	7a1b      	ldrb	r3, [r3, #8]
1a002fb6:	2b00      	cmp	r3, #0
1a002fb8:	d1f4      	bne.n	1a002fa4 <SMTB_Sens_View_Init+0x4c>
		{
			data[sensor[k].eje] |= 0x80>>(sensor[k].posicion);
1a002fba:	4611      	mov	r1, r2
1a002fbc:	4a12      	ldr	r2, [pc, #72]	; (1a003008 <SMTB_Sens_View_Init+0xb0>)
1a002fbe:	440a      	add	r2, r1
1a002fc0:	68d3      	ldr	r3, [r2, #12]
1a002fc2:	6911      	ldr	r1, [r2, #16]
1a002fc4:	2280      	movs	r2, #128	; 0x80
1a002fc6:	fa42 f101 	asr.w	r1, r2, r1
1a002fca:	aa02      	add	r2, sp, #8
1a002fcc:	4413      	add	r3, r2
1a002fce:	f813 2c08 	ldrb.w	r2, [r3, #-8]
1a002fd2:	430a      	orrs	r2, r1
1a002fd4:	f803 2c08 	strb.w	r2, [r3, #-8]
1a002fd8:	e7e4      	b.n	1a002fa4 <SMTB_Sens_View_Init+0x4c>
		}
	}
	for (uint8_t i=0; i<6; i++)
1a002fda:	2400      	movs	r4, #0
1a002fdc:	2c05      	cmp	r4, #5
1a002fde:	d809      	bhi.n	1a002ff4 <SMTB_Sens_View_Init+0x9c>
	{
		writeRow(i, data[i]);
1a002fe0:	ab02      	add	r3, sp, #8
1a002fe2:	4423      	add	r3, r4
1a002fe4:	f813 1c08 	ldrb.w	r1, [r3, #-8]
1a002fe8:	4620      	mov	r0, r4
1a002fea:	f000 fac0 	bl	1a00356e <writeRow>
	for (uint8_t i=0; i<6; i++)
1a002fee:	3401      	adds	r4, #1
1a002ff0:	b2e4      	uxtb	r4, r4
1a002ff2:	e7f3      	b.n	1a002fdc <SMTB_Sens_View_Init+0x84>
	}
}
1a002ff4:	b002      	add	sp, #8
1a002ff6:	bd10      	pop	{r4, pc}
1a002ff8:	1a0085ec 	.word	0x1a0085ec
1a002ffc:	1a00872c 	.word	0x1a00872c
1a003000:	1a008610 	.word	0x1a008610
1a003004:	1a008624 	.word	0x1a008624
1a003008:	10004d9c 	.word	0x10004d9c

1a00300c <SMTB_ROM_consist>:

void SMTB_ROM_consist(void)
{
1a00300c:	b508      	push	{r3, lr}
	lcdClear();
1a00300e:	f003 fdeb 	bl	1a006be8 <lcdClear>
	lcdGoToXY( 0, 0);
1a003012:	2100      	movs	r1, #0
1a003014:	4608      	mov	r0, r1
1a003016:	f003 fdbf 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( "Chequeando" );
1a00301a:	4805      	ldr	r0, [pc, #20]	; (1a003030 <SMTB_ROM_consist+0x24>)
1a00301c:	f003 fdf7 	bl	1a006c0e <lcdSendStringRaw>
	lcdGoToXY( 0, 1);
1a003020:	2101      	movs	r1, #1
1a003022:	2000      	movs	r0, #0
1a003024:	f003 fdb8 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( "consistencia ROM" );
1a003028:	4802      	ldr	r0, [pc, #8]	; (1a003034 <SMTB_ROM_consist+0x28>)
1a00302a:	f003 fdf0 	bl	1a006c0e <lcdSendStringRaw>
}
1a00302e:	bd08      	pop	{r3, pc}
1a003030:	1a0086cc 	.word	0x1a0086cc
1a003034:	1a0086d8 	.word	0x1a0086d8

1a003038 <SMTB_ROM_consist_OK>:

void SMTB_ROM_consist_OK(void)
{
1a003038:	b508      	push	{r3, lr}
	lcdGoToXY( 9, 3);
1a00303a:	2103      	movs	r1, #3
1a00303c:	2009      	movs	r0, #9
1a00303e:	f003 fdab 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( "OK" );
1a003042:	4802      	ldr	r0, [pc, #8]	; (1a00304c <SMTB_ROM_consist_OK+0x14>)
1a003044:	f003 fde3 	bl	1a006c0e <lcdSendStringRaw>
}
1a003048:	bd08      	pop	{r3, pc}
1a00304a:	bf00      	nop
1a00304c:	1a0086f4 	.word	0x1a0086f4

1a003050 <SMTB_ROM_consist_NOK>:

void SMTB_ROM_consist_NOK(void)
{
1a003050:	b508      	push	{r3, lr}
	lcdGoToXY( 10, 3);
1a003052:	2103      	movs	r1, #3
1a003054:	200a      	movs	r0, #10
1a003056:	f003 fd9f 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( "no OK" );
1a00305a:	4802      	ldr	r0, [pc, #8]	; (1a003064 <SMTB_ROM_consist_NOK+0x14>)
1a00305c:	f003 fdd7 	bl	1a006c0e <lcdSendStringRaw>
}
1a003060:	bd08      	pop	{r3, pc}
1a003062:	bf00      	nop
1a003064:	1a0086ec 	.word	0x1a0086ec

1a003068 <SMTB_ROM_consist_update>:

void SMTB_ROM_consist_update(void)
{
1a003068:	b510      	push	{r4, lr}
	ROM_active ++;
1a00306a:	4c19      	ldr	r4, [pc, #100]	; (1a0030d0 <SMTB_ROM_consist_update+0x68>)
1a00306c:	6823      	ldr	r3, [r4, #0]
1a00306e:	3301      	adds	r3, #1
1a003070:	6023      	str	r3, [r4, #0]
	lcdGoToXY( 3, 3);
1a003072:	2103      	movs	r1, #3
1a003074:	4608      	mov	r0, r1
1a003076:	f003 fd8f 	bl	1a006b98 <lcdGoToXY>
	if(ROM_active >= 30)
1a00307a:	6823      	ldr	r3, [r4, #0]
1a00307c:	2b1d      	cmp	r3, #29
1a00307e:	dc0b      	bgt.n	1a003098 <SMTB_ROM_consist_update+0x30>
		{
			lcdData(0x33);
			ROM_active -= 30;
		}
		else if(ROM_active >= 20)
1a003080:	2b13      	cmp	r3, #19
1a003082:	dc19      	bgt.n	1a0030b8 <SMTB_ROM_consist_update+0x50>
		{
			lcdData(0x32);
			ROM_active -= 20;
		}
		else if(ROM_active >= 10)
1a003084:	2b09      	cmp	r3, #9
1a003086:	dd1f      	ble.n	1a0030c8 <SMTB_ROM_consist_update+0x60>
		{
			lcdData(0x31);
1a003088:	2031      	movs	r0, #49	; 0x31
1a00308a:	f003 fcf3 	bl	1a006a74 <lcdData>
			ROM_active -= 10;
1a00308e:	4a10      	ldr	r2, [pc, #64]	; (1a0030d0 <SMTB_ROM_consist_update+0x68>)
1a003090:	6813      	ldr	r3, [r2, #0]
1a003092:	3b0a      	subs	r3, #10
1a003094:	6013      	str	r3, [r2, #0]
1a003096:	e005      	b.n	1a0030a4 <SMTB_ROM_consist_update+0x3c>
			lcdData(0x33);
1a003098:	2033      	movs	r0, #51	; 0x33
1a00309a:	f003 fceb 	bl	1a006a74 <lcdData>
			ROM_active -= 30;
1a00309e:	6823      	ldr	r3, [r4, #0]
1a0030a0:	3b1e      	subs	r3, #30
1a0030a2:	6023      	str	r3, [r4, #0]
		}
		else
			lcdSendStringRaw( " ");
		lcdData(0x30 + ROM_active);
1a0030a4:	4b0a      	ldr	r3, [pc, #40]	; (1a0030d0 <SMTB_ROM_consist_update+0x68>)
1a0030a6:	6818      	ldr	r0, [r3, #0]
1a0030a8:	3030      	adds	r0, #48	; 0x30
1a0030aa:	b2c0      	uxtb	r0, r0
1a0030ac:	f003 fce2 	bl	1a006a74 <lcdData>
		lcdSendStringRaw( "/36");
1a0030b0:	4808      	ldr	r0, [pc, #32]	; (1a0030d4 <SMTB_ROM_consist_update+0x6c>)
1a0030b2:	f003 fdac 	bl	1a006c0e <lcdSendStringRaw>
}
1a0030b6:	bd10      	pop	{r4, pc}
			lcdData(0x32);
1a0030b8:	2032      	movs	r0, #50	; 0x32
1a0030ba:	f003 fcdb 	bl	1a006a74 <lcdData>
			ROM_active -= 20;
1a0030be:	4a04      	ldr	r2, [pc, #16]	; (1a0030d0 <SMTB_ROM_consist_update+0x68>)
1a0030c0:	6813      	ldr	r3, [r2, #0]
1a0030c2:	3b14      	subs	r3, #20
1a0030c4:	6013      	str	r3, [r2, #0]
1a0030c6:	e7ed      	b.n	1a0030a4 <SMTB_ROM_consist_update+0x3c>
			lcdSendStringRaw( " ");
1a0030c8:	4803      	ldr	r0, [pc, #12]	; (1a0030d8 <SMTB_ROM_consist_update+0x70>)
1a0030ca:	f003 fda0 	bl	1a006c0e <lcdSendStringRaw>
1a0030ce:	e7e9      	b.n	1a0030a4 <SMTB_ROM_consist_update+0x3c>
1a0030d0:	10004f80 	.word	0x10004f80
1a0030d4:	1a0086c0 	.word	0x1a0086c0
1a0030d8:	1a007fe0 	.word	0x1a007fe0

1a0030dc <SMTB_ROM_copying>:
	lcdGoToXY( 6, 3);
	lcdSendStringRaw( "no OK" );
}

void SMTB_ROM_copying(void)
{
1a0030dc:	b508      	push	{r3, lr}
	lcdClear();
1a0030de:	f003 fd83 	bl	1a006be8 <lcdClear>
	lcdGoToXY( 0, 0);
1a0030e2:	2100      	movs	r1, #0
1a0030e4:	4608      	mov	r0, r1
1a0030e6:	f003 fd57 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( "Copiando :" );
1a0030ea:	4805      	ldr	r0, [pc, #20]	; (1a003100 <SMTB_ROM_copying+0x24>)
1a0030ec:	f003 fd8f 	bl	1a006c0e <lcdSendStringRaw>
	lcdGoToXY( 0, 1);
1a0030f0:	2101      	movs	r1, #1
1a0030f2:	2000      	movs	r0, #0
1a0030f4:	f003 fd50 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( " " );
1a0030f8:	4802      	ldr	r0, [pc, #8]	; (1a003104 <SMTB_ROM_copying+0x28>)
1a0030fa:	f003 fd88 	bl	1a006c0e <lcdSendStringRaw>
}
1a0030fe:	bd08      	pop	{r3, pc}
1a003100:	1a008720 	.word	0x1a008720
1a003104:	1a007fe0 	.word	0x1a007fe0

1a003108 <SMTB_ROM_constCheckNotRun>:

void SMTB_ROM_constCheckNotRun(void) // ToDo: estilo de nombre no compatible
{
1a003108:	b508      	push	{r3, lr}
	lcdGoToXY( 1, 3);
1a00310a:	2103      	movs	r1, #3
1a00310c:	2001      	movs	r0, #1
1a00310e:	f003 fd43 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( "Const no chequeada" );
1a003112:	4802      	ldr	r0, [pc, #8]	; (1a00311c <SMTB_ROM_constCheckNotRun+0x14>)
1a003114:	f003 fd7b 	bl	1a006c0e <lcdSendStringRaw>
}
1a003118:	bd08      	pop	{r3, pc}
1a00311a:	bf00      	nop
1a00311c:	1a0086f8 	.word	0x1a0086f8

1a003120 <SMTB_ROM_constOk>:

void SMTB_ROM_constOk(void) // ToDo: estilo de nombre no compatible
{
1a003120:	b508      	push	{r3, lr}
	lcdGoToXY( 1, 3);
1a003122:	2103      	movs	r1, #3
1a003124:	2001      	movs	r0, #1
1a003126:	f003 fd37 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( "ROMS consistentes" );
1a00312a:	4802      	ldr	r0, [pc, #8]	; (1a003134 <SMTB_ROM_constOk+0x14>)
1a00312c:	f003 fd6f 	bl	1a006c0e <lcdSendStringRaw>
}
1a003130:	bd08      	pop	{r3, pc}
1a003132:	bf00      	nop
1a003134:	1a00870c 	.word	0x1a00870c

1a003138 <SMTB_pending>:

void SMTB_pending(void)
{
1a003138:	b508      	push	{r3, lr}
	lcdClear();
1a00313a:	f003 fd55 	bl	1a006be8 <lcdClear>
	lcdGoToXY( 0, 0);
1a00313e:	2100      	movs	r1, #0
1a003140:	4608      	mov	r0, r1
1a003142:	f003 fd29 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( "Funcion pendiente" );
1a003146:	4802      	ldr	r0, [pc, #8]	; (1a003150 <SMTB_pending+0x18>)
1a003148:	f003 fd61 	bl	1a006c0e <lcdSendStringRaw>
}
1a00314c:	bd08      	pop	{r3, pc}
1a00314e:	bf00      	nop
1a003150:	1a0087c0 	.word	0x1a0087c0

1a003154 <SMTB_Status_Show>:

void SMTB_Status_Show(void)
{
1a003154:	b570      	push	{r4, r5, r6, lr}
	char statusList[7][20];
//Armado del mensaje
	strcpy(menu[0], "ESTADOS");								// Titulo
1a003156:	4e78      	ldr	r6, [pc, #480]	; (1a003338 <SMTB_Status_Show+0x1e4>)
1a003158:	4b78      	ldr	r3, [pc, #480]	; (1a00333c <SMTB_Status_Show+0x1e8>)
1a00315a:	cb03      	ldmia	r3!, {r0, r1}
1a00315c:	6030      	str	r0, [r6, #0]
1a00315e:	6071      	str	r1, [r6, #4]
	strcpy(menu[1], "UCI LOCAL:       ");					// UCI Local
1a003160:	4c77      	ldr	r4, [pc, #476]	; (1a003340 <SMTB_Status_Show+0x1ec>)
1a003162:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1a003164:	6170      	str	r0, [r6, #20]
1a003166:	61b1      	str	r1, [r6, #24]
1a003168:	61f2      	str	r2, [r6, #28]
1a00316a:	6233      	str	r3, [r6, #32]
1a00316c:	8823      	ldrh	r3, [r4, #0]
1a00316e:	84b3      	strh	r3, [r6, #36]	; 0x24
	if(getStatus(BIT_UCI_1) && !getStatus(BIT_UCI_2))
1a003170:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
1a003174:	f000 f94c 	bl	1a003410 <getStatus>
1a003178:	b130      	cbz	r0, 1a003188 <SMTB_Status_Show+0x34>
1a00317a:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
1a00317e:	f000 f947 	bl	1a003410 <getStatus>
1a003182:	2800      	cmp	r0, #0
1a003184:	f000 80a2 	beq.w	1a0032cc <SMTB_Status_Show+0x178>
		strcat(menu[0],"#1");
	else if(!getStatus(BIT_UCI_1) && getStatus(BIT_UCI_2))
1a003188:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
1a00318c:	f000 f940 	bl	1a003410 <getStatus>
1a003190:	b930      	cbnz	r0, 1a0031a0 <SMTB_Status_Show+0x4c>
1a003192:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
1a003196:	f000 f93b 	bl	1a003410 <getStatus>
1a00319a:	2800      	cmp	r0, #0
1a00319c:	f040 80a0 	bne.w	1a0032e0 <SMTB_Status_Show+0x18c>
		strcat(menu[1],"#2");
	else
		strcat(menu[1], " ERROR");
1a0031a0:	4c68      	ldr	r4, [pc, #416]	; (1a003344 <SMTB_Status_Show+0x1f0>)
1a0031a2:	4620      	mov	r0, r4
1a0031a4:	f004 fd3b 	bl	1a007c1e <strlen>
1a0031a8:	4601      	mov	r1, r0
1a0031aa:	1902      	adds	r2, r0, r4
1a0031ac:	4b66      	ldr	r3, [pc, #408]	; (1a003348 <SMTB_Status_Show+0x1f4>)
1a0031ae:	6818      	ldr	r0, [r3, #0]
1a0031b0:	5108      	str	r0, [r1, r4]
1a0031b2:	8899      	ldrh	r1, [r3, #4]
1a0031b4:	799b      	ldrb	r3, [r3, #6]
1a0031b6:	8091      	strh	r1, [r2, #4]
1a0031b8:	7193      	strb	r3, [r2, #6]
	strcpy(menu[2], "UCI REMOTA:      ");					//UCI Remota
1a0031ba:	4d64      	ldr	r5, [pc, #400]	; (1a00334c <SMTB_Status_Show+0x1f8>)
1a0031bc:	4c64      	ldr	r4, [pc, #400]	; (1a003350 <SMTB_Status_Show+0x1fc>)
1a0031be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1a0031c0:	6028      	str	r0, [r5, #0]
1a0031c2:	6069      	str	r1, [r5, #4]
1a0031c4:	60aa      	str	r2, [r5, #8]
1a0031c6:	60eb      	str	r3, [r5, #12]
1a0031c8:	8823      	ldrh	r3, [r4, #0]
1a0031ca:	822b      	strh	r3, [r5, #16]
	if(getStatus(BIT_REMOTE))
1a0031cc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
1a0031d0:	f000 f91e 	bl	1a003410 <getStatus>
1a0031d4:	2800      	cmp	r0, #0
1a0031d6:	f000 808e 	beq.w	1a0032f6 <SMTB_Status_Show+0x1a2>
		strcat(menu[2],"Ok");
1a0031da:	462c      	mov	r4, r5
1a0031dc:	4628      	mov	r0, r5
1a0031de:	f004 fd1e 	bl	1a007c1e <strlen>
1a0031e2:	1942      	adds	r2, r0, r5
1a0031e4:	4b5b      	ldr	r3, [pc, #364]	; (1a003354 <SMTB_Status_Show+0x200>)
1a0031e6:	8819      	ldrh	r1, [r3, #0]
1a0031e8:	789b      	ldrb	r3, [r3, #2]
1a0031ea:	5301      	strh	r1, [r0, r4]
1a0031ec:	7093      	strb	r3, [r2, #2]
	else
		strcat(menu[2],"NO");
	strcpy(menu[3], "BUS SENSORES:    ");					//Bus de sensores
1a0031ee:	4d5a      	ldr	r5, [pc, #360]	; (1a003358 <SMTB_Status_Show+0x204>)
1a0031f0:	4c5a      	ldr	r4, [pc, #360]	; (1a00335c <SMTB_Status_Show+0x208>)
1a0031f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1a0031f4:	6028      	str	r0, [r5, #0]
1a0031f6:	6069      	str	r1, [r5, #4]
1a0031f8:	60aa      	str	r2, [r5, #8]
1a0031fa:	60eb      	str	r3, [r5, #12]
1a0031fc:	8823      	ldrh	r3, [r4, #0]
1a0031fe:	822b      	strh	r3, [r5, #16]
	if(getStatus(BIT_BUS_1))
1a003200:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
1a003204:	f000 f904 	bl	1a003410 <getStatus>
1a003208:	2800      	cmp	r0, #0
1a00320a:	d07f      	beq.n	1a00330c <SMTB_Status_Show+0x1b8>
			strcat(menu[3],"Ok");
1a00320c:	462c      	mov	r4, r5
1a00320e:	4628      	mov	r0, r5
1a003210:	f004 fd05 	bl	1a007c1e <strlen>
1a003214:	1942      	adds	r2, r0, r5
1a003216:	4b4f      	ldr	r3, [pc, #316]	; (1a003354 <SMTB_Status_Show+0x200>)
1a003218:	8819      	ldrh	r1, [r3, #0]
1a00321a:	789b      	ldrb	r3, [r3, #2]
1a00321c:	5301      	strh	r1, [r0, r4]
1a00321e:	7093      	strb	r3, [r2, #2]
		else
			strcat(menu[3],"NO");
	strcpy(menu[4], "BUS FRONTAL:     ");					//Bus frontal
1a003220:	4d4f      	ldr	r5, [pc, #316]	; (1a003360 <SMTB_Status_Show+0x20c>)
1a003222:	4c50      	ldr	r4, [pc, #320]	; (1a003364 <SMTB_Status_Show+0x210>)
1a003224:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1a003226:	6028      	str	r0, [r5, #0]
1a003228:	6069      	str	r1, [r5, #4]
1a00322a:	60aa      	str	r2, [r5, #8]
1a00322c:	60eb      	str	r3, [r5, #12]
1a00322e:	8823      	ldrh	r3, [r4, #0]
1a003230:	822b      	strh	r3, [r5, #16]
	if(getStatus(BIT_BUS_2))
1a003232:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
1a003236:	f000 f8eb 	bl	1a003410 <getStatus>
1a00323a:	2800      	cmp	r0, #0
1a00323c:	d071      	beq.n	1a003322 <SMTB_Status_Show+0x1ce>
			strcat(menu[4],"Ok");
1a00323e:	462c      	mov	r4, r5
1a003240:	4628      	mov	r0, r5
1a003242:	f004 fcec 	bl	1a007c1e <strlen>
1a003246:	1942      	adds	r2, r0, r5
1a003248:	4b42      	ldr	r3, [pc, #264]	; (1a003354 <SMTB_Status_Show+0x200>)
1a00324a:	8819      	ldrh	r1, [r3, #0]
1a00324c:	789b      	ldrb	r3, [r3, #2]
1a00324e:	5301      	strh	r1, [r0, r4]
1a003250:	7093      	strb	r3, [r2, #2]
		else
			strcat(menu[4],"NO");
	strcpy(menu[5], " ");
1a003252:	4c45      	ldr	r4, [pc, #276]	; (1a003368 <SMTB_Status_Show+0x214>)
1a003254:	4b45      	ldr	r3, [pc, #276]	; (1a00336c <SMTB_Status_Show+0x218>)
1a003256:	881b      	ldrh	r3, [r3, #0]
1a003258:	8023      	strh	r3, [r4, #0]
	strcpy(menu[6], " ");
1a00325a:	82a3      	strh	r3, [r4, #20]

	windowStart = 1;
1a00325c:	4d44      	ldr	r5, [pc, #272]	; (1a003370 <SMTB_Status_Show+0x21c>)
1a00325e:	2601      	movs	r6, #1
1a003260:	602e      	str	r6, [r5, #0]
	itemSelected = 1;
1a003262:	4b44      	ldr	r3, [pc, #272]	; (1a003374 <SMTB_Status_Show+0x220>)
1a003264:	601e      	str	r6, [r3, #0]

	lcdClear();
1a003266:	f003 fcbf 	bl	1a006be8 <lcdClear>
	lcdGoToXY( 0, 0);
1a00326a:	2100      	movs	r1, #0
1a00326c:	4608      	mov	r0, r1
1a00326e:	f003 fc93 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( menu + windowStart);
1a003272:	682b      	ldr	r3, [r5, #0]
1a003274:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a003278:	0098      	lsls	r0, r3, #2
1a00327a:	3c64      	subs	r4, #100	; 0x64
1a00327c:	4420      	add	r0, r4
1a00327e:	f003 fcc6 	bl	1a006c0e <lcdSendStringRaw>
	lcdGoToXY( 0, 1);
1a003282:	4631      	mov	r1, r6
1a003284:	2000      	movs	r0, #0
1a003286:	f003 fc87 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( menu + windowStart+1);
1a00328a:	682b      	ldr	r3, [r5, #0]
1a00328c:	4433      	add	r3, r6
1a00328e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a003292:	0098      	lsls	r0, r3, #2
1a003294:	4420      	add	r0, r4
1a003296:	f003 fcba 	bl	1a006c0e <lcdSendStringRaw>
	lcdGoToXY( 0, 2);
1a00329a:	2102      	movs	r1, #2
1a00329c:	2000      	movs	r0, #0
1a00329e:	f003 fc7b 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( menu + windowStart+2);
1a0032a2:	682b      	ldr	r3, [r5, #0]
1a0032a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0032a8:	0098      	lsls	r0, r3, #2
1a0032aa:	3028      	adds	r0, #40	; 0x28
1a0032ac:	4420      	add	r0, r4
1a0032ae:	f003 fcae 	bl	1a006c0e <lcdSendStringRaw>
	lcdGoToXY( 0, 3);
1a0032b2:	2103      	movs	r1, #3
1a0032b4:	2000      	movs	r0, #0
1a0032b6:	f003 fc6f 	bl	1a006b98 <lcdGoToXY>
	lcdSendStringRaw( menu + windowStart+3);
1a0032ba:	682b      	ldr	r3, [r5, #0]
1a0032bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0032c0:	0098      	lsls	r0, r3, #2
1a0032c2:	303c      	adds	r0, #60	; 0x3c
1a0032c4:	4420      	add	r0, r4
1a0032c6:	f003 fca2 	bl	1a006c0e <lcdSendStringRaw>
}
1a0032ca:	bd70      	pop	{r4, r5, r6, pc}
		strcat(menu[0],"#1");
1a0032cc:	4630      	mov	r0, r6
1a0032ce:	f004 fca6 	bl	1a007c1e <strlen>
1a0032d2:	1982      	adds	r2, r0, r6
1a0032d4:	4b28      	ldr	r3, [pc, #160]	; (1a003378 <SMTB_Status_Show+0x224>)
1a0032d6:	8819      	ldrh	r1, [r3, #0]
1a0032d8:	789b      	ldrb	r3, [r3, #2]
1a0032da:	5381      	strh	r1, [r0, r6]
1a0032dc:	7093      	strb	r3, [r2, #2]
1a0032de:	e76c      	b.n	1a0031ba <SMTB_Status_Show+0x66>
		strcat(menu[1],"#2");
1a0032e0:	4c18      	ldr	r4, [pc, #96]	; (1a003344 <SMTB_Status_Show+0x1f0>)
1a0032e2:	4620      	mov	r0, r4
1a0032e4:	f004 fc9b 	bl	1a007c1e <strlen>
1a0032e8:	1902      	adds	r2, r0, r4
1a0032ea:	4b24      	ldr	r3, [pc, #144]	; (1a00337c <SMTB_Status_Show+0x228>)
1a0032ec:	8819      	ldrh	r1, [r3, #0]
1a0032ee:	789b      	ldrb	r3, [r3, #2]
1a0032f0:	5301      	strh	r1, [r0, r4]
1a0032f2:	7093      	strb	r3, [r2, #2]
1a0032f4:	e761      	b.n	1a0031ba <SMTB_Status_Show+0x66>
		strcat(menu[2],"NO");
1a0032f6:	4c15      	ldr	r4, [pc, #84]	; (1a00334c <SMTB_Status_Show+0x1f8>)
1a0032f8:	4620      	mov	r0, r4
1a0032fa:	f004 fc90 	bl	1a007c1e <strlen>
1a0032fe:	1902      	adds	r2, r0, r4
1a003300:	4b1f      	ldr	r3, [pc, #124]	; (1a003380 <SMTB_Status_Show+0x22c>)
1a003302:	8819      	ldrh	r1, [r3, #0]
1a003304:	789b      	ldrb	r3, [r3, #2]
1a003306:	5301      	strh	r1, [r0, r4]
1a003308:	7093      	strb	r3, [r2, #2]
1a00330a:	e770      	b.n	1a0031ee <SMTB_Status_Show+0x9a>
			strcat(menu[3],"NO");
1a00330c:	4c12      	ldr	r4, [pc, #72]	; (1a003358 <SMTB_Status_Show+0x204>)
1a00330e:	4620      	mov	r0, r4
1a003310:	f004 fc85 	bl	1a007c1e <strlen>
1a003314:	1902      	adds	r2, r0, r4
1a003316:	4b1a      	ldr	r3, [pc, #104]	; (1a003380 <SMTB_Status_Show+0x22c>)
1a003318:	8819      	ldrh	r1, [r3, #0]
1a00331a:	789b      	ldrb	r3, [r3, #2]
1a00331c:	5301      	strh	r1, [r0, r4]
1a00331e:	7093      	strb	r3, [r2, #2]
1a003320:	e77e      	b.n	1a003220 <SMTB_Status_Show+0xcc>
			strcat(menu[4],"NO");
1a003322:	4c0f      	ldr	r4, [pc, #60]	; (1a003360 <SMTB_Status_Show+0x20c>)
1a003324:	4620      	mov	r0, r4
1a003326:	f004 fc7a 	bl	1a007c1e <strlen>
1a00332a:	1902      	adds	r2, r0, r4
1a00332c:	4b14      	ldr	r3, [pc, #80]	; (1a003380 <SMTB_Status_Show+0x22c>)
1a00332e:	8819      	ldrh	r1, [r3, #0]
1a003330:	789b      	ldrb	r3, [r3, #2]
1a003332:	5301      	strh	r1, [r0, r4]
1a003334:	7093      	strb	r3, [r2, #2]
1a003336:	e78c      	b.n	1a003252 <SMTB_Status_Show+0xfe>
1a003338:	10004c34 	.word	0x10004c34
1a00333c:	1a008740 	.word	0x1a008740
1a003340:	1a008748 	.word	0x1a008748
1a003344:	10004c48 	.word	0x10004c48
1a003348:	1a008764 	.word	0x1a008764
1a00334c:	10004c5c 	.word	0x10004c5c
1a003350:	1a00876c 	.word	0x1a00876c
1a003354:	1a008780 	.word	0x1a008780
1a003358:	10004c70 	.word	0x10004c70
1a00335c:	1a008788 	.word	0x1a008788
1a003360:	10004c84 	.word	0x10004c84
1a003364:	1a00879c 	.word	0x1a00879c
1a003368:	10004c98 	.word	0x10004c98
1a00336c:	1a007fe0 	.word	0x1a007fe0
1a003370:	10004cc0 	.word	0x10004cc0
1a003374:	10004cc4 	.word	0x10004cc4
1a003378:	1a00875c 	.word	0x1a00875c
1a00337c:	1a008760 	.word	0x1a008760
1a003380:	1a008784 	.word	0x1a008784

1a003384 <SMTB_Init>:
* 			  int port, int pin puerto y pin del bus oneWire
* Que devuelve:  -1 si no hay lectura, 0 si hay lectura.
* Variables externas que modifca: N/A
*============================================================================*/
int SMTB_Init (void)
{
1a003384:	b510      	push	{r4, lr}
	//ToDo: chequeos de errores
	//ToDo: enviar lo que es oneshot a main()
	uartInit( UART_USB, 115200);//Comunicación por consola
1a003386:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a00338a:	2003      	movs	r0, #3
1a00338c:	f003 f896 	bl	1a0064bc <uartInit>
	uartInit( UART_485, 9600);
1a003390:	f44f 5116 	mov.w	r1, #9600	; 0x2580
1a003394:	2001      	movs	r0, #1
1a003396:	f003 f891 	bl	1a0064bc <uartInit>
	SMTB_LCD_Init();
1a00339a:	f7ff fa63 	bl	1a002864 <SMTB_LCD_Init>
	spiConfig( SPI0 );
1a00339e:	2000      	movs	r0, #0
1a0033a0:	f003 f8f4 	bl	1a00658c <spiInit>
	ledMatrixInit();
1a0033a4:	f000 f8f9 	bl	1a00359a <ledMatrixInit>
	buttonsInit();
1a0033a8:	f7fd fa64 	bl	1a000874 <buttonsInit>
	Board_EEPROM_init();
1a0033ac:	f7fd f83c 	bl	1a000428 <Board_EEPROM_init>
	semaphoreInit();
1a0033b0:	f7fe fb98 	bl	1a001ae4 <semaphoreInit>
//	systemMode = NORMAL;
	for(int i=0; i<N;i++ ) //Inicialización valores de eje, posición y temp
1a0033b4:	2200      	movs	r2, #0
1a0033b6:	2a17      	cmp	r2, #23
1a0033b8:	dc14      	bgt.n	1a0033e4 <SMTB_Init+0x60>
	{
		sensor[i].eje = (i/6);
1a0033ba:	4b0b      	ldr	r3, [pc, #44]	; (1a0033e8 <SMTB_Init+0x64>)
1a0033bc:	fb83 1302 	smull	r1, r3, r3, r2
1a0033c0:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
1a0033c4:	0090      	lsls	r0, r2, #2
1a0033c6:	4410      	add	r0, r2
1a0033c8:	0084      	lsls	r4, r0, #2
1a0033ca:	4908      	ldr	r1, [pc, #32]	; (1a0033ec <SMTB_Init+0x68>)
1a0033cc:	4421      	add	r1, r4
1a0033ce:	60cb      	str	r3, [r1, #12]
		sensor[i].posicion = i-sensor[i].eje*6;
1a0033d0:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
1a0033d4:	0058      	lsls	r0, r3, #1
1a0033d6:	4410      	add	r0, r2
1a0033d8:	6108      	str	r0, [r1, #16]
		sensor[i].temp = 0;
1a0033da:	2300      	movs	r3, #0
1a0033dc:	724b      	strb	r3, [r1, #9]
		sensor[i].estado = INACTIVE;   // ToDo: eliminar openTranquera
1a0033de:	720b      	strb	r3, [r1, #8]
	for(int i=0; i<N;i++ ) //Inicialización valores de eje, posición y temp
1a0033e0:	3201      	adds	r2, #1
1a0033e2:	e7e8      	b.n	1a0033b6 <SMTB_Init+0x32>
	setStatus(BIT_ROM_CONS_CHK, TRUE);
	setStatus(ROM_CONSIST, FALSE);
#endif

	return(0);
}
1a0033e4:	2000      	movs	r0, #0
1a0033e6:	bd10      	pop	{r4, pc}
1a0033e8:	2aaaaaab 	.word	0x2aaaaaab
1a0033ec:	10004d9c 	.word	0x10004d9c

1a0033f0 <setStatus>:
int setStatus(uint32_t feature, bool_t flag)
{
	uint32_t mascara;
	if(flag)
1a0033f0:	b129      	cbz	r1, 1a0033fe <setStatus+0xe>
	{
		status |= feature;
1a0033f2:	4a06      	ldr	r2, [pc, #24]	; (1a00340c <setStatus+0x1c>)
1a0033f4:	6813      	ldr	r3, [r2, #0]
1a0033f6:	4303      	orrs	r3, r0
1a0033f8:	6013      	str	r3, [r2, #0]
		mascara = ~feature;
		status &= mascara;
		return(0);
	}
	return(-1);
}
1a0033fa:	2000      	movs	r0, #0
1a0033fc:	4770      	bx	lr
		status &= mascara;
1a0033fe:	4a03      	ldr	r2, [pc, #12]	; (1a00340c <setStatus+0x1c>)
1a003400:	6813      	ldr	r3, [r2, #0]
1a003402:	ea23 0300 	bic.w	r3, r3, r0
1a003406:	6013      	str	r3, [r2, #0]
		return(0);
1a003408:	e7f7      	b.n	1a0033fa <setStatus+0xa>
1a00340a:	bf00      	nop
1a00340c:	10004f8c 	.word	0x10004f8c

1a003410 <getStatus>:

bool_t getStatus(uint32_t feature)
{
	//uint32_t mascara;
	if(status & feature)
1a003410:	4b03      	ldr	r3, [pc, #12]	; (1a003420 <getStatus+0x10>)
1a003412:	681b      	ldr	r3, [r3, #0]
1a003414:	4218      	tst	r0, r3
1a003416:	d001      	beq.n	1a00341c <getStatus+0xc>
		return(TRUE);
1a003418:	2001      	movs	r0, #1
1a00341a:	4770      	bx	lr
	else
		return(FALSE);
1a00341c:	2000      	movs	r0, #0
}
1a00341e:	4770      	bx	lr
1a003420:	10004f8c 	.word	0x10004f8c

1a003424 <remote_uci_test>:
	char message[8];
	uint8_t crc;
};

void remote_uci_test(uint8_t local_uci)
{
1a003424:	b500      	push	{lr}
1a003426:	b085      	sub	sp, #20
	struct intercommMsg_t msgToRemote;

	msgToRemote.msgType = COMMAND;
1a003428:	23ff      	movs	r3, #255	; 0xff
1a00342a:	f88d 3004 	strb.w	r3, [sp, #4]
	msgToRemote.order = I_AM;
1a00342e:	23f0      	movs	r3, #240	; 0xf0
1a003430:	f88d 3005 	strb.w	r3, [sp, #5]
	if(local_uci == 1)
1a003434:	2801      	cmp	r0, #1
1a003436:	d00c      	beq.n	1a003452 <remote_uci_test+0x2e>
		msgToRemote.message[0] = UCI_1;
	else if(local_uci == 2)
1a003438:	2802      	cmp	r0, #2
1a00343a:	d00e      	beq.n	1a00345a <remote_uci_test+0x36>
		msgToRemote.message[0] = UCI_2;
	xQueueSend(intercommQueue, &msgToRemote, TIMEOUT);
1a00343c:	2300      	movs	r3, #0
1a00343e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a003442:	a901      	add	r1, sp, #4
1a003444:	4807      	ldr	r0, [pc, #28]	; (1a003464 <remote_uci_test+0x40>)
1a003446:	6800      	ldr	r0, [r0, #0]
1a003448:	f000 fc92 	bl	1a003d70 <xQueueGenericSend>
}
1a00344c:	b005      	add	sp, #20
1a00344e:	f85d fb04 	ldr.w	pc, [sp], #4
		msgToRemote.message[0] = UCI_1;
1a003452:	2301      	movs	r3, #1
1a003454:	f88d 3006 	strb.w	r3, [sp, #6]
1a003458:	e7f0      	b.n	1a00343c <remote_uci_test+0x18>
		msgToRemote.message[0] = UCI_2;
1a00345a:	2302      	movs	r3, #2
1a00345c:	f88d 3006 	strb.w	r3, [sp, #6]
1a003460:	e7ec      	b.n	1a00343c <remote_uci_test+0x18>
1a003462:	bf00      	nop
1a003464:	10004d98 	.word	0x10004d98

1a003468 <uci_id_test>:

void uci_id_test(void)
{
1a003468:	b508      	push	{r3, lr}
	uint8_t posicion;
	posicion = Board_EEPROM_readByte(433);
1a00346a:	f240 10b1 	movw	r0, #433	; 0x1b1
1a00346e:	f7fc ffab 	bl	1a0003c8 <Board_EEPROM_readByte>
1a003472:	b2c0      	uxtb	r0, r0
		if(posicion==1)
1a003474:	2801      	cmp	r0, #1
1a003476:	d002      	beq.n	1a00347e <uci_id_test+0x16>
			setStatus(BIT_UCI_2, OFF);
			/* Create the other task in exactly the same way. */
			//xTaskCreate( UCI_1_task, (const char *)"UCI#1 Task", configMINIMAL_STACK_SIZE*2, NULL, tskIDLE_PRIORITY+1, NULL );
			//  configASSERT( res == pdPASS );
		}
		else if(posicion==2)
1a003478:	2802      	cmp	r0, #2
1a00347a:	d00b      	beq.n	1a003494 <uci_id_test+0x2c>
			//  ToDo: manejo de error POSICION
			//printf("ERROR Posición: %d    ",Board_EEPROM_readByte(433));delay(1000); ////////////////////cambiar por API FREERTOS/////////////////////////////
	//		modo=0xA0;
		}

}
1a00347c:	bd08      	pop	{r3, pc}
			setStatus(BIT_UCI_1, ON);
1a00347e:	2101      	movs	r1, #1
1a003480:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
1a003484:	f7ff ffb4 	bl	1a0033f0 <setStatus>
			setStatus(BIT_UCI_2, OFF);
1a003488:	2100      	movs	r1, #0
1a00348a:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
1a00348e:	f7ff ffaf 	bl	1a0033f0 <setStatus>
1a003492:	e7f3      	b.n	1a00347c <uci_id_test+0x14>
			setStatus(BIT_UCI_1, OFF);
1a003494:	2100      	movs	r1, #0
1a003496:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
1a00349a:	f7ff ffa9 	bl	1a0033f0 <setStatus>
			setStatus(BIT_UCI_2, ON);
1a00349e:	2101      	movs	r1, #1
1a0034a0:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
1a0034a4:	f7ff ffa4 	bl	1a0033f0 <setStatus>
}
1a0034a8:	e7e8      	b.n	1a00347c <uci_id_test+0x14>

1a0034aa <rom_test>:

void rom_test(void)
{
1a0034aa:	b508      	push	{r3, lr}
	uint8_t serie;
	serie = Board_EEPROM_readByte(432);
1a0034ac:	f44f 70d8 	mov.w	r0, #432	; 0x1b0
1a0034b0:	f7fc ff8a 	bl	1a0003c8 <Board_EEPROM_readByte>
1a0034b4:	b2c0      	uxtb	r0, r0
	if((100>serie)||(serie>120))
1a0034b6:	3864      	subs	r0, #100	; 0x64
1a0034b8:	b2c0      	uxtb	r0, r0
1a0034ba:	2814      	cmp	r0, #20
1a0034bc:	d805      	bhi.n	1a0034ca <rom_test+0x20>
		setStatus(BIT_EEPROM, OFF);
		//  ToDo: manejo de error EEPROM
		//printf("ERROR Eeprom\r\n");
	}

	setStatus(BIT_EEPROM, ON);
1a0034be:	2101      	movs	r1, #1
1a0034c0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
1a0034c4:	f7ff ff94 	bl	1a0033f0 <setStatus>
}
1a0034c8:	bd08      	pop	{r3, pc}
		setStatus(BIT_EEPROM, OFF);
1a0034ca:	2100      	movs	r1, #0
1a0034cc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
1a0034d0:	f7ff ff8e 	bl	1a0033f0 <setStatus>
1a0034d4:	e7f3      	b.n	1a0034be <rom_test+0x14>
1a0034d6:	Address 0x000000001a0034d6 is out of bounds.


1a0034d8 <ROM_request>:
	printf("retorno: %d\r\n",retVal);
	return(retVal);
}

void ROM_request(uint8_t position)
{
1a0034d8:	b510      	push	{r4, lr}
1a0034da:	b084      	sub	sp, #16
1a0034dc:	4604      	mov	r4, r0
	struct intercommMsg_t msgToRemote;

	printf("ROM_request\r\n");
1a0034de:	480a      	ldr	r0, [pc, #40]	; (1a003508 <ROM_request+0x30>)
1a0034e0:	f004 fb52 	bl	1a007b88 <puts>
	msgToRemote.msgType = COMMAND;
1a0034e4:	23ff      	movs	r3, #255	; 0xff
1a0034e6:	f88d 3004 	strb.w	r3, [sp, #4]
	msgToRemote.order = SEND_ROM;
1a0034ea:	23ee      	movs	r3, #238	; 0xee
1a0034ec:	f88d 3005 	strb.w	r3, [sp, #5]
	msgToRemote.message[0] = position;
1a0034f0:	f88d 4006 	strb.w	r4, [sp, #6]
	xQueueSend(intercommQueue, &msgToRemote, TIMEOUT);
1a0034f4:	2300      	movs	r3, #0
1a0034f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a0034fa:	a901      	add	r1, sp, #4
1a0034fc:	4803      	ldr	r0, [pc, #12]	; (1a00350c <ROM_request+0x34>)
1a0034fe:	6800      	ldr	r0, [r0, #0]
1a003500:	f000 fc36 	bl	1a003d70 <xQueueGenericSend>
	//1 enviar req de ROM a UCI_REM.....................OK
	//2 recibir en UCI_REM..............................OK
	//3 actualizar dato ROM_remota
}
1a003504:	b004      	add	sp, #16
1a003506:	bd10      	pop	{r4, pc}
1a003508:	1a0087ec 	.word	0x1a0087ec
1a00350c:	10004d98 	.word	0x10004d98

1a003510 <buzzer_test>:

void buzzer_test(void)
{
1a003510:	b508      	push	{r3, lr}
	//ToDo: modulo HAL para buzzer///////////////////////
	gpioInit(GPIO4, GPIO_OUTPUT );                     //
1a003512:	2101      	movs	r1, #1
1a003514:	201e      	movs	r0, #30
1a003516:	f003 f897 	bl	1a006648 <gpioInit>
	gpioWrite(GPIO4,ON); // Buzzer                     //
1a00351a:	2101      	movs	r1, #1
1a00351c:	201e      	movs	r0, #30
1a00351e:	f003 f969 	bl	1a0067f4 <gpioWrite>
	vTaskDelay(100);										   //
1a003522:	2064      	movs	r0, #100	; 0x64
1a003524:	f001 fa20 	bl	1a004968 <vTaskDelay>
	gpioWrite(GPIO4,OFF);                              //
1a003528:	2100      	movs	r1, #0
1a00352a:	201e      	movs	r0, #30
1a00352c:	f003 f962 	bl	1a0067f4 <gpioWrite>
	//hasta acá//////////////////////////////////////////
}
1a003530:	bd08      	pop	{r3, pc}

1a003532 <semaphoreTest>:

//ToDo: pasar a modulo HAL semaforo
void semaphoreTest(void)
{
1a003532:	b508      	push	{r3, lr}
	gpioWrite( SEM_RED, ON );
1a003534:	2101      	movs	r1, #1
1a003536:	201b      	movs	r0, #27
1a003538:	f003 f95c 	bl	1a0067f4 <gpioWrite>
	vTaskDelay(500);
1a00353c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a003540:	f001 fa12 	bl	1a004968 <vTaskDelay>
	gpioWrite( SEM_GREEN, ON );
1a003544:	2101      	movs	r1, #1
1a003546:	201c      	movs	r0, #28
1a003548:	f003 f954 	bl	1a0067f4 <gpioWrite>
	vTaskDelay(500);
1a00354c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a003550:	f001 fa0a 	bl	1a004968 <vTaskDelay>
	gpioWrite( SEM_RED, OFF );
1a003554:	2100      	movs	r1, #0
1a003556:	201b      	movs	r0, #27
1a003558:	f003 f94c 	bl	1a0067f4 <gpioWrite>
	vTaskDelay(500);
1a00355c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a003560:	f001 fa02 	bl	1a004968 <vTaskDelay>
	gpioWrite( SEM_GREEN, OFF );
1a003564:	2100      	movs	r1, #0
1a003566:	201c      	movs	r0, #28
1a003568:	f003 f944 	bl	1a0067f4 <gpioWrite>
}
1a00356c:	bd08      	pop	{r3, pc}

1a00356e <writeRow>:

//static uint8_t data;
//static uint8_t reg;

void writeRow(uint8_t regX, uint8_t dataX )
{
1a00356e:	b500      	push	{lr}
1a003570:	b083      	sub	sp, #12
	uint8_t message[2];

	message[0] = regX;
1a003572:	f88d 0004 	strb.w	r0, [sp, #4]
	message[1] = dataX;
1a003576:	f88d 1005 	strb.w	r1, [sp, #5]
	gpioWrite(SPI_GPIO, OFF);
1a00357a:	2100      	movs	r1, #0
1a00357c:	200f      	movs	r0, #15
1a00357e:	f003 f939 	bl	1a0067f4 <gpioWrite>
	spiWrite(SPI0, message, 2);
1a003582:	2202      	movs	r2, #2
1a003584:	a901      	add	r1, sp, #4
1a003586:	2000      	movs	r0, #0
1a003588:	f003 f828 	bl	1a0065dc <spiWrite>
	gpioWrite(SPI_GPIO, ON);
1a00358c:	2101      	movs	r1, #1
1a00358e:	200f      	movs	r0, #15
1a003590:	f003 f930 	bl	1a0067f4 <gpioWrite>
	//delay(T_STEP);
}
1a003594:	b003      	add	sp, #12
1a003596:	f85d fb04 	ldr.w	pc, [sp], #4

1a00359a <ledMatrixInit>:

void ledMatrixInit(void)
{
1a00359a:	b508      	push	{r3, lr}
	gpioInit( SPI_GPIO, GPIO_OUTPUT );
1a00359c:	2101      	movs	r1, #1
1a00359e:	200f      	movs	r0, #15
1a0035a0:	f003 f852 	bl	1a006648 <gpioInit>
	gpioWrite(SPI_GPIO, ON);
1a0035a4:	2101      	movs	r1, #1
1a0035a6:	200f      	movs	r0, #15
1a0035a8:	f003 f924 	bl	1a0067f4 <gpioWrite>
//	 control(TEST, OFF);
//	reg = REG_TEST;
//	data = 0x00;	// no test
	writeRow(REG_TEST, 0x00);
1a0035ac:	2100      	movs	r1, #0
1a0035ae:	200f      	movs	r0, #15
1a0035b0:	f7ff ffdd 	bl	1a00356e <writeRow>
////	  control(SCANLIMIT, ROW_SIZE-1);       // scan limit is set to max on startup
//	reg = REG_SCANLIMIT;
//	data = 0x07;
	writeRow(REG_SCANLIMIT, 0x07);
1a0035b4:	2107      	movs	r1, #7
1a0035b6:	200b      	movs	r0, #11
1a0035b8:	f7ff ffd9 	bl	1a00356e <writeRow>
////	  control(INTENSITY, MAX_INTENSITY/2);  // set intensity to a reasonable value
//	reg = REG_INTENSITY;
//	data = 0x04;
	writeRow(REG_INTENSITY,0x0F);
1a0035bc:	210f      	movs	r1, #15
1a0035be:	200a      	movs	r0, #10
1a0035c0:	f7ff ffd5 	bl	1a00356e <writeRow>
////	  control(DECODE, OFF);                 // ensure no decoding (warm boot potential issue)
//	reg = REG_DECODE;
//	data = 0x00;
	writeRow(REG_DECODE,0x00);
1a0035c4:	2100      	movs	r1, #0
1a0035c6:	2009      	movs	r0, #9
1a0035c8:	f7ff ffd1 	bl	1a00356e <writeRow>
////	  control(SHUTDOWN, OFF);               // take the modules out of shutdown mode
//	reg = REG_SHUTDOWN;
//	data = 0x01;
	writeRow(REG_SHUTDOWN,0x01);
1a0035cc:	2101      	movs	r1, #1
1a0035ce:	200c      	movs	r0, #12
1a0035d0:	f7ff ffcd 	bl	1a00356e <writeRow>
//// test ON
//	reg = REG_TEST;
//	data = 0x01;
	writeRow(REG_TEST,0x01);
1a0035d4:	2101      	movs	r1, #1
1a0035d6:	200f      	movs	r0, #15
1a0035d8:	f7ff ffc9 	bl	1a00356e <writeRow>
	delay(200);
1a0035dc:	20c8      	movs	r0, #200	; 0xc8
1a0035de:	2100      	movs	r1, #0
1a0035e0:	f003 f9e6 	bl	1a0069b0 <delay>
//// test OFF
//	reg = REG_TEST;
//	data = 0x00;
	writeRow(REG_TEST,0x00);
1a0035e4:	2100      	movs	r1, #0
1a0035e6:	200f      	movs	r0, #15
1a0035e8:	f7ff ffc1 	bl	1a00356e <writeRow>
}
1a0035ec:	bd08      	pop	{r3, pc}

1a0035ee <ledMatrixClear>:

void ledMatrixClear(void)
{
1a0035ee:	b510      	push	{r4, lr}
	for(int i=0;i<7;i++)
1a0035f0:	2400      	movs	r4, #0
1a0035f2:	2c06      	cmp	r4, #6
1a0035f4:	dc05      	bgt.n	1a003602 <ledMatrixClear+0x14>
	{
//		reg = i;
//		data = 0;
		writeRow(i,0);
1a0035f6:	2100      	movs	r1, #0
1a0035f8:	b2e0      	uxtb	r0, r4
1a0035fa:	f7ff ffb8 	bl	1a00356e <writeRow>
	for(int i=0;i<7;i++)
1a0035fe:	3401      	adds	r4, #1
1a003600:	e7f7      	b.n	1a0035f2 <ledMatrixClear+0x4>
		//delay(10);
	}
}
1a003602:	bd10      	pop	{r4, pc}

1a003604 <ledMatrixTest>:

void ledMatrixTest(void)
{
1a003604:	b570      	push	{r4, r5, r6, lr}
	int data;
	for(int i=1;i<7;i++)
1a003606:	2601      	movs	r6, #1
1a003608:	e000      	b.n	1a00360c <ledMatrixTest+0x8>
1a00360a:	3601      	adds	r6, #1
1a00360c:	2e06      	cmp	r6, #6
1a00360e:	dc0e      	bgt.n	1a00362e <ledMatrixTest+0x2a>
	{
//		reg = i;
		data = 128;
		for(int j=0;j<7;j++)
1a003610:	2400      	movs	r4, #0
		data = 128;
1a003612:	2580      	movs	r5, #128	; 0x80
		for(int j=0;j<7;j++)
1a003614:	2c06      	cmp	r4, #6
1a003616:	dcf8      	bgt.n	1a00360a <ledMatrixTest+0x6>
		{
			data>>=1;
1a003618:	106d      	asrs	r5, r5, #1
			writeRow(i, data);
1a00361a:	b2e9      	uxtb	r1, r5
1a00361c:	b2f0      	uxtb	r0, r6
1a00361e:	f7ff ffa6 	bl	1a00356e <writeRow>
			delay(100);
1a003622:	2064      	movs	r0, #100	; 0x64
1a003624:	2100      	movs	r1, #0
1a003626:	f003 f9c3 	bl	1a0069b0 <delay>
		for(int j=0;j<7;j++)
1a00362a:	3401      	adds	r4, #1
1a00362c:	e7f2      	b.n	1a003614 <ledMatrixTest+0x10>
		}
	}
	//vTaskDelay(200);
	delay(200);
1a00362e:	20c8      	movs	r0, #200	; 0xc8
1a003630:	2100      	movs	r1, #0
1a003632:	f003 f9bd 	bl	1a0069b0 <delay>
	ledMatrixClear();
1a003636:	f7ff ffda 	bl	1a0035ee <ledMatrixClear>
	data=0b00011000;
	writeRow(3, data);
1a00363a:	2118      	movs	r1, #24
1a00363c:	2003      	movs	r0, #3
1a00363e:	f7ff ff96 	bl	1a00356e <writeRow>
	writeRow(4, data);
1a003642:	2118      	movs	r1, #24
1a003644:	2004      	movs	r0, #4
1a003646:	f7ff ff92 	bl	1a00356e <writeRow>
	//vTaskDelay(200);
	delay(200);
1a00364a:	20c8      	movs	r0, #200	; 0xc8
1a00364c:	2100      	movs	r1, #0
1a00364e:	f003 f9af 	bl	1a0069b0 <delay>
	ledMatrixClear();
1a003652:	f7ff ffcc 	bl	1a0035ee <ledMatrixClear>
	data=0b00111100;
	writeRow(2, data);
1a003656:	213c      	movs	r1, #60	; 0x3c
1a003658:	2002      	movs	r0, #2
1a00365a:	f7ff ff88 	bl	1a00356e <writeRow>
	writeRow(5, data);
1a00365e:	213c      	movs	r1, #60	; 0x3c
1a003660:	2005      	movs	r0, #5
1a003662:	f7ff ff84 	bl	1a00356e <writeRow>
	data=0b00100100;
	writeRow(3, data);
1a003666:	2124      	movs	r1, #36	; 0x24
1a003668:	2003      	movs	r0, #3
1a00366a:	f7ff ff80 	bl	1a00356e <writeRow>
	writeRow(4, data);
1a00366e:	2124      	movs	r1, #36	; 0x24
1a003670:	2004      	movs	r0, #4
1a003672:	f7ff ff7c 	bl	1a00356e <writeRow>
	//vTaskDelay(200);
	delay(200);
1a003676:	20c8      	movs	r0, #200	; 0xc8
1a003678:	2100      	movs	r1, #0
1a00367a:	f003 f999 	bl	1a0069b0 <delay>
	ledMatrixClear();
1a00367e:	f7ff ffb6 	bl	1a0035ee <ledMatrixClear>
	data=0b01111110;
	writeRow(1, data);
1a003682:	217e      	movs	r1, #126	; 0x7e
1a003684:	2001      	movs	r0, #1
1a003686:	f7ff ff72 	bl	1a00356e <writeRow>
	writeRow(6, data);
1a00368a:	217e      	movs	r1, #126	; 0x7e
1a00368c:	2006      	movs	r0, #6
1a00368e:	f7ff ff6e 	bl	1a00356e <writeRow>
	data=0b01000010;
	writeRow(2, data);
1a003692:	2142      	movs	r1, #66	; 0x42
1a003694:	2002      	movs	r0, #2
1a003696:	f7ff ff6a 	bl	1a00356e <writeRow>
	writeRow(5, data);
1a00369a:	2142      	movs	r1, #66	; 0x42
1a00369c:	2005      	movs	r0, #5
1a00369e:	f7ff ff66 	bl	1a00356e <writeRow>
	data=0b01000010;
	writeRow(3, data);
1a0036a2:	2142      	movs	r1, #66	; 0x42
1a0036a4:	2003      	movs	r0, #3
1a0036a6:	f7ff ff62 	bl	1a00356e <writeRow>
	writeRow(4, data);
1a0036aa:	2142      	movs	r1, #66	; 0x42
1a0036ac:	2004      	movs	r0, #4
1a0036ae:	f7ff ff5e 	bl	1a00356e <writeRow>
	//vTaskDelay(200);
	delay(200);
1a0036b2:	20c8      	movs	r0, #200	; 0xc8
1a0036b4:	2100      	movs	r1, #0
1a0036b6:	f003 f97b 	bl	1a0069b0 <delay>
	ledMatrixClear();
1a0036ba:	f7ff ff98 	bl	1a0035ee <ledMatrixClear>
	data=0b00111100;
	writeRow(2, data);
1a0036be:	213c      	movs	r1, #60	; 0x3c
1a0036c0:	2002      	movs	r0, #2
1a0036c2:	f7ff ff54 	bl	1a00356e <writeRow>
	writeRow(5, data);
1a0036c6:	213c      	movs	r1, #60	; 0x3c
1a0036c8:	2005      	movs	r0, #5
1a0036ca:	f7ff ff50 	bl	1a00356e <writeRow>
	data=0b00100100;
	writeRow(3, data);
1a0036ce:	2124      	movs	r1, #36	; 0x24
1a0036d0:	2003      	movs	r0, #3
1a0036d2:	f7ff ff4c 	bl	1a00356e <writeRow>
	writeRow(4, data);
1a0036d6:	2124      	movs	r1, #36	; 0x24
1a0036d8:	2004      	movs	r0, #4
1a0036da:	f7ff ff48 	bl	1a00356e <writeRow>
	//vTaskDelay(200);
	delay(200);
1a0036de:	20c8      	movs	r0, #200	; 0xc8
1a0036e0:	2100      	movs	r1, #0
1a0036e2:	f003 f965 	bl	1a0069b0 <delay>
	ledMatrixClear();
1a0036e6:	f7ff ff82 	bl	1a0035ee <ledMatrixClear>
	data=0b00011000;
	writeRow(3, data);
1a0036ea:	2118      	movs	r1, #24
1a0036ec:	2003      	movs	r0, #3
1a0036ee:	f7ff ff3e 	bl	1a00356e <writeRow>
	writeRow(4, data);
1a0036f2:	2118      	movs	r1, #24
1a0036f4:	2004      	movs	r0, #4
1a0036f6:	f7ff ff3a 	bl	1a00356e <writeRow>
	//vTaskDelay(200);
	delay(200);
1a0036fa:	20c8      	movs	r0, #200	; 0xc8
1a0036fc:	2100      	movs	r1, #0
1a0036fe:	f003 f957 	bl	1a0069b0 <delay>
	ledMatrixClear();
1a003702:	f7ff ff74 	bl	1a0035ee <ledMatrixClear>
	return;
}
1a003706:	bd70      	pop	{r4, r5, r6, pc}

1a003708 <initialise_monitor_handles>:
}
1a003708:	4770      	bx	lr
1a00370a:	Address 0x000000001a00370a is out of bounds.


1a00370c <Reset_Handler>:
void Reset_Handler(void) {
1a00370c:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a00370e:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a003710:	4b19      	ldr	r3, [pc, #100]	; (1a003778 <Reset_Handler+0x6c>)
1a003712:	4a1a      	ldr	r2, [pc, #104]	; (1a00377c <Reset_Handler+0x70>)
1a003714:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a003716:	3304      	adds	r3, #4
1a003718:	4a19      	ldr	r2, [pc, #100]	; (1a003780 <Reset_Handler+0x74>)
1a00371a:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00371c:	2300      	movs	r3, #0
1a00371e:	e005      	b.n	1a00372c <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a003720:	4a18      	ldr	r2, [pc, #96]	; (1a003784 <Reset_Handler+0x78>)
1a003722:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a003726:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00372a:	3301      	adds	r3, #1
1a00372c:	2b07      	cmp	r3, #7
1a00372e:	d9f7      	bls.n	1a003720 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a003730:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a003732:	4b15      	ldr	r3, [pc, #84]	; (1a003788 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a003734:	e007      	b.n	1a003746 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a003736:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a00373a:	689a      	ldr	r2, [r3, #8]
1a00373c:	6859      	ldr	r1, [r3, #4]
1a00373e:	6818      	ldr	r0, [r3, #0]
1a003740:	f7fc fd23 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a003744:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a003746:	4a11      	ldr	r2, [pc, #68]	; (1a00378c <Reset_Handler+0x80>)
1a003748:	4293      	cmp	r3, r2
1a00374a:	d3f4      	bcc.n	1a003736 <Reset_Handler+0x2a>
1a00374c:	e006      	b.n	1a00375c <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a00374e:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a003750:	6859      	ldr	r1, [r3, #4]
1a003752:	f854 0b08 	ldr.w	r0, [r4], #8
1a003756:	f7fc fd27 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a00375a:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a00375c:	4a0c      	ldr	r2, [pc, #48]	; (1a003790 <Reset_Handler+0x84>)
1a00375e:	4293      	cmp	r3, r2
1a003760:	d3f5      	bcc.n	1a00374e <Reset_Handler+0x42>
    SystemInit();
1a003762:	f002 fe57 	bl	1a006414 <SystemInit>
    __libc_init_array();
1a003766:	f003 fdb3 	bl	1a0072d0 <__libc_init_array>
    initialise_monitor_handles();
1a00376a:	f7ff ffcd 	bl	1a003708 <initialise_monitor_handles>
    main();
1a00376e:	f7fd fcdf 	bl	1a001130 <main>
        __asm__ volatile("wfi");
1a003772:	bf30      	wfi
1a003774:	e7fd      	b.n	1a003772 <Reset_Handler+0x66>
1a003776:	bf00      	nop
1a003778:	40053100 	.word	0x40053100
1a00377c:	10df1000 	.word	0x10df1000
1a003780:	01dff7ff 	.word	0x01dff7ff
1a003784:	e000e280 	.word	0xe000e280
1a003788:	1a000114 	.word	0x1a000114
1a00378c:	1a000150 	.word	0x1a000150
1a003790:	1a000178 	.word	0x1a000178

1a003794 <_fini>:
void _fini(void) {}
1a003794:	4770      	bx	lr

1a003796 <_init>:
void _init(void) {}
1a003796:	4770      	bx	lr

1a003798 <_close_r>:
   (void) __params__;
}

USED int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a003798:	2309      	movs	r3, #9
1a00379a:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00379c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0037a0:	4770      	bx	lr

1a0037a2 <_fstat_r>:
}

USED int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a0037a2:	2358      	movs	r3, #88	; 0x58
1a0037a4:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0037a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0037aa:	4770      	bx	lr

1a0037ac <_isatty_r>:
   UNUSED(r);
   return 1;
}

USED int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a0037ac:	2902      	cmp	r1, #2
1a0037ae:	d904      	bls.n	1a0037ba <_isatty_r+0xe>
   case 0:
   case 1:
   case 2:
       return 1;
   default:
       SET_ERR(EBADF);
1a0037b0:	2309      	movs	r3, #9
1a0037b2:	6003      	str	r3, [r0, #0]
       return -1;
1a0037b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0037b8:	4770      	bx	lr
       return 1;
1a0037ba:	2001      	movs	r0, #1
   }
}
1a0037bc:	4770      	bx	lr

1a0037be <_lseek_r>:

USED _off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a0037be:	2358      	movs	r3, #88	; 0x58
1a0037c0:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0037c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0037c6:	4770      	bx	lr

1a0037c8 <_read_r>:
   }
}
*/
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a0037c8:	2902      	cmp	r1, #2
1a0037ca:	d81f      	bhi.n	1a00380c <_read_r+0x44>
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a0037cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0037d0:	461d      	mov	r5, r3
1a0037d2:	4617      	mov	r7, r2
1a0037d4:	4606      	mov	r6, r0
  size_t i = 0;
1a0037d6:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a0037d8:	42ac      	cmp	r4, r5
1a0037da:	d211      	bcs.n	1a003800 <_read_r+0x38>
         int c = __stdio_getchar();
1a0037dc:	f001 ffa1 	bl	1a005722 <__stdio_getchar>
         if( c != -1 ){
1a0037e0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0037e4:	d0f8      	beq.n	1a0037d8 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a0037e6:	f104 0801 	add.w	r8, r4, #1
1a0037ea:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a0037ec:	280d      	cmp	r0, #13
1a0037ee:	d003      	beq.n	1a0037f8 <_read_r+0x30>
1a0037f0:	280a      	cmp	r0, #10
1a0037f2:	d001      	beq.n	1a0037f8 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a0037f4:	4644      	mov	r4, r8
1a0037f6:	e7ef      	b.n	1a0037d8 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a0037f8:	f001 ff93 	bl	1a005722 <__stdio_getchar>
               return i;
1a0037fc:	4640      	mov	r0, r8
1a0037fe:	e003      	b.n	1a003808 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a003800:	2313      	movs	r3, #19
1a003802:	6033      	str	r3, [r6, #0]
      return -1;
1a003804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a003808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a00380c:	2313      	movs	r3, #19
1a00380e:	6003      	str	r3, [r0, #0]
      return -1;
1a003810:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a003814:	4770      	bx	lr

1a003816 <_write_r>:
   return -1;
}

USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a003816:	2902      	cmp	r1, #2
1a003818:	d80c      	bhi.n	1a003834 <_write_r+0x1e>
USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a00381a:	b570      	push	{r4, r5, r6, lr}
1a00381c:	461d      	mov	r5, r3
1a00381e:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a003820:	2400      	movs	r4, #0
1a003822:	42ac      	cmp	r4, r5
1a003824:	d204      	bcs.n	1a003830 <_write_r+0x1a>
           __stdio_putchar(((char*) b)[i]);
1a003826:	5d30      	ldrb	r0, [r6, r4]
1a003828:	f001 ff76 	bl	1a005718 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a00382c:	3401      	adds	r4, #1
1a00382e:	e7f8      	b.n	1a003822 <_write_r+0xc>
       return n;
1a003830:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a003832:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a003834:	2313      	movs	r3, #19
1a003836:	6003      	str	r3, [r0, #0]
       return -1;
1a003838:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a00383c:	4770      	bx	lr
1a00383e:	Address 0x000000001a00383e is out of bounds.


1a003840 <_sbrk_r>:

USED void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a003840:	4b05      	ldr	r3, [pc, #20]	; (1a003858 <_sbrk_r+0x18>)
1a003842:	681b      	ldr	r3, [r3, #0]
1a003844:	b123      	cbz	r3, 1a003850 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a003846:	4b04      	ldr	r3, [pc, #16]	; (1a003858 <_sbrk_r+0x18>)
1a003848:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a00384a:	4401      	add	r1, r0
1a00384c:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a00384e:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a003850:	4b01      	ldr	r3, [pc, #4]	; (1a003858 <_sbrk_r+0x18>)
1a003852:	4a02      	ldr	r2, [pc, #8]	; (1a00385c <_sbrk_r+0x1c>)
1a003854:	601a      	str	r2, [r3, #0]
1a003856:	e7f6      	b.n	1a003846 <_sbrk_r+0x6>
1a003858:	100000fc 	.word	0x100000fc
1a00385c:	10004ff8 	.word	0x10004ff8

1a003860 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
1a003860:	4a12      	ldr	r2, [pc, #72]	; (1a0038ac <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
1a003862:	f012 0f07 	tst.w	r2, #7
1a003866:	d007      	beq.n	1a003878 <prvHeapInit+0x18>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
1a003868:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a00386a:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
1a00386e:	f5c1 4380 	rsb	r3, r1, #16384	; 0x4000
1a003872:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a003874:	460a      	mov	r2, r1
1a003876:	e001      	b.n	1a00387c <prvHeapInit+0x1c>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
1a003878:	f44f 4380 	mov.w	r3, #16384	; 0x4000

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
1a00387c:	480c      	ldr	r0, [pc, #48]	; (1a0038b0 <prvHeapInit+0x50>)
1a00387e:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
1a003880:	2100      	movs	r1, #0
1a003882:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
1a003884:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
1a003886:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a003888:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
1a00388c:	4809      	ldr	r0, [pc, #36]	; (1a0038b4 <prvHeapInit+0x54>)
1a00388e:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
1a003890:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
1a003892:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
1a003894:	1a99      	subs	r1, r3, r2
1a003896:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
1a003898:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a00389a:	4b07      	ldr	r3, [pc, #28]	; (1a0038b8 <prvHeapInit+0x58>)
1a00389c:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a00389e:	4b07      	ldr	r3, [pc, #28]	; (1a0038bc <prvHeapInit+0x5c>)
1a0038a0:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
1a0038a2:	4b07      	ldr	r3, [pc, #28]	; (1a0038c0 <prvHeapInit+0x60>)
1a0038a4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
1a0038a8:	601a      	str	r2, [r3, #0]
}
1a0038aa:	4770      	bx	lr
1a0038ac:	10000104 	.word	0x10000104
1a0038b0:	10004110 	.word	0x10004110
1a0038b4:	10000100 	.word	0x10000100
1a0038b8:	1000410c 	.word	0x1000410c
1a0038bc:	10004108 	.word	0x10004108
1a0038c0:	10004104 	.word	0x10004104

1a0038c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
1a0038c4:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a0038c6:	4a13      	ldr	r2, [pc, #76]	; (1a003914 <prvInsertBlockIntoFreeList+0x50>)
1a0038c8:	e000      	b.n	1a0038cc <prvInsertBlockIntoFreeList+0x8>
1a0038ca:	461a      	mov	r2, r3
1a0038cc:	6813      	ldr	r3, [r2, #0]
1a0038ce:	4283      	cmp	r3, r0
1a0038d0:	d3fb      	bcc.n	1a0038ca <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
1a0038d2:	6851      	ldr	r1, [r2, #4]
1a0038d4:	1854      	adds	r4, r2, r1
1a0038d6:	4284      	cmp	r4, r0
1a0038d8:	d00a      	beq.n	1a0038f0 <prvInsertBlockIntoFreeList+0x2c>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
1a0038da:	6841      	ldr	r1, [r0, #4]
1a0038dc:	1844      	adds	r4, r0, r1
1a0038de:	42a3      	cmp	r3, r4
1a0038e0:	d00b      	beq.n	1a0038fa <prvInsertBlockIntoFreeList+0x36>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
1a0038e2:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
1a0038e4:	4290      	cmp	r0, r2
1a0038e6:	d000      	beq.n	1a0038ea <prvInsertBlockIntoFreeList+0x26>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
1a0038e8:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
1a0038ea:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0038ee:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
1a0038f0:	6840      	ldr	r0, [r0, #4]
1a0038f2:	4401      	add	r1, r0
1a0038f4:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
1a0038f6:	4610      	mov	r0, r2
1a0038f8:	e7ef      	b.n	1a0038da <prvInsertBlockIntoFreeList+0x16>
		if( pxIterator->pxNextFreeBlock != pxEnd )
1a0038fa:	4c07      	ldr	r4, [pc, #28]	; (1a003918 <prvInsertBlockIntoFreeList+0x54>)
1a0038fc:	6824      	ldr	r4, [r4, #0]
1a0038fe:	42a3      	cmp	r3, r4
1a003900:	d006      	beq.n	1a003910 <prvInsertBlockIntoFreeList+0x4c>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
1a003902:	685b      	ldr	r3, [r3, #4]
1a003904:	4419      	add	r1, r3
1a003906:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
1a003908:	6813      	ldr	r3, [r2, #0]
1a00390a:	681b      	ldr	r3, [r3, #0]
1a00390c:	6003      	str	r3, [r0, #0]
1a00390e:	e7e9      	b.n	1a0038e4 <prvInsertBlockIntoFreeList+0x20>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
1a003910:	6004      	str	r4, [r0, #0]
1a003912:	e7e7      	b.n	1a0038e4 <prvInsertBlockIntoFreeList+0x20>
1a003914:	10004110 	.word	0x10004110
1a003918:	10000100 	.word	0x10000100

1a00391c <pvPortMalloc>:
{
1a00391c:	b570      	push	{r4, r5, r6, lr}
1a00391e:	4604      	mov	r4, r0
	vTaskSuspendAll();
1a003920:	f000 ff0a 	bl	1a004738 <vTaskSuspendAll>
		if( pxEnd == NULL )
1a003924:	4b3f      	ldr	r3, [pc, #252]	; (1a003a24 <pvPortMalloc+0x108>)
1a003926:	681b      	ldr	r3, [r3, #0]
1a003928:	b1bb      	cbz	r3, 1a00395a <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
1a00392a:	4b3f      	ldr	r3, [pc, #252]	; (1a003a28 <pvPortMalloc+0x10c>)
1a00392c:	681b      	ldr	r3, [r3, #0]
1a00392e:	421c      	tst	r4, r3
1a003930:	d116      	bne.n	1a003960 <pvPortMalloc+0x44>
			if( xWantedSize > 0 )
1a003932:	b334      	cbz	r4, 1a003982 <pvPortMalloc+0x66>
				xWantedSize += xHeapStructSize;
1a003934:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
1a003936:	f014 0f07 	tst.w	r4, #7
1a00393a:	d022      	beq.n	1a003982 <pvPortMalloc+0x66>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a00393c:	f024 0407 	bic.w	r4, r4, #7
1a003940:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
1a003942:	f004 0307 	and.w	r3, r4, #7
1a003946:	b1e3      	cbz	r3, 1a003982 <pvPortMalloc+0x66>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a003948:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00394c:	f383 8811 	msr	BASEPRI, r3
1a003950:	f3bf 8f6f 	isb	sy
1a003954:	f3bf 8f4f 	dsb	sy
1a003958:	e7fe      	b.n	1a003958 <pvPortMalloc+0x3c>
			prvHeapInit();
1a00395a:	f7ff ff81 	bl	1a003860 <prvHeapInit>
1a00395e:	e7e4      	b.n	1a00392a <pvPortMalloc+0xe>
	( void ) xTaskResumeAll();
1a003960:	f000 ff84 	bl	1a00486c <xTaskResumeAll>
void *pvReturn = NULL;
1a003964:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
1a003966:	f000 fc8b 	bl	1a004280 <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
1a00396a:	f016 0f07 	tst.w	r6, #7
1a00396e:	d057      	beq.n	1a003a20 <pvPortMalloc+0x104>
1a003970:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003974:	f383 8811 	msr	BASEPRI, r3
1a003978:	f3bf 8f6f 	isb	sy
1a00397c:	f3bf 8f4f 	dsb	sy
1a003980:	e7fe      	b.n	1a003980 <pvPortMalloc+0x64>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
1a003982:	b134      	cbz	r4, 1a003992 <pvPortMalloc+0x76>
1a003984:	4b29      	ldr	r3, [pc, #164]	; (1a003a2c <pvPortMalloc+0x110>)
1a003986:	681b      	ldr	r3, [r3, #0]
1a003988:	42a3      	cmp	r3, r4
1a00398a:	d306      	bcc.n	1a00399a <pvPortMalloc+0x7e>
				pxBlock = xStart.pxNextFreeBlock;
1a00398c:	4b28      	ldr	r3, [pc, #160]	; (1a003a30 <pvPortMalloc+0x114>)
1a00398e:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a003990:	e009      	b.n	1a0039a6 <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
1a003992:	f000 ff6b 	bl	1a00486c <xTaskResumeAll>
void *pvReturn = NULL;
1a003996:	2600      	movs	r6, #0
1a003998:	e7e5      	b.n	1a003966 <pvPortMalloc+0x4a>
	( void ) xTaskResumeAll();
1a00399a:	f000 ff67 	bl	1a00486c <xTaskResumeAll>
void *pvReturn = NULL;
1a00399e:	2600      	movs	r6, #0
1a0039a0:	e7e1      	b.n	1a003966 <pvPortMalloc+0x4a>
					pxPreviousBlock = pxBlock;
1a0039a2:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
1a0039a4:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a0039a6:	686a      	ldr	r2, [r5, #4]
1a0039a8:	42a2      	cmp	r2, r4
1a0039aa:	d202      	bcs.n	1a0039b2 <pvPortMalloc+0x96>
1a0039ac:	682a      	ldr	r2, [r5, #0]
1a0039ae:	2a00      	cmp	r2, #0
1a0039b0:	d1f7      	bne.n	1a0039a2 <pvPortMalloc+0x86>
				if( pxBlock != pxEnd )
1a0039b2:	4a1c      	ldr	r2, [pc, #112]	; (1a003a24 <pvPortMalloc+0x108>)
1a0039b4:	6812      	ldr	r2, [r2, #0]
1a0039b6:	42aa      	cmp	r2, r5
1a0039b8:	d014      	beq.n	1a0039e4 <pvPortMalloc+0xc8>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
1a0039ba:	681e      	ldr	r6, [r3, #0]
1a0039bc:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
1a0039be:	682a      	ldr	r2, [r5, #0]
1a0039c0:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
1a0039c2:	686b      	ldr	r3, [r5, #4]
1a0039c4:	1b1b      	subs	r3, r3, r4
1a0039c6:	2b10      	cmp	r3, #16
1a0039c8:	d914      	bls.n	1a0039f4 <pvPortMalloc+0xd8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
1a0039ca:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
1a0039cc:	f010 0f07 	tst.w	r0, #7
1a0039d0:	d00c      	beq.n	1a0039ec <pvPortMalloc+0xd0>
1a0039d2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0039d6:	f383 8811 	msr	BASEPRI, r3
1a0039da:	f3bf 8f6f 	isb	sy
1a0039de:	f3bf 8f4f 	dsb	sy
1a0039e2:	e7fe      	b.n	1a0039e2 <pvPortMalloc+0xc6>
	( void ) xTaskResumeAll();
1a0039e4:	f000 ff42 	bl	1a00486c <xTaskResumeAll>
void *pvReturn = NULL;
1a0039e8:	2600      	movs	r6, #0
1a0039ea:	e7bc      	b.n	1a003966 <pvPortMalloc+0x4a>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
1a0039ec:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
1a0039ee:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
1a0039f0:	f7ff ff68 	bl	1a0038c4 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
1a0039f4:	686a      	ldr	r2, [r5, #4]
1a0039f6:	490d      	ldr	r1, [pc, #52]	; (1a003a2c <pvPortMalloc+0x110>)
1a0039f8:	680b      	ldr	r3, [r1, #0]
1a0039fa:	1a9b      	subs	r3, r3, r2
1a0039fc:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
1a0039fe:	490d      	ldr	r1, [pc, #52]	; (1a003a34 <pvPortMalloc+0x118>)
1a003a00:	6809      	ldr	r1, [r1, #0]
1a003a02:	428b      	cmp	r3, r1
1a003a04:	d201      	bcs.n	1a003a0a <pvPortMalloc+0xee>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
1a003a06:	490b      	ldr	r1, [pc, #44]	; (1a003a34 <pvPortMalloc+0x118>)
1a003a08:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
1a003a0a:	4b07      	ldr	r3, [pc, #28]	; (1a003a28 <pvPortMalloc+0x10c>)
1a003a0c:	681b      	ldr	r3, [r3, #0]
1a003a0e:	4313      	orrs	r3, r2
1a003a10:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
1a003a12:	2300      	movs	r3, #0
1a003a14:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
1a003a16:	f000 ff29 	bl	1a00486c <xTaskResumeAll>
		if( pvReturn == NULL )
1a003a1a:	2e00      	cmp	r6, #0
1a003a1c:	d1a5      	bne.n	1a00396a <pvPortMalloc+0x4e>
1a003a1e:	e7a2      	b.n	1a003966 <pvPortMalloc+0x4a>
}
1a003a20:	4630      	mov	r0, r6
1a003a22:	bd70      	pop	{r4, r5, r6, pc}
1a003a24:	10000100 	.word	0x10000100
1a003a28:	10004104 	.word	0x10004104
1a003a2c:	10004108 	.word	0x10004108
1a003a30:	10004110 	.word	0x10004110
1a003a34:	1000410c 	.word	0x1000410c

1a003a38 <vPortFree>:
	if( pv != NULL )
1a003a38:	b380      	cbz	r0, 1a003a9c <vPortFree+0x64>
{
1a003a3a:	b538      	push	{r3, r4, r5, lr}
1a003a3c:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
1a003a3e:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
1a003a42:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a003a46:	4916      	ldr	r1, [pc, #88]	; (1a003aa0 <vPortFree+0x68>)
1a003a48:	6809      	ldr	r1, [r1, #0]
1a003a4a:	420a      	tst	r2, r1
1a003a4c:	d108      	bne.n	1a003a60 <vPortFree+0x28>
1a003a4e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003a52:	f383 8811 	msr	BASEPRI, r3
1a003a56:	f3bf 8f6f 	isb	sy
1a003a5a:	f3bf 8f4f 	dsb	sy
1a003a5e:	e7fe      	b.n	1a003a5e <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
1a003a60:	f850 0c08 	ldr.w	r0, [r0, #-8]
1a003a64:	b140      	cbz	r0, 1a003a78 <vPortFree+0x40>
1a003a66:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003a6a:	f383 8811 	msr	BASEPRI, r3
1a003a6e:	f3bf 8f6f 	isb	sy
1a003a72:	f3bf 8f4f 	dsb	sy
1a003a76:	e7fe      	b.n	1a003a76 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
1a003a78:	ea22 0201 	bic.w	r2, r2, r1
1a003a7c:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
1a003a80:	f000 fe5a 	bl	1a004738 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
1a003a84:	f854 1c04 	ldr.w	r1, [r4, #-4]
1a003a88:	4a06      	ldr	r2, [pc, #24]	; (1a003aa4 <vPortFree+0x6c>)
1a003a8a:	6813      	ldr	r3, [r2, #0]
1a003a8c:	440b      	add	r3, r1
1a003a8e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
1a003a90:	4628      	mov	r0, r5
1a003a92:	f7ff ff17 	bl	1a0038c4 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
1a003a96:	f000 fee9 	bl	1a00486c <xTaskResumeAll>
}
1a003a9a:	bd38      	pop	{r3, r4, r5, pc}
1a003a9c:	4770      	bx	lr
1a003a9e:	bf00      	nop
1a003aa0:	10004104 	.word	0x10004104
1a003aa4:	10004108 	.word	0x10004108

1a003aa8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a003aa8:	b510      	push	{r4, lr}
1a003aaa:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a003aac:	f001 fbe2 	bl	1a005274 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a003ab0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a003ab2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a003ab4:	429a      	cmp	r2, r3
1a003ab6:	d004      	beq.n	1a003ac2 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a003ab8:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a003aba:	f001 fbfd 	bl	1a0052b8 <vPortExitCritical>

	return xReturn;
}
1a003abe:	4620      	mov	r0, r4
1a003ac0:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a003ac2:	2401      	movs	r4, #1
1a003ac4:	e7f9      	b.n	1a003aba <prvIsQueueFull+0x12>

1a003ac6 <prvIsQueueEmpty>:
{
1a003ac6:	b510      	push	{r4, lr}
1a003ac8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a003aca:	f001 fbd3 	bl	1a005274 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a003ace:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a003ad0:	b923      	cbnz	r3, 1a003adc <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
1a003ad2:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
1a003ad4:	f001 fbf0 	bl	1a0052b8 <vPortExitCritical>
}
1a003ad8:	4620      	mov	r0, r4
1a003ada:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
1a003adc:	2400      	movs	r4, #0
1a003ade:	e7f9      	b.n	1a003ad4 <prvIsQueueEmpty+0xe>

1a003ae0 <prvCopyDataToQueue>:
{
1a003ae0:	b570      	push	{r4, r5, r6, lr}
1a003ae2:	4604      	mov	r4, r0
1a003ae4:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a003ae6:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a003ae8:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a003aea:	b95a      	cbnz	r2, 1a003b04 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a003aec:	6803      	ldr	r3, [r0, #0]
1a003aee:	b11b      	cbz	r3, 1a003af8 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a003af0:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a003af2:	3501      	adds	r5, #1
1a003af4:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a003af6:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a003af8:	6840      	ldr	r0, [r0, #4]
1a003afa:	f001 f89f 	bl	1a004c3c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a003afe:	2300      	movs	r3, #0
1a003b00:	6063      	str	r3, [r4, #4]
1a003b02:	e7f6      	b.n	1a003af2 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a003b04:	b96e      	cbnz	r6, 1a003b22 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a003b06:	6880      	ldr	r0, [r0, #8]
1a003b08:	f003 fc09 	bl	1a00731e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a003b0c:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a003b0e:	68a3      	ldr	r3, [r4, #8]
1a003b10:	4413      	add	r3, r2
1a003b12:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a003b14:	6862      	ldr	r2, [r4, #4]
1a003b16:	4293      	cmp	r3, r2
1a003b18:	d319      	bcc.n	1a003b4e <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a003b1a:	6823      	ldr	r3, [r4, #0]
1a003b1c:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a003b1e:	2000      	movs	r0, #0
1a003b20:	e7e7      	b.n	1a003af2 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a003b22:	68c0      	ldr	r0, [r0, #12]
1a003b24:	f003 fbfb 	bl	1a00731e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a003b28:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a003b2a:	4252      	negs	r2, r2
1a003b2c:	68e3      	ldr	r3, [r4, #12]
1a003b2e:	4413      	add	r3, r2
1a003b30:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a003b32:	6821      	ldr	r1, [r4, #0]
1a003b34:	428b      	cmp	r3, r1
1a003b36:	d202      	bcs.n	1a003b3e <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a003b38:	6863      	ldr	r3, [r4, #4]
1a003b3a:	441a      	add	r2, r3
1a003b3c:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a003b3e:	2e02      	cmp	r6, #2
1a003b40:	d001      	beq.n	1a003b46 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a003b42:	2000      	movs	r0, #0
1a003b44:	e7d5      	b.n	1a003af2 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a003b46:	b125      	cbz	r5, 1a003b52 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a003b48:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a003b4a:	2000      	movs	r0, #0
1a003b4c:	e7d1      	b.n	1a003af2 <prvCopyDataToQueue+0x12>
1a003b4e:	2000      	movs	r0, #0
1a003b50:	e7cf      	b.n	1a003af2 <prvCopyDataToQueue+0x12>
1a003b52:	2000      	movs	r0, #0
1a003b54:	e7cd      	b.n	1a003af2 <prvCopyDataToQueue+0x12>

1a003b56 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a003b56:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a003b58:	b172      	cbz	r2, 1a003b78 <prvCopyDataFromQueue+0x22>
{
1a003b5a:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a003b5c:	68c3      	ldr	r3, [r0, #12]
1a003b5e:	4413      	add	r3, r2
1a003b60:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a003b62:	6844      	ldr	r4, [r0, #4]
1a003b64:	42a3      	cmp	r3, r4
1a003b66:	d301      	bcc.n	1a003b6c <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a003b68:	6803      	ldr	r3, [r0, #0]
1a003b6a:	60c3      	str	r3, [r0, #12]
1a003b6c:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a003b6e:	68c1      	ldr	r1, [r0, #12]
1a003b70:	4620      	mov	r0, r4
1a003b72:	f003 fbd4 	bl	1a00731e <memcpy>
}
1a003b76:	bd10      	pop	{r4, pc}
1a003b78:	4770      	bx	lr

1a003b7a <prvUnlockQueue>:
{
1a003b7a:	b538      	push	{r3, r4, r5, lr}
1a003b7c:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a003b7e:	f001 fb79 	bl	1a005274 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a003b82:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a003b86:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a003b88:	e003      	b.n	1a003b92 <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a003b8a:	f001 f841 	bl	1a004c10 <vTaskMissedYield>
			--cTxLock;
1a003b8e:	3c01      	subs	r4, #1
1a003b90:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a003b92:	2c00      	cmp	r4, #0
1a003b94:	dd08      	ble.n	1a003ba8 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a003b96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a003b98:	b133      	cbz	r3, 1a003ba8 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a003b9a:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a003b9e:	f000 ffa3 	bl	1a004ae8 <xTaskRemoveFromEventList>
1a003ba2:	2800      	cmp	r0, #0
1a003ba4:	d0f3      	beq.n	1a003b8e <prvUnlockQueue+0x14>
1a003ba6:	e7f0      	b.n	1a003b8a <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a003ba8:	23ff      	movs	r3, #255	; 0xff
1a003baa:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a003bae:	f001 fb83 	bl	1a0052b8 <vPortExitCritical>
	taskENTER_CRITICAL();
1a003bb2:	f001 fb5f 	bl	1a005274 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a003bb6:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a003bba:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a003bbc:	e003      	b.n	1a003bc6 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a003bbe:	f001 f827 	bl	1a004c10 <vTaskMissedYield>
				--cRxLock;
1a003bc2:	3c01      	subs	r4, #1
1a003bc4:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a003bc6:	2c00      	cmp	r4, #0
1a003bc8:	dd08      	ble.n	1a003bdc <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a003bca:	692b      	ldr	r3, [r5, #16]
1a003bcc:	b133      	cbz	r3, 1a003bdc <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a003bce:	f105 0010 	add.w	r0, r5, #16
1a003bd2:	f000 ff89 	bl	1a004ae8 <xTaskRemoveFromEventList>
1a003bd6:	2800      	cmp	r0, #0
1a003bd8:	d0f3      	beq.n	1a003bc2 <prvUnlockQueue+0x48>
1a003bda:	e7f0      	b.n	1a003bbe <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a003bdc:	23ff      	movs	r3, #255	; 0xff
1a003bde:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a003be2:	f001 fb69 	bl	1a0052b8 <vPortExitCritical>
}
1a003be6:	bd38      	pop	{r3, r4, r5, pc}

1a003be8 <xQueueGenericReset>:
{
1a003be8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a003bea:	b1e0      	cbz	r0, 1a003c26 <xQueueGenericReset+0x3e>
1a003bec:	4604      	mov	r4, r0
1a003bee:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a003bf0:	f001 fb40 	bl	1a005274 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a003bf4:	6821      	ldr	r1, [r4, #0]
1a003bf6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a003bf8:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a003bfa:	fb03 1002 	mla	r0, r3, r2, r1
1a003bfe:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a003c00:	2000      	movs	r0, #0
1a003c02:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a003c04:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a003c06:	3a01      	subs	r2, #1
1a003c08:	fb02 1303 	mla	r3, r2, r3, r1
1a003c0c:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a003c0e:	23ff      	movs	r3, #255	; 0xff
1a003c10:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a003c14:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a003c18:	b9ed      	cbnz	r5, 1a003c56 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a003c1a:	6923      	ldr	r3, [r4, #16]
1a003c1c:	b963      	cbnz	r3, 1a003c38 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a003c1e:	f001 fb4b 	bl	1a0052b8 <vPortExitCritical>
}
1a003c22:	2001      	movs	r0, #1
1a003c24:	bd38      	pop	{r3, r4, r5, pc}
1a003c26:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003c2a:	f383 8811 	msr	BASEPRI, r3
1a003c2e:	f3bf 8f6f 	isb	sy
1a003c32:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a003c36:	e7fe      	b.n	1a003c36 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a003c38:	f104 0010 	add.w	r0, r4, #16
1a003c3c:	f000 ff54 	bl	1a004ae8 <xTaskRemoveFromEventList>
1a003c40:	2800      	cmp	r0, #0
1a003c42:	d0ec      	beq.n	1a003c1e <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
1a003c44:	4b08      	ldr	r3, [pc, #32]	; (1a003c68 <xQueueGenericReset+0x80>)
1a003c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a003c4a:	601a      	str	r2, [r3, #0]
1a003c4c:	f3bf 8f4f 	dsb	sy
1a003c50:	f3bf 8f6f 	isb	sy
1a003c54:	e7e3      	b.n	1a003c1e <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a003c56:	f104 0010 	add.w	r0, r4, #16
1a003c5a:	f000 fa9c 	bl	1a004196 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a003c5e:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a003c62:	f000 fa98 	bl	1a004196 <vListInitialise>
1a003c66:	e7da      	b.n	1a003c1e <xQueueGenericReset+0x36>
1a003c68:	e000ed04 	.word	0xe000ed04

1a003c6c <prvInitialiseNewQueue>:
{
1a003c6c:	b538      	push	{r3, r4, r5, lr}
1a003c6e:	461d      	mov	r5, r3
1a003c70:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a003c72:	460b      	mov	r3, r1
1a003c74:	b949      	cbnz	r1, 1a003c8a <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a003c76:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a003c78:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a003c7a:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a003c7c:	2101      	movs	r1, #1
1a003c7e:	4620      	mov	r0, r4
1a003c80:	f7ff ffb2 	bl	1a003be8 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a003c84:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a003c88:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a003c8a:	6022      	str	r2, [r4, #0]
1a003c8c:	e7f4      	b.n	1a003c78 <prvInitialiseNewQueue+0xc>

1a003c8e <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a003c8e:	b940      	cbnz	r0, 1a003ca2 <xQueueGenericCreateStatic+0x14>
1a003c90:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003c94:	f383 8811 	msr	BASEPRI, r3
1a003c98:	f3bf 8f6f 	isb	sy
1a003c9c:	f3bf 8f4f 	dsb	sy
1a003ca0:	e7fe      	b.n	1a003ca0 <xQueueGenericCreateStatic+0x12>
	{
1a003ca2:	b510      	push	{r4, lr}
1a003ca4:	b084      	sub	sp, #16
1a003ca6:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a003ca8:	b153      	cbz	r3, 1a003cc0 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a003caa:	b192      	cbz	r2, 1a003cd2 <xQueueGenericCreateStatic+0x44>
1a003cac:	b989      	cbnz	r1, 1a003cd2 <xQueueGenericCreateStatic+0x44>
1a003cae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003cb2:	f383 8811 	msr	BASEPRI, r3
1a003cb6:	f3bf 8f6f 	isb	sy
1a003cba:	f3bf 8f4f 	dsb	sy
1a003cbe:	e7fe      	b.n	1a003cbe <xQueueGenericCreateStatic+0x30>
1a003cc0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003cc4:	f383 8811 	msr	BASEPRI, r3
1a003cc8:	f3bf 8f6f 	isb	sy
1a003ccc:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
1a003cd0:	e7fe      	b.n	1a003cd0 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a003cd2:	b16a      	cbz	r2, 1a003cf0 <xQueueGenericCreateStatic+0x62>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a003cd4:	2050      	movs	r0, #80	; 0x50
1a003cd6:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a003cd8:	9803      	ldr	r0, [sp, #12]
1a003cda:	2850      	cmp	r0, #80	; 0x50
1a003cdc:	d013      	beq.n	1a003d06 <xQueueGenericCreateStatic+0x78>
1a003cde:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003ce2:	f383 8811 	msr	BASEPRI, r3
1a003ce6:	f3bf 8f6f 	isb	sy
1a003cea:	f3bf 8f4f 	dsb	sy
1a003cee:	e7fe      	b.n	1a003cee <xQueueGenericCreateStatic+0x60>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a003cf0:	2900      	cmp	r1, #0
1a003cf2:	d0ef      	beq.n	1a003cd4 <xQueueGenericCreateStatic+0x46>
1a003cf4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003cf8:	f383 8811 	msr	BASEPRI, r3
1a003cfc:	f3bf 8f6f 	isb	sy
1a003d00:	f3bf 8f4f 	dsb	sy
1a003d04:	e7fe      	b.n	1a003d04 <xQueueGenericCreateStatic+0x76>
1a003d06:	4620      	mov	r0, r4
1a003d08:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a003d0a:	2301      	movs	r3, #1
1a003d0c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a003d10:	9400      	str	r4, [sp, #0]
1a003d12:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a003d16:	f7ff ffa9 	bl	1a003c6c <prvInitialiseNewQueue>
	}
1a003d1a:	4620      	mov	r0, r4
1a003d1c:	b004      	add	sp, #16
1a003d1e:	bd10      	pop	{r4, pc}

1a003d20 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a003d20:	b940      	cbnz	r0, 1a003d34 <xQueueGenericCreate+0x14>
1a003d22:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003d26:	f383 8811 	msr	BASEPRI, r3
1a003d2a:	f3bf 8f6f 	isb	sy
1a003d2e:	f3bf 8f4f 	dsb	sy
1a003d32:	e7fe      	b.n	1a003d32 <xQueueGenericCreate+0x12>
	{
1a003d34:	b5f0      	push	{r4, r5, r6, r7, lr}
1a003d36:	b083      	sub	sp, #12
1a003d38:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a003d3a:	b1b1      	cbz	r1, 1a003d6a <xQueueGenericCreate+0x4a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a003d3c:	fb01 f000 	mul.w	r0, r1, r0
1a003d40:	4617      	mov	r7, r2
1a003d42:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a003d44:	3050      	adds	r0, #80	; 0x50
1a003d46:	f7ff fde9 	bl	1a00391c <pvPortMalloc>
		if( pxNewQueue != NULL )
1a003d4a:	4605      	mov	r5, r0
1a003d4c:	b150      	cbz	r0, 1a003d64 <xQueueGenericCreate+0x44>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a003d4e:	2300      	movs	r3, #0
1a003d50:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a003d54:	9000      	str	r0, [sp, #0]
1a003d56:	463b      	mov	r3, r7
1a003d58:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a003d5c:	4621      	mov	r1, r4
1a003d5e:	4630      	mov	r0, r6
1a003d60:	f7ff ff84 	bl	1a003c6c <prvInitialiseNewQueue>
	}
1a003d64:	4628      	mov	r0, r5
1a003d66:	b003      	add	sp, #12
1a003d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xQueueSizeInBytes = ( size_t ) 0;
1a003d6a:	2000      	movs	r0, #0
1a003d6c:	e7e8      	b.n	1a003d40 <xQueueGenericCreate+0x20>
1a003d6e:	Address 0x000000001a003d6e is out of bounds.


1a003d70 <xQueueGenericSend>:
{
1a003d70:	b5f0      	push	{r4, r5, r6, r7, lr}
1a003d72:	b085      	sub	sp, #20
1a003d74:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a003d76:	b178      	cbz	r0, 1a003d98 <xQueueGenericSend+0x28>
1a003d78:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a003d7a:	b1b1      	cbz	r1, 1a003daa <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a003d7c:	2b02      	cmp	r3, #2
1a003d7e:	d120      	bne.n	1a003dc2 <xQueueGenericSend+0x52>
1a003d80:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a003d82:	2a01      	cmp	r2, #1
1a003d84:	d01d      	beq.n	1a003dc2 <xQueueGenericSend+0x52>
1a003d86:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003d8a:	f383 8811 	msr	BASEPRI, r3
1a003d8e:	f3bf 8f6f 	isb	sy
1a003d92:	f3bf 8f4f 	dsb	sy
1a003d96:	e7fe      	b.n	1a003d96 <xQueueGenericSend+0x26>
1a003d98:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003d9c:	f383 8811 	msr	BASEPRI, r3
1a003da0:	f3bf 8f6f 	isb	sy
1a003da4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a003da8:	e7fe      	b.n	1a003da8 <xQueueGenericSend+0x38>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a003daa:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a003dac:	2a00      	cmp	r2, #0
1a003dae:	d0e5      	beq.n	1a003d7c <xQueueGenericSend+0xc>
1a003db0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003db4:	f383 8811 	msr	BASEPRI, r3
1a003db8:	f3bf 8f6f 	isb	sy
1a003dbc:	f3bf 8f4f 	dsb	sy
1a003dc0:	e7fe      	b.n	1a003dc0 <xQueueGenericSend+0x50>
1a003dc2:	461e      	mov	r6, r3
1a003dc4:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a003dc6:	f000 ff29 	bl	1a004c1c <xTaskGetSchedulerState>
1a003dca:	b950      	cbnz	r0, 1a003de2 <xQueueGenericSend+0x72>
1a003dcc:	9b01      	ldr	r3, [sp, #4]
1a003dce:	b153      	cbz	r3, 1a003de6 <xQueueGenericSend+0x76>
1a003dd0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003dd4:	f383 8811 	msr	BASEPRI, r3
1a003dd8:	f3bf 8f6f 	isb	sy
1a003ddc:	f3bf 8f4f 	dsb	sy
1a003de0:	e7fe      	b.n	1a003de0 <xQueueGenericSend+0x70>
1a003de2:	2500      	movs	r5, #0
1a003de4:	e03b      	b.n	1a003e5e <xQueueGenericSend+0xee>
1a003de6:	2500      	movs	r5, #0
1a003de8:	e039      	b.n	1a003e5e <xQueueGenericSend+0xee>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a003dea:	4632      	mov	r2, r6
1a003dec:	4639      	mov	r1, r7
1a003dee:	4620      	mov	r0, r4
1a003df0:	f7ff fe76 	bl	1a003ae0 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a003df4:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a003df6:	b96b      	cbnz	r3, 1a003e14 <xQueueGenericSend+0xa4>
					else if( xYieldRequired != pdFALSE )
1a003df8:	b138      	cbz	r0, 1a003e0a <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
1a003dfa:	4b3c      	ldr	r3, [pc, #240]	; (1a003eec <xQueueGenericSend+0x17c>)
1a003dfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a003e00:	601a      	str	r2, [r3, #0]
1a003e02:	f3bf 8f4f 	dsb	sy
1a003e06:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a003e0a:	f001 fa55 	bl	1a0052b8 <vPortExitCritical>
				return pdPASS;
1a003e0e:	2001      	movs	r0, #1
}
1a003e10:	b005      	add	sp, #20
1a003e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a003e14:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a003e18:	f000 fe66 	bl	1a004ae8 <xTaskRemoveFromEventList>
1a003e1c:	2800      	cmp	r0, #0
1a003e1e:	d0f4      	beq.n	1a003e0a <xQueueGenericSend+0x9a>
							queueYIELD_IF_USING_PREEMPTION();
1a003e20:	4b32      	ldr	r3, [pc, #200]	; (1a003eec <xQueueGenericSend+0x17c>)
1a003e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a003e26:	601a      	str	r2, [r3, #0]
1a003e28:	f3bf 8f4f 	dsb	sy
1a003e2c:	f3bf 8f6f 	isb	sy
1a003e30:	e7eb      	b.n	1a003e0a <xQueueGenericSend+0x9a>
					taskEXIT_CRITICAL();
1a003e32:	f001 fa41 	bl	1a0052b8 <vPortExitCritical>
					return errQUEUE_FULL;
1a003e36:	2000      	movs	r0, #0
1a003e38:	e7ea      	b.n	1a003e10 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a003e3a:	a802      	add	r0, sp, #8
1a003e3c:	f000 fe9a 	bl	1a004b74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a003e40:	2501      	movs	r5, #1
1a003e42:	e019      	b.n	1a003e78 <xQueueGenericSend+0x108>
		prvLockQueue( pxQueue );
1a003e44:	2300      	movs	r3, #0
1a003e46:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a003e4a:	e021      	b.n	1a003e90 <xQueueGenericSend+0x120>
1a003e4c:	2300      	movs	r3, #0
1a003e4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a003e52:	e023      	b.n	1a003e9c <xQueueGenericSend+0x12c>
				prvUnlockQueue( pxQueue );
1a003e54:	4620      	mov	r0, r4
1a003e56:	f7ff fe90 	bl	1a003b7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a003e5a:	f000 fd07 	bl	1a00486c <xTaskResumeAll>
		taskENTER_CRITICAL();
1a003e5e:	f001 fa09 	bl	1a005274 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a003e62:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a003e64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a003e66:	429a      	cmp	r2, r3
1a003e68:	d3bf      	bcc.n	1a003dea <xQueueGenericSend+0x7a>
1a003e6a:	2e02      	cmp	r6, #2
1a003e6c:	d0bd      	beq.n	1a003dea <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a003e6e:	9b01      	ldr	r3, [sp, #4]
1a003e70:	2b00      	cmp	r3, #0
1a003e72:	d0de      	beq.n	1a003e32 <xQueueGenericSend+0xc2>
				else if( xEntryTimeSet == pdFALSE )
1a003e74:	2d00      	cmp	r5, #0
1a003e76:	d0e0      	beq.n	1a003e3a <xQueueGenericSend+0xca>
		taskEXIT_CRITICAL();
1a003e78:	f001 fa1e 	bl	1a0052b8 <vPortExitCritical>
		vTaskSuspendAll();
1a003e7c:	f000 fc5c 	bl	1a004738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a003e80:	f001 f9f8 	bl	1a005274 <vPortEnterCritical>
1a003e84:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a003e88:	b25b      	sxtb	r3, r3
1a003e8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a003e8e:	d0d9      	beq.n	1a003e44 <xQueueGenericSend+0xd4>
1a003e90:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a003e94:	b25b      	sxtb	r3, r3
1a003e96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a003e9a:	d0d7      	beq.n	1a003e4c <xQueueGenericSend+0xdc>
1a003e9c:	f001 fa0c 	bl	1a0052b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a003ea0:	a901      	add	r1, sp, #4
1a003ea2:	a802      	add	r0, sp, #8
1a003ea4:	f000 fe72 	bl	1a004b8c <xTaskCheckForTimeOut>
1a003ea8:	b9c8      	cbnz	r0, 1a003ede <xQueueGenericSend+0x16e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a003eaa:	4620      	mov	r0, r4
1a003eac:	f7ff fdfc 	bl	1a003aa8 <prvIsQueueFull>
1a003eb0:	2800      	cmp	r0, #0
1a003eb2:	d0cf      	beq.n	1a003e54 <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a003eb4:	9901      	ldr	r1, [sp, #4]
1a003eb6:	f104 0010 	add.w	r0, r4, #16
1a003eba:	f000 fde1 	bl	1a004a80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a003ebe:	4620      	mov	r0, r4
1a003ec0:	f7ff fe5b 	bl	1a003b7a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a003ec4:	f000 fcd2 	bl	1a00486c <xTaskResumeAll>
1a003ec8:	2800      	cmp	r0, #0
1a003eca:	d1c8      	bne.n	1a003e5e <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
1a003ecc:	4b07      	ldr	r3, [pc, #28]	; (1a003eec <xQueueGenericSend+0x17c>)
1a003ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a003ed2:	601a      	str	r2, [r3, #0]
1a003ed4:	f3bf 8f4f 	dsb	sy
1a003ed8:	f3bf 8f6f 	isb	sy
1a003edc:	e7bf      	b.n	1a003e5e <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
1a003ede:	4620      	mov	r0, r4
1a003ee0:	f7ff fe4b 	bl	1a003b7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a003ee4:	f000 fcc2 	bl	1a00486c <xTaskResumeAll>
			return errQUEUE_FULL;
1a003ee8:	2000      	movs	r0, #0
1a003eea:	e791      	b.n	1a003e10 <xQueueGenericSend+0xa0>
1a003eec:	e000ed04 	.word	0xe000ed04

1a003ef0 <xQueueGenericSendFromISR>:
{
1a003ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a003ef4:	b178      	cbz	r0, 1a003f16 <xQueueGenericSendFromISR+0x26>
1a003ef6:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a003ef8:	b1b1      	cbz	r1, 1a003f28 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a003efa:	2b02      	cmp	r3, #2
1a003efc:	d120      	bne.n	1a003f40 <xQueueGenericSendFromISR+0x50>
1a003efe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a003f00:	2801      	cmp	r0, #1
1a003f02:	d01d      	beq.n	1a003f40 <xQueueGenericSendFromISR+0x50>
1a003f04:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003f08:	f383 8811 	msr	BASEPRI, r3
1a003f0c:	f3bf 8f6f 	isb	sy
1a003f10:	f3bf 8f4f 	dsb	sy
1a003f14:	e7fe      	b.n	1a003f14 <xQueueGenericSendFromISR+0x24>
1a003f16:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003f1a:	f383 8811 	msr	BASEPRI, r3
1a003f1e:	f3bf 8f6f 	isb	sy
1a003f22:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a003f26:	e7fe      	b.n	1a003f26 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a003f28:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a003f2a:	2800      	cmp	r0, #0
1a003f2c:	d0e5      	beq.n	1a003efa <xQueueGenericSendFromISR+0xa>
1a003f2e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003f32:	f383 8811 	msr	BASEPRI, r3
1a003f36:	f3bf 8f6f 	isb	sy
1a003f3a:	f3bf 8f4f 	dsb	sy
1a003f3e:	e7fe      	b.n	1a003f3e <xQueueGenericSendFromISR+0x4e>
1a003f40:	461f      	mov	r7, r3
1a003f42:	4690      	mov	r8, r2
1a003f44:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a003f46:	f001 fabf 	bl	1a0054c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a003f4a:	f3ef 8611 	mrs	r6, BASEPRI
1a003f4e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003f52:	f383 8811 	msr	BASEPRI, r3
1a003f56:	f3bf 8f6f 	isb	sy
1a003f5a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a003f5e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a003f60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a003f62:	429a      	cmp	r2, r3
1a003f64:	d306      	bcc.n	1a003f74 <xQueueGenericSendFromISR+0x84>
1a003f66:	2f02      	cmp	r7, #2
1a003f68:	d004      	beq.n	1a003f74 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
1a003f6a:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a003f6c:	f386 8811 	msr	BASEPRI, r6
}
1a003f70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
1a003f74:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a003f78:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a003f7a:	463a      	mov	r2, r7
1a003f7c:	4649      	mov	r1, r9
1a003f7e:	4620      	mov	r0, r4
1a003f80:	f7ff fdae 	bl	1a003ae0 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a003f84:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a003f88:	d005      	beq.n	1a003f96 <xQueueGenericSendFromISR+0xa6>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a003f8a:	1c6b      	adds	r3, r5, #1
1a003f8c:	b25b      	sxtb	r3, r3
1a003f8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a003f92:	2001      	movs	r0, #1
1a003f94:	e7ea      	b.n	1a003f6c <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a003f96:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a003f98:	b90b      	cbnz	r3, 1a003f9e <xQueueGenericSendFromISR+0xae>
			xReturn = pdPASS;
1a003f9a:	2001      	movs	r0, #1
1a003f9c:	e7e6      	b.n	1a003f6c <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a003f9e:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a003fa2:	f000 fda1 	bl	1a004ae8 <xTaskRemoveFromEventList>
1a003fa6:	b130      	cbz	r0, 1a003fb6 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
1a003fa8:	f1b8 0f00 	cmp.w	r8, #0
1a003fac:	d005      	beq.n	1a003fba <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a003fae:	2001      	movs	r0, #1
1a003fb0:	f8c8 0000 	str.w	r0, [r8]
1a003fb4:	e7da      	b.n	1a003f6c <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
1a003fb6:	2001      	movs	r0, #1
1a003fb8:	e7d8      	b.n	1a003f6c <xQueueGenericSendFromISR+0x7c>
1a003fba:	2001      	movs	r0, #1
1a003fbc:	e7d6      	b.n	1a003f6c <xQueueGenericSendFromISR+0x7c>
1a003fbe:	Address 0x000000001a003fbe is out of bounds.


1a003fc0 <xQueueReceive>:
{
1a003fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a003fc2:	b085      	sub	sp, #20
1a003fc4:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a003fc6:	b180      	cbz	r0, 1a003fea <xQueueReceive+0x2a>
1a003fc8:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a003fca:	b1b9      	cbz	r1, 1a003ffc <xQueueReceive+0x3c>
1a003fcc:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a003fce:	f000 fe25 	bl	1a004c1c <xTaskGetSchedulerState>
1a003fd2:	b9f8      	cbnz	r0, 1a004014 <xQueueReceive+0x54>
1a003fd4:	9b01      	ldr	r3, [sp, #4]
1a003fd6:	b1fb      	cbz	r3, 1a004018 <xQueueReceive+0x58>
	__asm volatile
1a003fd8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003fdc:	f383 8811 	msr	BASEPRI, r3
1a003fe0:	f3bf 8f6f 	isb	sy
1a003fe4:	f3bf 8f4f 	dsb	sy
1a003fe8:	e7fe      	b.n	1a003fe8 <xQueueReceive+0x28>
1a003fea:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003fee:	f383 8811 	msr	BASEPRI, r3
1a003ff2:	f3bf 8f6f 	isb	sy
1a003ff6:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
1a003ffa:	e7fe      	b.n	1a003ffa <xQueueReceive+0x3a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a003ffc:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a003ffe:	2b00      	cmp	r3, #0
1a004000:	d0e4      	beq.n	1a003fcc <xQueueReceive+0xc>
1a004002:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004006:	f383 8811 	msr	BASEPRI, r3
1a00400a:	f3bf 8f6f 	isb	sy
1a00400e:	f3bf 8f4f 	dsb	sy
1a004012:	e7fe      	b.n	1a004012 <xQueueReceive+0x52>
1a004014:	2600      	movs	r6, #0
1a004016:	e03e      	b.n	1a004096 <xQueueReceive+0xd6>
1a004018:	2600      	movs	r6, #0
1a00401a:	e03c      	b.n	1a004096 <xQueueReceive+0xd6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a00401c:	4639      	mov	r1, r7
1a00401e:	4620      	mov	r0, r4
1a004020:	f7ff fd99 	bl	1a003b56 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a004024:	3d01      	subs	r5, #1
1a004026:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a004028:	6923      	ldr	r3, [r4, #16]
1a00402a:	b923      	cbnz	r3, 1a004036 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
1a00402c:	f001 f944 	bl	1a0052b8 <vPortExitCritical>
				return pdPASS;
1a004030:	2001      	movs	r0, #1
}
1a004032:	b005      	add	sp, #20
1a004034:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a004036:	f104 0010 	add.w	r0, r4, #16
1a00403a:	f000 fd55 	bl	1a004ae8 <xTaskRemoveFromEventList>
1a00403e:	2800      	cmp	r0, #0
1a004040:	d0f4      	beq.n	1a00402c <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
1a004042:	4b35      	ldr	r3, [pc, #212]	; (1a004118 <xQueueReceive+0x158>)
1a004044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a004048:	601a      	str	r2, [r3, #0]
1a00404a:	f3bf 8f4f 	dsb	sy
1a00404e:	f3bf 8f6f 	isb	sy
1a004052:	e7eb      	b.n	1a00402c <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
1a004054:	f001 f930 	bl	1a0052b8 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a004058:	2000      	movs	r0, #0
1a00405a:	e7ea      	b.n	1a004032 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a00405c:	a802      	add	r0, sp, #8
1a00405e:	f000 fd89 	bl	1a004b74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a004062:	2601      	movs	r6, #1
1a004064:	e021      	b.n	1a0040aa <xQueueReceive+0xea>
		prvLockQueue( pxQueue );
1a004066:	2300      	movs	r3, #0
1a004068:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a00406c:	e029      	b.n	1a0040c2 <xQueueReceive+0x102>
1a00406e:	2300      	movs	r3, #0
1a004070:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a004074:	e02b      	b.n	1a0040ce <xQueueReceive+0x10e>
				prvUnlockQueue( pxQueue );
1a004076:	4620      	mov	r0, r4
1a004078:	f7ff fd7f 	bl	1a003b7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a00407c:	f000 fbf6 	bl	1a00486c <xTaskResumeAll>
1a004080:	e009      	b.n	1a004096 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
1a004082:	4620      	mov	r0, r4
1a004084:	f7ff fd79 	bl	1a003b7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a004088:	f000 fbf0 	bl	1a00486c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a00408c:	4620      	mov	r0, r4
1a00408e:	f7ff fd1a 	bl	1a003ac6 <prvIsQueueEmpty>
1a004092:	2800      	cmp	r0, #0
1a004094:	d13d      	bne.n	1a004112 <xQueueReceive+0x152>
		taskENTER_CRITICAL();
1a004096:	f001 f8ed 	bl	1a005274 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a00409a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a00409c:	2d00      	cmp	r5, #0
1a00409e:	d1bd      	bne.n	1a00401c <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
1a0040a0:	9b01      	ldr	r3, [sp, #4]
1a0040a2:	2b00      	cmp	r3, #0
1a0040a4:	d0d6      	beq.n	1a004054 <xQueueReceive+0x94>
				else if( xEntryTimeSet == pdFALSE )
1a0040a6:	2e00      	cmp	r6, #0
1a0040a8:	d0d8      	beq.n	1a00405c <xQueueReceive+0x9c>
		taskEXIT_CRITICAL();
1a0040aa:	f001 f905 	bl	1a0052b8 <vPortExitCritical>
		vTaskSuspendAll();
1a0040ae:	f000 fb43 	bl	1a004738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a0040b2:	f001 f8df 	bl	1a005274 <vPortEnterCritical>
1a0040b6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0040ba:	b25b      	sxtb	r3, r3
1a0040bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0040c0:	d0d1      	beq.n	1a004066 <xQueueReceive+0xa6>
1a0040c2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0040c6:	b25b      	sxtb	r3, r3
1a0040c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0040cc:	d0cf      	beq.n	1a00406e <xQueueReceive+0xae>
1a0040ce:	f001 f8f3 	bl	1a0052b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a0040d2:	a901      	add	r1, sp, #4
1a0040d4:	a802      	add	r0, sp, #8
1a0040d6:	f000 fd59 	bl	1a004b8c <xTaskCheckForTimeOut>
1a0040da:	2800      	cmp	r0, #0
1a0040dc:	d1d1      	bne.n	1a004082 <xQueueReceive+0xc2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a0040de:	4620      	mov	r0, r4
1a0040e0:	f7ff fcf1 	bl	1a003ac6 <prvIsQueueEmpty>
1a0040e4:	2800      	cmp	r0, #0
1a0040e6:	d0c6      	beq.n	1a004076 <xQueueReceive+0xb6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a0040e8:	9901      	ldr	r1, [sp, #4]
1a0040ea:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0040ee:	f000 fcc7 	bl	1a004a80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a0040f2:	4620      	mov	r0, r4
1a0040f4:	f7ff fd41 	bl	1a003b7a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a0040f8:	f000 fbb8 	bl	1a00486c <xTaskResumeAll>
1a0040fc:	2800      	cmp	r0, #0
1a0040fe:	d1ca      	bne.n	1a004096 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
1a004100:	4b05      	ldr	r3, [pc, #20]	; (1a004118 <xQueueReceive+0x158>)
1a004102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a004106:	601a      	str	r2, [r3, #0]
1a004108:	f3bf 8f4f 	dsb	sy
1a00410c:	f3bf 8f6f 	isb	sy
1a004110:	e7c1      	b.n	1a004096 <xQueueReceive+0xd6>
				return errQUEUE_EMPTY;
1a004112:	2000      	movs	r0, #0
1a004114:	e78d      	b.n	1a004032 <xQueueReceive+0x72>
1a004116:	bf00      	nop
1a004118:	e000ed04 	.word	0xe000ed04

1a00411c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a00411c:	2300      	movs	r3, #0
1a00411e:	2b07      	cmp	r3, #7
1a004120:	d80c      	bhi.n	1a00413c <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a004122:	4a07      	ldr	r2, [pc, #28]	; (1a004140 <vQueueAddToRegistry+0x24>)
1a004124:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a004128:	b10a      	cbz	r2, 1a00412e <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a00412a:	3301      	adds	r3, #1
1a00412c:	e7f7      	b.n	1a00411e <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a00412e:	4a04      	ldr	r2, [pc, #16]	; (1a004140 <vQueueAddToRegistry+0x24>)
1a004130:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a004134:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a004138:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a00413a:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a00413c:	4770      	bx	lr
1a00413e:	bf00      	nop
1a004140:	10004fa4 	.word	0x10004fa4

1a004144 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a004144:	b570      	push	{r4, r5, r6, lr}
1a004146:	4604      	mov	r4, r0
1a004148:	460d      	mov	r5, r1
1a00414a:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a00414c:	f001 f892 	bl	1a005274 <vPortEnterCritical>
1a004150:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a004154:	b25b      	sxtb	r3, r3
1a004156:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00415a:	d00d      	beq.n	1a004178 <vQueueWaitForMessageRestricted+0x34>
1a00415c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a004160:	b25b      	sxtb	r3, r3
1a004162:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a004166:	d00b      	beq.n	1a004180 <vQueueWaitForMessageRestricted+0x3c>
1a004168:	f001 f8a6 	bl	1a0052b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a00416c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a00416e:	b15b      	cbz	r3, 1a004188 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a004170:	4620      	mov	r0, r4
1a004172:	f7ff fd02 	bl	1a003b7a <prvUnlockQueue>
	}
1a004176:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a004178:	2300      	movs	r3, #0
1a00417a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a00417e:	e7ed      	b.n	1a00415c <vQueueWaitForMessageRestricted+0x18>
1a004180:	2300      	movs	r3, #0
1a004182:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a004186:	e7ef      	b.n	1a004168 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a004188:	4632      	mov	r2, r6
1a00418a:	4629      	mov	r1, r5
1a00418c:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a004190:	f000 fc8e 	bl	1a004ab0 <vTaskPlaceOnEventListRestricted>
1a004194:	e7ec      	b.n	1a004170 <vQueueWaitForMessageRestricted+0x2c>

1a004196 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a004196:	f100 0308 	add.w	r3, r0, #8
1a00419a:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a00419c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0041a0:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0041a2:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0041a4:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a0041a6:	2300      	movs	r3, #0
1a0041a8:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a0041aa:	4770      	bx	lr

1a0041ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a0041ac:	2300      	movs	r3, #0
1a0041ae:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a0041b0:	4770      	bx	lr

1a0041b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a0041b2:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a0041b4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a0041b6:	689a      	ldr	r2, [r3, #8]
1a0041b8:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a0041ba:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a0041bc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a0041be:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a0041c0:	6803      	ldr	r3, [r0, #0]
1a0041c2:	3301      	adds	r3, #1
1a0041c4:	6003      	str	r3, [r0, #0]
}
1a0041c6:	4770      	bx	lr

1a0041c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a0041c8:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a0041ca:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a0041cc:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a0041d0:	d002      	beq.n	1a0041d8 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0041d2:	f100 0208 	add.w	r2, r0, #8
1a0041d6:	e002      	b.n	1a0041de <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a0041d8:	6902      	ldr	r2, [r0, #16]
1a0041da:	e004      	b.n	1a0041e6 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0041dc:	461a      	mov	r2, r3
1a0041de:	6853      	ldr	r3, [r2, #4]
1a0041e0:	681c      	ldr	r4, [r3, #0]
1a0041e2:	42ac      	cmp	r4, r5
1a0041e4:	d9fa      	bls.n	1a0041dc <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a0041e6:	6853      	ldr	r3, [r2, #4]
1a0041e8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a0041ea:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a0041ec:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a0041ee:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a0041f0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a0041f2:	6803      	ldr	r3, [r0, #0]
1a0041f4:	3301      	adds	r3, #1
1a0041f6:	6003      	str	r3, [r0, #0]
}
1a0041f8:	bc30      	pop	{r4, r5}
1a0041fa:	4770      	bx	lr

1a0041fc <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a0041fc:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a0041fe:	6841      	ldr	r1, [r0, #4]
1a004200:	6882      	ldr	r2, [r0, #8]
1a004202:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a004204:	6841      	ldr	r1, [r0, #4]
1a004206:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a004208:	685a      	ldr	r2, [r3, #4]
1a00420a:	4282      	cmp	r2, r0
1a00420c:	d006      	beq.n	1a00421c <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a00420e:	2200      	movs	r2, #0
1a004210:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a004212:	681a      	ldr	r2, [r3, #0]
1a004214:	3a01      	subs	r2, #1
1a004216:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a004218:	6818      	ldr	r0, [r3, #0]
}
1a00421a:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a00421c:	6882      	ldr	r2, [r0, #8]
1a00421e:	605a      	str	r2, [r3, #4]
1a004220:	e7f5      	b.n	1a00420e <uxListRemove+0x12>
1a004222:	Address 0x000000001a004222 is out of bounds.


1a004224 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a004224:	4b03      	ldr	r3, [pc, #12]	; (1a004234 <vApplicationGetIdleTaskMemory+0x10>)
1a004226:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a004228:	4b03      	ldr	r3, [pc, #12]	; (1a004238 <vApplicationGetIdleTaskMemory+0x14>)
1a00422a:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a00422c:	2364      	movs	r3, #100	; 0x64
1a00422e:	6013      	str	r3, [r2, #0]
}
1a004230:	4770      	bx	lr
1a004232:	bf00      	nop
1a004234:	100048e8 	.word	0x100048e8
1a004238:	10004118 	.word	0x10004118

1a00423c <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a00423c:	4b03      	ldr	r3, [pc, #12]	; (1a00424c <vApplicationGetTimerTaskMemory+0x10>)
1a00423e:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a004240:	4b03      	ldr	r3, [pc, #12]	; (1a004250 <vApplicationGetTimerTaskMemory+0x14>)
1a004242:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a004244:	f44f 73c8 	mov.w	r3, #400	; 0x190
1a004248:	6013      	str	r3, [r2, #0]
1a00424a:	4770      	bx	lr
1a00424c:	10004948 	.word	0x10004948
1a004250:	100042a8 	.word	0x100042a8

1a004254 <vAssertCalled>:
#include <task.h>

#define WEAK __attribute__ ((weak))

WEAK void vAssertCalled( uint32_t ulLine, const char * const pcFile )
{
1a004254:	b510      	push	{r4, lr}
1a004256:	b082      	sub	sp, #8
1a004258:	460c      	mov	r4, r1
// The following two variables are just to ensure the parameters are not
// optimised away and therefore unavailable when viewed in the debugger.
   volatile uint32_t ulLineNumber = ulLine, ulSetNonZeroInDebuggerToReturn = 0;
1a00425a:	9001      	str	r0, [sp, #4]
1a00425c:	2300      	movs	r3, #0
1a00425e:	9300      	str	r3, [sp, #0]
   volatile const char * const pcFileName = pcFile;

   taskENTER_CRITICAL();
1a004260:	f001 f808 	bl	1a005274 <vPortEnterCritical>
   {
      printf( "\r\nvAssertCalled()\r\n   LLine Number = %d\r\n   File Name = %s\r\n\r\n",
1a004264:	9901      	ldr	r1, [sp, #4]
1a004266:	4622      	mov	r2, r4
1a004268:	4804      	ldr	r0, [pc, #16]	; (1a00427c <vAssertCalled+0x28>)
1a00426a:	f003 fbf3 	bl	1a007a54 <iprintf>
              ulLineNumber, pcFileName ); // @Eric
      while( ulSetNonZeroInDebuggerToReturn == 0 ) {
1a00426e:	9b00      	ldr	r3, [sp, #0]
1a004270:	2b00      	cmp	r3, #0
1a004272:	d0fc      	beq.n	1a00426e <vAssertCalled+0x1a>
         // If you want to set out of this function in the debugger to see
         // the assert() location then set ulSetNonZeroInDebuggerToReturn to a
         // non-zero value.
      }
   }
   taskEXIT_CRITICAL();
1a004274:	f001 f820 	bl	1a0052b8 <vPortExitCritical>

//   printf( "Stop in a while(1)\r\n\r\n" ); // @Eric
//   while(1); // @Eric
}
1a004278:	b002      	add	sp, #8
1a00427a:	bd10      	pop	{r4, pc}
1a00427c:	1a008870 	.word	0x1a008870

1a004280 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

WEAK void vApplicationMallocFailedHook( void )
{
1a004280:	b508      	push	{r3, lr}
   // parts of the demo application.  If heap_1.c, heap_2.c or heap_4.c are used,
   // then the size of the heap available to pvPortMalloc() is defined by
   // configTOTAL_HEAP_SIZE in FreeRTOSConfig.h, and the xPortGetFreeHeapSize()
   // API function can be used to query the size of free heap space that remains.
   // More information is provided in the book text.
   printf( "Application Malloc Failed Hook!\r\n" );
1a004282:	4804      	ldr	r0, [pc, #16]	; (1a004294 <vApplicationMallocFailedHook+0x14>)
1a004284:	f003 fc80 	bl	1a007b88 <puts>
   vAssertCalled( __LINE__, __FILE__ );
1a004288:	4903      	ldr	r1, [pc, #12]	; (1a004298 <vApplicationMallocFailedHook+0x18>)
1a00428a:	202c      	movs	r0, #44	; 0x2c
1a00428c:	f7ff ffe2 	bl	1a004254 <vAssertCalled>
}
1a004290:	bd08      	pop	{r3, pc}
1a004292:	bf00      	nop
1a004294:	1a0087fc 	.word	0x1a0087fc
1a004298:	1a008820 	.word	0x1a008820

1a00429c <vApplicationStackOverflowHook>:
}
#endif /* 0 */
/*-----------------------------------------------------------*/

WEAK void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
1a00429c:	b508      	push	{r3, lr}

   // Run time stack overflow checking is performed if
   // configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   // called if a stack overflow is detected. More information is provided in the
   // book text.
   printf( "\r\nApplication Stack Overflow!! on Task: %s\r\n", (char*)pcTaskName );
1a00429e:	4804      	ldr	r0, [pc, #16]	; (1a0042b0 <vApplicationStackOverflowHook+0x14>)
1a0042a0:	f003 fbd8 	bl	1a007a54 <iprintf>
   vAssertCalled( __LINE__, __FILE__ );
1a0042a4:	4903      	ldr	r1, [pc, #12]	; (1a0042b4 <vApplicationStackOverflowHook+0x18>)
1a0042a6:	2050      	movs	r0, #80	; 0x50
1a0042a8:	f7ff ffd4 	bl	1a004254 <vAssertCalled>
}
1a0042ac:	bd08      	pop	{r3, pc}
1a0042ae:	bf00      	nop
1a0042b0:	1a008840 	.word	0x1a008840
1a0042b4:	1a008820 	.word	0x1a008820

1a0042b8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a0042b8:	4b08      	ldr	r3, [pc, #32]	; (1a0042dc <prvResetNextTaskUnblockTime+0x24>)
1a0042ba:	681b      	ldr	r3, [r3, #0]
1a0042bc:	681b      	ldr	r3, [r3, #0]
1a0042be:	b923      	cbnz	r3, 1a0042ca <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
1a0042c0:	4b07      	ldr	r3, [pc, #28]	; (1a0042e0 <prvResetNextTaskUnblockTime+0x28>)
1a0042c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0042c6:	601a      	str	r2, [r3, #0]
1a0042c8:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a0042ca:	4b04      	ldr	r3, [pc, #16]	; (1a0042dc <prvResetNextTaskUnblockTime+0x24>)
1a0042cc:	681b      	ldr	r3, [r3, #0]
1a0042ce:	68db      	ldr	r3, [r3, #12]
1a0042d0:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a0042d2:	685a      	ldr	r2, [r3, #4]
1a0042d4:	4b02      	ldr	r3, [pc, #8]	; (1a0042e0 <prvResetNextTaskUnblockTime+0x28>)
1a0042d6:	601a      	str	r2, [r3, #0]
	}
}
1a0042d8:	4770      	bx	lr
1a0042da:	bf00      	nop
1a0042dc:	100049ac 	.word	0x100049ac
1a0042e0:	10004a80 	.word	0x10004a80

1a0042e4 <prvInitialiseNewTask>:
{
1a0042e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0042e8:	4681      	mov	r9, r0
1a0042ea:	460d      	mov	r5, r1
1a0042ec:	4617      	mov	r7, r2
1a0042ee:	469a      	mov	sl, r3
1a0042f0:	9e08      	ldr	r6, [sp, #32]
1a0042f2:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a0042f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a0042f8:	0092      	lsls	r2, r2, #2
1a0042fa:	21a5      	movs	r1, #165	; 0xa5
1a0042fc:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a0042fe:	f003 f81c 	bl	1a00733a <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a004302:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a004304:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a004308:	3a01      	subs	r2, #1
1a00430a:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a00430e:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a004312:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a004314:	2300      	movs	r3, #0
1a004316:	2b0f      	cmp	r3, #15
1a004318:	d806      	bhi.n	1a004328 <prvInitialiseNewTask+0x44>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a00431a:	5cea      	ldrb	r2, [r5, r3]
1a00431c:	18e1      	adds	r1, r4, r3
1a00431e:	f881 2034 	strb.w	r2, [r1, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a004322:	b10a      	cbz	r2, 1a004328 <prvInitialiseNewTask+0x44>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a004324:	3301      	adds	r3, #1
1a004326:	e7f6      	b.n	1a004316 <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a004328:	2300      	movs	r3, #0
1a00432a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a00432e:	2e06      	cmp	r6, #6
1a004330:	d900      	bls.n	1a004334 <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a004332:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a004334:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a004336:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a004338:	2500      	movs	r5, #0
1a00433a:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a00433c:	1d20      	adds	r0, r4, #4
1a00433e:	f7ff ff35 	bl	1a0041ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a004342:	f104 0018 	add.w	r0, r4, #24
1a004346:	f7ff ff31 	bl	1a0041ac <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a00434a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00434c:	f1c6 0607 	rsb	r6, r6, #7
1a004350:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a004352:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a004354:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a004356:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a00435a:	4652      	mov	r2, sl
1a00435c:	4649      	mov	r1, r9
1a00435e:	4638      	mov	r0, r7
1a004360:	f000 ff5a 	bl	1a005218 <pxPortInitialiseStack>
1a004364:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a004366:	f1b8 0f00 	cmp.w	r8, #0
1a00436a:	d001      	beq.n	1a004370 <prvInitialiseNewTask+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a00436c:	f8c8 4000 	str.w	r4, [r8]
}
1a004370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

1a004374 <prvInitialiseTaskLists>:
{
1a004374:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a004376:	2400      	movs	r4, #0
1a004378:	2c06      	cmp	r4, #6
1a00437a:	d808      	bhi.n	1a00438e <prvInitialiseTaskLists+0x1a>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a00437c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a004380:	0093      	lsls	r3, r2, #2
1a004382:	480e      	ldr	r0, [pc, #56]	; (1a0043bc <prvInitialiseTaskLists+0x48>)
1a004384:	4418      	add	r0, r3
1a004386:	f7ff ff06 	bl	1a004196 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a00438a:	3401      	adds	r4, #1
1a00438c:	e7f4      	b.n	1a004378 <prvInitialiseTaskLists+0x4>
	vListInitialise( &xDelayedTaskList1 );
1a00438e:	4d0c      	ldr	r5, [pc, #48]	; (1a0043c0 <prvInitialiseTaskLists+0x4c>)
1a004390:	4628      	mov	r0, r5
1a004392:	f7ff ff00 	bl	1a004196 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a004396:	4c0b      	ldr	r4, [pc, #44]	; (1a0043c4 <prvInitialiseTaskLists+0x50>)
1a004398:	4620      	mov	r0, r4
1a00439a:	f7ff fefc 	bl	1a004196 <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a00439e:	480a      	ldr	r0, [pc, #40]	; (1a0043c8 <prvInitialiseTaskLists+0x54>)
1a0043a0:	f7ff fef9 	bl	1a004196 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a0043a4:	4809      	ldr	r0, [pc, #36]	; (1a0043cc <prvInitialiseTaskLists+0x58>)
1a0043a6:	f7ff fef6 	bl	1a004196 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a0043aa:	4809      	ldr	r0, [pc, #36]	; (1a0043d0 <prvInitialiseTaskLists+0x5c>)
1a0043ac:	f7ff fef3 	bl	1a004196 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a0043b0:	4b08      	ldr	r3, [pc, #32]	; (1a0043d4 <prvInitialiseTaskLists+0x60>)
1a0043b2:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a0043b4:	4b08      	ldr	r3, [pc, #32]	; (1a0043d8 <prvInitialiseTaskLists+0x64>)
1a0043b6:	601c      	str	r4, [r3, #0]
}
1a0043b8:	bd38      	pop	{r3, r4, r5, pc}
1a0043ba:	bf00      	nop
1a0043bc:	100049b4 	.word	0x100049b4
1a0043c0:	10004a58 	.word	0x10004a58
1a0043c4:	10004a6c 	.word	0x10004a6c
1a0043c8:	10004a88 	.word	0x10004a88
1a0043cc:	10004ab4 	.word	0x10004ab4
1a0043d0:	10004aa0 	.word	0x10004aa0
1a0043d4:	100049ac 	.word	0x100049ac
1a0043d8:	100049b0 	.word	0x100049b0

1a0043dc <prvAddNewTaskToReadyList>:
{
1a0043dc:	b510      	push	{r4, lr}
1a0043de:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a0043e0:	f000 ff48 	bl	1a005274 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a0043e4:	4a21      	ldr	r2, [pc, #132]	; (1a00446c <prvAddNewTaskToReadyList+0x90>)
1a0043e6:	6813      	ldr	r3, [r2, #0]
1a0043e8:	3301      	adds	r3, #1
1a0043ea:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a0043ec:	4b20      	ldr	r3, [pc, #128]	; (1a004470 <prvAddNewTaskToReadyList+0x94>)
1a0043ee:	681b      	ldr	r3, [r3, #0]
1a0043f0:	b15b      	cbz	r3, 1a00440a <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a0043f2:	4b20      	ldr	r3, [pc, #128]	; (1a004474 <prvAddNewTaskToReadyList+0x98>)
1a0043f4:	681b      	ldr	r3, [r3, #0]
1a0043f6:	b96b      	cbnz	r3, 1a004414 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a0043f8:	4b1d      	ldr	r3, [pc, #116]	; (1a004470 <prvAddNewTaskToReadyList+0x94>)
1a0043fa:	681b      	ldr	r3, [r3, #0]
1a0043fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0043fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a004400:	429a      	cmp	r2, r3
1a004402:	d807      	bhi.n	1a004414 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a004404:	4b1a      	ldr	r3, [pc, #104]	; (1a004470 <prvAddNewTaskToReadyList+0x94>)
1a004406:	601c      	str	r4, [r3, #0]
1a004408:	e004      	b.n	1a004414 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a00440a:	4b19      	ldr	r3, [pc, #100]	; (1a004470 <prvAddNewTaskToReadyList+0x94>)
1a00440c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a00440e:	6813      	ldr	r3, [r2, #0]
1a004410:	2b01      	cmp	r3, #1
1a004412:	d027      	beq.n	1a004464 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a004414:	4a18      	ldr	r2, [pc, #96]	; (1a004478 <prvAddNewTaskToReadyList+0x9c>)
1a004416:	6813      	ldr	r3, [r2, #0]
1a004418:	3301      	adds	r3, #1
1a00441a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a00441c:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a00441e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a004420:	2201      	movs	r2, #1
1a004422:	409a      	lsls	r2, r3
1a004424:	4915      	ldr	r1, [pc, #84]	; (1a00447c <prvAddNewTaskToReadyList+0xa0>)
1a004426:	6808      	ldr	r0, [r1, #0]
1a004428:	4302      	orrs	r2, r0
1a00442a:	600a      	str	r2, [r1, #0]
1a00442c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a004430:	009a      	lsls	r2, r3, #2
1a004432:	1d21      	adds	r1, r4, #4
1a004434:	4812      	ldr	r0, [pc, #72]	; (1a004480 <prvAddNewTaskToReadyList+0xa4>)
1a004436:	4410      	add	r0, r2
1a004438:	f7ff febb 	bl	1a0041b2 <vListInsertEnd>
	taskEXIT_CRITICAL();
1a00443c:	f000 ff3c 	bl	1a0052b8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a004440:	4b0c      	ldr	r3, [pc, #48]	; (1a004474 <prvAddNewTaskToReadyList+0x98>)
1a004442:	681b      	ldr	r3, [r3, #0]
1a004444:	b16b      	cbz	r3, 1a004462 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a004446:	4b0a      	ldr	r3, [pc, #40]	; (1a004470 <prvAddNewTaskToReadyList+0x94>)
1a004448:	681b      	ldr	r3, [r3, #0]
1a00444a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a00444c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00444e:	429a      	cmp	r2, r3
1a004450:	d207      	bcs.n	1a004462 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a004452:	4b0c      	ldr	r3, [pc, #48]	; (1a004484 <prvAddNewTaskToReadyList+0xa8>)
1a004454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a004458:	601a      	str	r2, [r3, #0]
1a00445a:	f3bf 8f4f 	dsb	sy
1a00445e:	f3bf 8f6f 	isb	sy
}
1a004462:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a004464:	f7ff ff86 	bl	1a004374 <prvInitialiseTaskLists>
1a004468:	e7d4      	b.n	1a004414 <prvAddNewTaskToReadyList+0x38>
1a00446a:	bf00      	nop
1a00446c:	10004a40 	.word	0x10004a40
1a004470:	100049a8 	.word	0x100049a8
1a004474:	10004a9c 	.word	0x10004a9c
1a004478:	10004a50 	.word	0x10004a50
1a00447c:	10004a54 	.word	0x10004a54
1a004480:	100049b4 	.word	0x100049b4
1a004484:	e000ed04 	.word	0xe000ed04

1a004488 <prvDeleteTCB>:
	{
1a004488:	b510      	push	{r4, lr}
1a00448a:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a00448c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a004490:	b163      	cbz	r3, 1a0044ac <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a004492:	2b01      	cmp	r3, #1
1a004494:	d011      	beq.n	1a0044ba <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a004496:	2b02      	cmp	r3, #2
1a004498:	d00e      	beq.n	1a0044b8 <prvDeleteTCB+0x30>
1a00449a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00449e:	f383 8811 	msr	BASEPRI, r3
1a0044a2:	f3bf 8f6f 	isb	sy
1a0044a6:	f3bf 8f4f 	dsb	sy
1a0044aa:	e7fe      	b.n	1a0044aa <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
1a0044ac:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a0044ae:	f7ff fac3 	bl	1a003a38 <vPortFree>
				vPortFree( pxTCB );
1a0044b2:	4620      	mov	r0, r4
1a0044b4:	f7ff fac0 	bl	1a003a38 <vPortFree>
	}
1a0044b8:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
1a0044ba:	f7ff fabd 	bl	1a003a38 <vPortFree>
1a0044be:	e7fb      	b.n	1a0044b8 <prvDeleteTCB+0x30>

1a0044c0 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a0044c0:	4b0f      	ldr	r3, [pc, #60]	; (1a004500 <prvCheckTasksWaitingTermination+0x40>)
1a0044c2:	681b      	ldr	r3, [r3, #0]
1a0044c4:	b1d3      	cbz	r3, 1a0044fc <prvCheckTasksWaitingTermination+0x3c>
{
1a0044c6:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a0044c8:	f000 fed4 	bl	1a005274 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a0044cc:	4b0d      	ldr	r3, [pc, #52]	; (1a004504 <prvCheckTasksWaitingTermination+0x44>)
1a0044ce:	68db      	ldr	r3, [r3, #12]
1a0044d0:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0044d2:	1d20      	adds	r0, r4, #4
1a0044d4:	f7ff fe92 	bl	1a0041fc <uxListRemove>
				--uxCurrentNumberOfTasks;
1a0044d8:	4a0b      	ldr	r2, [pc, #44]	; (1a004508 <prvCheckTasksWaitingTermination+0x48>)
1a0044da:	6813      	ldr	r3, [r2, #0]
1a0044dc:	3b01      	subs	r3, #1
1a0044de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a0044e0:	4a07      	ldr	r2, [pc, #28]	; (1a004500 <prvCheckTasksWaitingTermination+0x40>)
1a0044e2:	6813      	ldr	r3, [r2, #0]
1a0044e4:	3b01      	subs	r3, #1
1a0044e6:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a0044e8:	f000 fee6 	bl	1a0052b8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a0044ec:	4620      	mov	r0, r4
1a0044ee:	f7ff ffcb 	bl	1a004488 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a0044f2:	4b03      	ldr	r3, [pc, #12]	; (1a004500 <prvCheckTasksWaitingTermination+0x40>)
1a0044f4:	681b      	ldr	r3, [r3, #0]
1a0044f6:	2b00      	cmp	r3, #0
1a0044f8:	d1e6      	bne.n	1a0044c8 <prvCheckTasksWaitingTermination+0x8>
}
1a0044fa:	bd10      	pop	{r4, pc}
1a0044fc:	4770      	bx	lr
1a0044fe:	bf00      	nop
1a004500:	10004a44 	.word	0x10004a44
1a004504:	10004ab4 	.word	0x10004ab4
1a004508:	10004a40 	.word	0x10004a40

1a00450c <prvIdleTask>:
{
1a00450c:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a00450e:	f7ff ffd7 	bl	1a0044c0 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a004512:	4b06      	ldr	r3, [pc, #24]	; (1a00452c <prvIdleTask+0x20>)
1a004514:	681b      	ldr	r3, [r3, #0]
1a004516:	2b01      	cmp	r3, #1
1a004518:	d9f9      	bls.n	1a00450e <prvIdleTask+0x2>
				taskYIELD();
1a00451a:	4b05      	ldr	r3, [pc, #20]	; (1a004530 <prvIdleTask+0x24>)
1a00451c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a004520:	601a      	str	r2, [r3, #0]
1a004522:	f3bf 8f4f 	dsb	sy
1a004526:	f3bf 8f6f 	isb	sy
1a00452a:	e7f0      	b.n	1a00450e <prvIdleTask+0x2>
1a00452c:	100049b4 	.word	0x100049b4
1a004530:	e000ed04 	.word	0xe000ed04

1a004534 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a004534:	b570      	push	{r4, r5, r6, lr}
1a004536:	4604      	mov	r4, r0
1a004538:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a00453a:	4b1d      	ldr	r3, [pc, #116]	; (1a0045b0 <prvAddCurrentTaskToDelayedList+0x7c>)
1a00453c:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a00453e:	4b1d      	ldr	r3, [pc, #116]	; (1a0045b4 <prvAddCurrentTaskToDelayedList+0x80>)
1a004540:	6818      	ldr	r0, [r3, #0]
1a004542:	3004      	adds	r0, #4
1a004544:	f7ff fe5a 	bl	1a0041fc <uxListRemove>
1a004548:	b950      	cbnz	r0, 1a004560 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a00454a:	4b1a      	ldr	r3, [pc, #104]	; (1a0045b4 <prvAddCurrentTaskToDelayedList+0x80>)
1a00454c:	681b      	ldr	r3, [r3, #0]
1a00454e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a004550:	2301      	movs	r3, #1
1a004552:	fa03 f202 	lsl.w	r2, r3, r2
1a004556:	4918      	ldr	r1, [pc, #96]	; (1a0045b8 <prvAddCurrentTaskToDelayedList+0x84>)
1a004558:	680b      	ldr	r3, [r1, #0]
1a00455a:	ea23 0302 	bic.w	r3, r3, r2
1a00455e:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a004560:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a004564:	d00d      	beq.n	1a004582 <prvAddCurrentTaskToDelayedList+0x4e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a004566:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a004568:	4b12      	ldr	r3, [pc, #72]	; (1a0045b4 <prvAddCurrentTaskToDelayedList+0x80>)
1a00456a:	681b      	ldr	r3, [r3, #0]
1a00456c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a00456e:	42a5      	cmp	r5, r4
1a004570:	d910      	bls.n	1a004594 <prvAddCurrentTaskToDelayedList+0x60>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a004572:	4b12      	ldr	r3, [pc, #72]	; (1a0045bc <prvAddCurrentTaskToDelayedList+0x88>)
1a004574:	6818      	ldr	r0, [r3, #0]
1a004576:	4b0f      	ldr	r3, [pc, #60]	; (1a0045b4 <prvAddCurrentTaskToDelayedList+0x80>)
1a004578:	6819      	ldr	r1, [r3, #0]
1a00457a:	3104      	adds	r1, #4
1a00457c:	f7ff fe24 	bl	1a0041c8 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a004580:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a004582:	2e00      	cmp	r6, #0
1a004584:	d0ef      	beq.n	1a004566 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a004586:	4b0b      	ldr	r3, [pc, #44]	; (1a0045b4 <prvAddCurrentTaskToDelayedList+0x80>)
1a004588:	6819      	ldr	r1, [r3, #0]
1a00458a:	3104      	adds	r1, #4
1a00458c:	480c      	ldr	r0, [pc, #48]	; (1a0045c0 <prvAddCurrentTaskToDelayedList+0x8c>)
1a00458e:	f7ff fe10 	bl	1a0041b2 <vListInsertEnd>
1a004592:	e7f5      	b.n	1a004580 <prvAddCurrentTaskToDelayedList+0x4c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a004594:	4b0b      	ldr	r3, [pc, #44]	; (1a0045c4 <prvAddCurrentTaskToDelayedList+0x90>)
1a004596:	6818      	ldr	r0, [r3, #0]
1a004598:	4b06      	ldr	r3, [pc, #24]	; (1a0045b4 <prvAddCurrentTaskToDelayedList+0x80>)
1a00459a:	6819      	ldr	r1, [r3, #0]
1a00459c:	3104      	adds	r1, #4
1a00459e:	f7ff fe13 	bl	1a0041c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
1a0045a2:	4b09      	ldr	r3, [pc, #36]	; (1a0045c8 <prvAddCurrentTaskToDelayedList+0x94>)
1a0045a4:	681b      	ldr	r3, [r3, #0]
1a0045a6:	42a3      	cmp	r3, r4
1a0045a8:	d9ea      	bls.n	1a004580 <prvAddCurrentTaskToDelayedList+0x4c>
					xNextTaskUnblockTime = xTimeToWake;
1a0045aa:	4b07      	ldr	r3, [pc, #28]	; (1a0045c8 <prvAddCurrentTaskToDelayedList+0x94>)
1a0045ac:	601c      	str	r4, [r3, #0]
}
1a0045ae:	e7e7      	b.n	1a004580 <prvAddCurrentTaskToDelayedList+0x4c>
1a0045b0:	10004ac8 	.word	0x10004ac8
1a0045b4:	100049a8 	.word	0x100049a8
1a0045b8:	10004a54 	.word	0x10004a54
1a0045bc:	100049b0 	.word	0x100049b0
1a0045c0:	10004aa0 	.word	0x10004aa0
1a0045c4:	100049ac 	.word	0x100049ac
1a0045c8:	10004a80 	.word	0x10004a80

1a0045cc <xTaskCreateStatic>:
	{
1a0045cc:	b570      	push	{r4, r5, r6, lr}
1a0045ce:	b086      	sub	sp, #24
1a0045d0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a0045d2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a0045d4:	b175      	cbz	r5, 1a0045f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
1a0045d6:	b1b4      	cbz	r4, 1a004606 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
1a0045d8:	2660      	movs	r6, #96	; 0x60
1a0045da:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a0045dc:	9e04      	ldr	r6, [sp, #16]
1a0045de:	2e60      	cmp	r6, #96	; 0x60
1a0045e0:	d01a      	beq.n	1a004618 <xTaskCreateStatic+0x4c>
1a0045e2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0045e6:	f383 8811 	msr	BASEPRI, r3
1a0045ea:	f3bf 8f6f 	isb	sy
1a0045ee:	f3bf 8f4f 	dsb	sy
1a0045f2:	e7fe      	b.n	1a0045f2 <xTaskCreateStatic+0x26>
1a0045f4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0045f8:	f383 8811 	msr	BASEPRI, r3
1a0045fc:	f3bf 8f6f 	isb	sy
1a004600:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
1a004604:	e7fe      	b.n	1a004604 <xTaskCreateStatic+0x38>
1a004606:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00460a:	f383 8811 	msr	BASEPRI, r3
1a00460e:	f3bf 8f6f 	isb	sy
1a004612:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
1a004616:	e7fe      	b.n	1a004616 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a004618:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a00461a:	2502      	movs	r5, #2
1a00461c:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a004620:	2500      	movs	r5, #0
1a004622:	9503      	str	r5, [sp, #12]
1a004624:	9402      	str	r4, [sp, #8]
1a004626:	ad05      	add	r5, sp, #20
1a004628:	9501      	str	r5, [sp, #4]
1a00462a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a00462c:	9500      	str	r5, [sp, #0]
1a00462e:	f7ff fe59 	bl	1a0042e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a004632:	4620      	mov	r0, r4
1a004634:	f7ff fed2 	bl	1a0043dc <prvAddNewTaskToReadyList>
	}
1a004638:	9805      	ldr	r0, [sp, #20]
1a00463a:	b006      	add	sp, #24
1a00463c:	bd70      	pop	{r4, r5, r6, pc}

1a00463e <xTaskCreate>:
	{
1a00463e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a004642:	b085      	sub	sp, #20
1a004644:	4607      	mov	r7, r0
1a004646:	4688      	mov	r8, r1
1a004648:	4615      	mov	r5, r2
1a00464a:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00464c:	0090      	lsls	r0, r2, #2
1a00464e:	f7ff f965 	bl	1a00391c <pvPortMalloc>
			if( pxStack != NULL )
1a004652:	b1f8      	cbz	r0, 1a004694 <xTaskCreate+0x56>
1a004654:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a004656:	2060      	movs	r0, #96	; 0x60
1a004658:	f7ff f960 	bl	1a00391c <pvPortMalloc>
				if( pxNewTCB != NULL )
1a00465c:	4604      	mov	r4, r0
1a00465e:	b1a8      	cbz	r0, 1a00468c <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
1a004660:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a004662:	b1e4      	cbz	r4, 1a00469e <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a004664:	2300      	movs	r3, #0
1a004666:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a00466a:	9303      	str	r3, [sp, #12]
1a00466c:	9402      	str	r4, [sp, #8]
1a00466e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a004670:	9301      	str	r3, [sp, #4]
1a004672:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a004674:	9300      	str	r3, [sp, #0]
1a004676:	464b      	mov	r3, r9
1a004678:	462a      	mov	r2, r5
1a00467a:	4641      	mov	r1, r8
1a00467c:	4638      	mov	r0, r7
1a00467e:	f7ff fe31 	bl	1a0042e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a004682:	4620      	mov	r0, r4
1a004684:	f7ff feaa 	bl	1a0043dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a004688:	2001      	movs	r0, #1
1a00468a:	e005      	b.n	1a004698 <xTaskCreate+0x5a>
					vPortFree( pxStack );
1a00468c:	4630      	mov	r0, r6
1a00468e:	f7ff f9d3 	bl	1a003a38 <vPortFree>
1a004692:	e7e6      	b.n	1a004662 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a004694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
1a004698:	b005      	add	sp, #20
1a00469a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a00469e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a0046a2:	e7f9      	b.n	1a004698 <xTaskCreate+0x5a>

1a0046a4 <vTaskStartScheduler>:
{
1a0046a4:	b510      	push	{r4, lr}
1a0046a6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a0046a8:	2400      	movs	r4, #0
1a0046aa:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a0046ac:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a0046ae:	aa07      	add	r2, sp, #28
1a0046b0:	a906      	add	r1, sp, #24
1a0046b2:	a805      	add	r0, sp, #20
1a0046b4:	f7ff fdb6 	bl	1a004224 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a0046b8:	9b05      	ldr	r3, [sp, #20]
1a0046ba:	9302      	str	r3, [sp, #8]
1a0046bc:	9b06      	ldr	r3, [sp, #24]
1a0046be:	9301      	str	r3, [sp, #4]
1a0046c0:	9400      	str	r4, [sp, #0]
1a0046c2:	4623      	mov	r3, r4
1a0046c4:	9a07      	ldr	r2, [sp, #28]
1a0046c6:	4917      	ldr	r1, [pc, #92]	; (1a004724 <vTaskStartScheduler+0x80>)
1a0046c8:	4817      	ldr	r0, [pc, #92]	; (1a004728 <vTaskStartScheduler+0x84>)
1a0046ca:	f7ff ff7f 	bl	1a0045cc <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a0046ce:	b140      	cbz	r0, 1a0046e2 <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a0046d0:	f000 fb9a 	bl	1a004e08 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a0046d4:	2801      	cmp	r0, #1
1a0046d6:	d006      	beq.n	1a0046e6 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a0046d8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0046dc:	d018      	beq.n	1a004710 <vTaskStartScheduler+0x6c>
}
1a0046de:	b008      	add	sp, #32
1a0046e0:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a0046e2:	2000      	movs	r0, #0
1a0046e4:	e7f6      	b.n	1a0046d4 <vTaskStartScheduler+0x30>
1a0046e6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0046ea:	f383 8811 	msr	BASEPRI, r3
1a0046ee:	f3bf 8f6f 	isb	sy
1a0046f2:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a0046f6:	4b0d      	ldr	r3, [pc, #52]	; (1a00472c <vTaskStartScheduler+0x88>)
1a0046f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0046fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a0046fe:	4b0c      	ldr	r3, [pc, #48]	; (1a004730 <vTaskStartScheduler+0x8c>)
1a004700:	2201      	movs	r2, #1
1a004702:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a004704:	4b0b      	ldr	r3, [pc, #44]	; (1a004734 <vTaskStartScheduler+0x90>)
1a004706:	2200      	movs	r2, #0
1a004708:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a00470a:	f000 fe55 	bl	1a0053b8 <xPortStartScheduler>
1a00470e:	e7e6      	b.n	1a0046de <vTaskStartScheduler+0x3a>
1a004710:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004714:	f383 8811 	msr	BASEPRI, r3
1a004718:	f3bf 8f6f 	isb	sy
1a00471c:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a004720:	e7fe      	b.n	1a004720 <vTaskStartScheduler+0x7c>
1a004722:	bf00      	nop
1a004724:	1a0088b0 	.word	0x1a0088b0
1a004728:	1a00450d 	.word	0x1a00450d
1a00472c:	10004a80 	.word	0x10004a80
1a004730:	10004a9c 	.word	0x10004a9c
1a004734:	10004ac8 	.word	0x10004ac8

1a004738 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a004738:	4a02      	ldr	r2, [pc, #8]	; (1a004744 <vTaskSuspendAll+0xc>)
1a00473a:	6813      	ldr	r3, [r2, #0]
1a00473c:	3301      	adds	r3, #1
1a00473e:	6013      	str	r3, [r2, #0]
}
1a004740:	4770      	bx	lr
1a004742:	bf00      	nop
1a004744:	10004a4c 	.word	0x10004a4c

1a004748 <xTaskGetTickCount>:
		xTicks = xTickCount;
1a004748:	4b01      	ldr	r3, [pc, #4]	; (1a004750 <xTaskGetTickCount+0x8>)
1a00474a:	6818      	ldr	r0, [r3, #0]
}
1a00474c:	4770      	bx	lr
1a00474e:	bf00      	nop
1a004750:	10004ac8 	.word	0x10004ac8

1a004754 <xTaskIncrementTick>:
{
1a004754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a004756:	4b3a      	ldr	r3, [pc, #232]	; (1a004840 <xTaskIncrementTick+0xec>)
1a004758:	681b      	ldr	r3, [r3, #0]
1a00475a:	2b00      	cmp	r3, #0
1a00475c:	d164      	bne.n	1a004828 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a00475e:	4b39      	ldr	r3, [pc, #228]	; (1a004844 <xTaskIncrementTick+0xf0>)
1a004760:	681d      	ldr	r5, [r3, #0]
1a004762:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a004764:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a004766:	b9c5      	cbnz	r5, 1a00479a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a004768:	4b37      	ldr	r3, [pc, #220]	; (1a004848 <xTaskIncrementTick+0xf4>)
1a00476a:	681b      	ldr	r3, [r3, #0]
1a00476c:	681b      	ldr	r3, [r3, #0]
1a00476e:	b143      	cbz	r3, 1a004782 <xTaskIncrementTick+0x2e>
1a004770:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004774:	f383 8811 	msr	BASEPRI, r3
1a004778:	f3bf 8f6f 	isb	sy
1a00477c:	f3bf 8f4f 	dsb	sy
1a004780:	e7fe      	b.n	1a004780 <xTaskIncrementTick+0x2c>
1a004782:	4a31      	ldr	r2, [pc, #196]	; (1a004848 <xTaskIncrementTick+0xf4>)
1a004784:	6811      	ldr	r1, [r2, #0]
1a004786:	4b31      	ldr	r3, [pc, #196]	; (1a00484c <xTaskIncrementTick+0xf8>)
1a004788:	6818      	ldr	r0, [r3, #0]
1a00478a:	6010      	str	r0, [r2, #0]
1a00478c:	6019      	str	r1, [r3, #0]
1a00478e:	4a30      	ldr	r2, [pc, #192]	; (1a004850 <xTaskIncrementTick+0xfc>)
1a004790:	6813      	ldr	r3, [r2, #0]
1a004792:	3301      	adds	r3, #1
1a004794:	6013      	str	r3, [r2, #0]
1a004796:	f7ff fd8f 	bl	1a0042b8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a00479a:	4b2e      	ldr	r3, [pc, #184]	; (1a004854 <xTaskIncrementTick+0x100>)
1a00479c:	681b      	ldr	r3, [r3, #0]
1a00479e:	42ab      	cmp	r3, r5
1a0047a0:	d938      	bls.n	1a004814 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a0047a2:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a0047a4:	4b2c      	ldr	r3, [pc, #176]	; (1a004858 <xTaskIncrementTick+0x104>)
1a0047a6:	681b      	ldr	r3, [r3, #0]
1a0047a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0047aa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0047ae:	009a      	lsls	r2, r3, #2
1a0047b0:	4b2a      	ldr	r3, [pc, #168]	; (1a00485c <xTaskIncrementTick+0x108>)
1a0047b2:	589b      	ldr	r3, [r3, r2]
1a0047b4:	2b01      	cmp	r3, #1
1a0047b6:	d93c      	bls.n	1a004832 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a0047b8:	2401      	movs	r4, #1
1a0047ba:	e03a      	b.n	1a004832 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a0047bc:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a0047be:	4b22      	ldr	r3, [pc, #136]	; (1a004848 <xTaskIncrementTick+0xf4>)
1a0047c0:	681b      	ldr	r3, [r3, #0]
1a0047c2:	681b      	ldr	r3, [r3, #0]
1a0047c4:	b343      	cbz	r3, 1a004818 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a0047c6:	4b20      	ldr	r3, [pc, #128]	; (1a004848 <xTaskIncrementTick+0xf4>)
1a0047c8:	681b      	ldr	r3, [r3, #0]
1a0047ca:	68db      	ldr	r3, [r3, #12]
1a0047cc:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a0047ce:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a0047d0:	429d      	cmp	r5, r3
1a0047d2:	d326      	bcc.n	1a004822 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0047d4:	1d37      	adds	r7, r6, #4
1a0047d6:	4638      	mov	r0, r7
1a0047d8:	f7ff fd10 	bl	1a0041fc <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a0047dc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a0047de:	b11b      	cbz	r3, 1a0047e8 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a0047e0:	f106 0018 	add.w	r0, r6, #24
1a0047e4:	f7ff fd0a 	bl	1a0041fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a0047e8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a0047ea:	2201      	movs	r2, #1
1a0047ec:	409a      	lsls	r2, r3
1a0047ee:	491c      	ldr	r1, [pc, #112]	; (1a004860 <xTaskIncrementTick+0x10c>)
1a0047f0:	6808      	ldr	r0, [r1, #0]
1a0047f2:	4302      	orrs	r2, r0
1a0047f4:	600a      	str	r2, [r1, #0]
1a0047f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0047fa:	009a      	lsls	r2, r3, #2
1a0047fc:	4639      	mov	r1, r7
1a0047fe:	4817      	ldr	r0, [pc, #92]	; (1a00485c <xTaskIncrementTick+0x108>)
1a004800:	4410      	add	r0, r2
1a004802:	f7ff fcd6 	bl	1a0041b2 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a004806:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a004808:	4b13      	ldr	r3, [pc, #76]	; (1a004858 <xTaskIncrementTick+0x104>)
1a00480a:	681b      	ldr	r3, [r3, #0]
1a00480c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00480e:	429a      	cmp	r2, r3
1a004810:	d2d4      	bcs.n	1a0047bc <xTaskIncrementTick+0x68>
1a004812:	e7d4      	b.n	1a0047be <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a004814:	2400      	movs	r4, #0
1a004816:	e7d2      	b.n	1a0047be <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a004818:	4b0e      	ldr	r3, [pc, #56]	; (1a004854 <xTaskIncrementTick+0x100>)
1a00481a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00481e:	601a      	str	r2, [r3, #0]
					break;
1a004820:	e7c0      	b.n	1a0047a4 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a004822:	4a0c      	ldr	r2, [pc, #48]	; (1a004854 <xTaskIncrementTick+0x100>)
1a004824:	6013      	str	r3, [r2, #0]
						break;
1a004826:	e7bd      	b.n	1a0047a4 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a004828:	4a0e      	ldr	r2, [pc, #56]	; (1a004864 <xTaskIncrementTick+0x110>)
1a00482a:	6813      	ldr	r3, [r2, #0]
1a00482c:	3301      	adds	r3, #1
1a00482e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a004830:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a004832:	4b0d      	ldr	r3, [pc, #52]	; (1a004868 <xTaskIncrementTick+0x114>)
1a004834:	681b      	ldr	r3, [r3, #0]
1a004836:	b103      	cbz	r3, 1a00483a <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a004838:	2401      	movs	r4, #1
}
1a00483a:	4620      	mov	r0, r4
1a00483c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00483e:	bf00      	nop
1a004840:	10004a4c 	.word	0x10004a4c
1a004844:	10004ac8 	.word	0x10004ac8
1a004848:	100049ac 	.word	0x100049ac
1a00484c:	100049b0 	.word	0x100049b0
1a004850:	10004a84 	.word	0x10004a84
1a004854:	10004a80 	.word	0x10004a80
1a004858:	100049a8 	.word	0x100049a8
1a00485c:	100049b4 	.word	0x100049b4
1a004860:	10004a54 	.word	0x10004a54
1a004864:	10004a48 	.word	0x10004a48
1a004868:	10004acc 	.word	0x10004acc

1a00486c <xTaskResumeAll>:
{
1a00486c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a00486e:	4b35      	ldr	r3, [pc, #212]	; (1a004944 <xTaskResumeAll+0xd8>)
1a004870:	681b      	ldr	r3, [r3, #0]
1a004872:	b943      	cbnz	r3, 1a004886 <xTaskResumeAll+0x1a>
1a004874:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004878:	f383 8811 	msr	BASEPRI, r3
1a00487c:	f3bf 8f6f 	isb	sy
1a004880:	f3bf 8f4f 	dsb	sy
1a004884:	e7fe      	b.n	1a004884 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a004886:	f000 fcf5 	bl	1a005274 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a00488a:	4b2e      	ldr	r3, [pc, #184]	; (1a004944 <xTaskResumeAll+0xd8>)
1a00488c:	681a      	ldr	r2, [r3, #0]
1a00488e:	3a01      	subs	r2, #1
1a004890:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a004892:	681b      	ldr	r3, [r3, #0]
1a004894:	2b00      	cmp	r3, #0
1a004896:	d14d      	bne.n	1a004934 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a004898:	4b2b      	ldr	r3, [pc, #172]	; (1a004948 <xTaskResumeAll+0xdc>)
1a00489a:	681b      	ldr	r3, [r3, #0]
1a00489c:	b90b      	cbnz	r3, 1a0048a2 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
1a00489e:	2400      	movs	r4, #0
1a0048a0:	e049      	b.n	1a004936 <xTaskResumeAll+0xca>
TCB_t *pxTCB = NULL;
1a0048a2:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a0048a4:	4b29      	ldr	r3, [pc, #164]	; (1a00494c <xTaskResumeAll+0xe0>)
1a0048a6:	681b      	ldr	r3, [r3, #0]
1a0048a8:	b31b      	cbz	r3, 1a0048f2 <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a0048aa:	4b28      	ldr	r3, [pc, #160]	; (1a00494c <xTaskResumeAll+0xe0>)
1a0048ac:	68db      	ldr	r3, [r3, #12]
1a0048ae:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a0048b0:	f104 0018 	add.w	r0, r4, #24
1a0048b4:	f7ff fca2 	bl	1a0041fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0048b8:	1d25      	adds	r5, r4, #4
1a0048ba:	4628      	mov	r0, r5
1a0048bc:	f7ff fc9e 	bl	1a0041fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a0048c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0048c2:	2201      	movs	r2, #1
1a0048c4:	409a      	lsls	r2, r3
1a0048c6:	4922      	ldr	r1, [pc, #136]	; (1a004950 <xTaskResumeAll+0xe4>)
1a0048c8:	6808      	ldr	r0, [r1, #0]
1a0048ca:	4302      	orrs	r2, r0
1a0048cc:	600a      	str	r2, [r1, #0]
1a0048ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0048d2:	009a      	lsls	r2, r3, #2
1a0048d4:	4629      	mov	r1, r5
1a0048d6:	481f      	ldr	r0, [pc, #124]	; (1a004954 <xTaskResumeAll+0xe8>)
1a0048d8:	4410      	add	r0, r2
1a0048da:	f7ff fc6a 	bl	1a0041b2 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a0048de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0048e0:	4b1d      	ldr	r3, [pc, #116]	; (1a004958 <xTaskResumeAll+0xec>)
1a0048e2:	681b      	ldr	r3, [r3, #0]
1a0048e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0048e6:	429a      	cmp	r2, r3
1a0048e8:	d3dc      	bcc.n	1a0048a4 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
1a0048ea:	4b1c      	ldr	r3, [pc, #112]	; (1a00495c <xTaskResumeAll+0xf0>)
1a0048ec:	2201      	movs	r2, #1
1a0048ee:	601a      	str	r2, [r3, #0]
1a0048f0:	e7d8      	b.n	1a0048a4 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
1a0048f2:	b10c      	cbz	r4, 1a0048f8 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
1a0048f4:	f7ff fce0 	bl	1a0042b8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a0048f8:	4b19      	ldr	r3, [pc, #100]	; (1a004960 <xTaskResumeAll+0xf4>)
1a0048fa:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a0048fc:	b974      	cbnz	r4, 1a00491c <xTaskResumeAll+0xb0>
				if( xYieldPending != pdFALSE )
1a0048fe:	4b17      	ldr	r3, [pc, #92]	; (1a00495c <xTaskResumeAll+0xf0>)
1a004900:	681b      	ldr	r3, [r3, #0]
1a004902:	b1e3      	cbz	r3, 1a00493e <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
1a004904:	4b17      	ldr	r3, [pc, #92]	; (1a004964 <xTaskResumeAll+0xf8>)
1a004906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00490a:	601a      	str	r2, [r3, #0]
1a00490c:	f3bf 8f4f 	dsb	sy
1a004910:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a004914:	2401      	movs	r4, #1
1a004916:	e00e      	b.n	1a004936 <xTaskResumeAll+0xca>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a004918:	3c01      	subs	r4, #1
1a00491a:	d007      	beq.n	1a00492c <xTaskResumeAll+0xc0>
							if( xTaskIncrementTick() != pdFALSE )
1a00491c:	f7ff ff1a 	bl	1a004754 <xTaskIncrementTick>
1a004920:	2800      	cmp	r0, #0
1a004922:	d0f9      	beq.n	1a004918 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
1a004924:	4b0d      	ldr	r3, [pc, #52]	; (1a00495c <xTaskResumeAll+0xf0>)
1a004926:	2201      	movs	r2, #1
1a004928:	601a      	str	r2, [r3, #0]
1a00492a:	e7f5      	b.n	1a004918 <xTaskResumeAll+0xac>
						uxPendedTicks = 0;
1a00492c:	4b0c      	ldr	r3, [pc, #48]	; (1a004960 <xTaskResumeAll+0xf4>)
1a00492e:	2200      	movs	r2, #0
1a004930:	601a      	str	r2, [r3, #0]
1a004932:	e7e4      	b.n	1a0048fe <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
1a004934:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a004936:	f000 fcbf 	bl	1a0052b8 <vPortExitCritical>
}
1a00493a:	4620      	mov	r0, r4
1a00493c:	bd38      	pop	{r3, r4, r5, pc}
BaseType_t xAlreadyYielded = pdFALSE;
1a00493e:	2400      	movs	r4, #0
1a004940:	e7f9      	b.n	1a004936 <xTaskResumeAll+0xca>
1a004942:	bf00      	nop
1a004944:	10004a4c 	.word	0x10004a4c
1a004948:	10004a40 	.word	0x10004a40
1a00494c:	10004a88 	.word	0x10004a88
1a004950:	10004a54 	.word	0x10004a54
1a004954:	100049b4 	.word	0x100049b4
1a004958:	100049a8 	.word	0x100049a8
1a00495c:	10004acc 	.word	0x10004acc
1a004960:	10004a48 	.word	0x10004a48
1a004964:	e000ed04 	.word	0xe000ed04

1a004968 <vTaskDelay>:
	{
1a004968:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a00496a:	b1a8      	cbz	r0, 1a004998 <vTaskDelay+0x30>
1a00496c:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a00496e:	4b0f      	ldr	r3, [pc, #60]	; (1a0049ac <vTaskDelay+0x44>)
1a004970:	681b      	ldr	r3, [r3, #0]
1a004972:	b143      	cbz	r3, 1a004986 <vTaskDelay+0x1e>
1a004974:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004978:	f383 8811 	msr	BASEPRI, r3
1a00497c:	f3bf 8f6f 	isb	sy
1a004980:	f3bf 8f4f 	dsb	sy
1a004984:	e7fe      	b.n	1a004984 <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a004986:	f7ff fed7 	bl	1a004738 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a00498a:	2100      	movs	r1, #0
1a00498c:	4620      	mov	r0, r4
1a00498e:	f7ff fdd1 	bl	1a004534 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a004992:	f7ff ff6b 	bl	1a00486c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a004996:	b938      	cbnz	r0, 1a0049a8 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
1a004998:	4b05      	ldr	r3, [pc, #20]	; (1a0049b0 <vTaskDelay+0x48>)
1a00499a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00499e:	601a      	str	r2, [r3, #0]
1a0049a0:	f3bf 8f4f 	dsb	sy
1a0049a4:	f3bf 8f6f 	isb	sy
	}
1a0049a8:	bd10      	pop	{r4, pc}
1a0049aa:	bf00      	nop
1a0049ac:	10004a4c 	.word	0x10004a4c
1a0049b0:	e000ed04 	.word	0xe000ed04

1a0049b4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a0049b4:	4b2d      	ldr	r3, [pc, #180]	; (1a004a6c <vTaskSwitchContext+0xb8>)
1a0049b6:	681b      	ldr	r3, [r3, #0]
1a0049b8:	b11b      	cbz	r3, 1a0049c2 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a0049ba:	4b2d      	ldr	r3, [pc, #180]	; (1a004a70 <vTaskSwitchContext+0xbc>)
1a0049bc:	2201      	movs	r2, #1
1a0049be:	601a      	str	r2, [r3, #0]
1a0049c0:	4770      	bx	lr
{
1a0049c2:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a0049c4:	4b2a      	ldr	r3, [pc, #168]	; (1a004a70 <vTaskSwitchContext+0xbc>)
1a0049c6:	2200      	movs	r2, #0
1a0049c8:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a0049ca:	4b2a      	ldr	r3, [pc, #168]	; (1a004a74 <vTaskSwitchContext+0xc0>)
1a0049cc:	681b      	ldr	r3, [r3, #0]
1a0049ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a0049d0:	681a      	ldr	r2, [r3, #0]
1a0049d2:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0049d6:	d103      	bne.n	1a0049e0 <vTaskSwitchContext+0x2c>
1a0049d8:	685a      	ldr	r2, [r3, #4]
1a0049da:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0049de:	d01b      	beq.n	1a004a18 <vTaskSwitchContext+0x64>
1a0049e0:	4b24      	ldr	r3, [pc, #144]	; (1a004a74 <vTaskSwitchContext+0xc0>)
1a0049e2:	6818      	ldr	r0, [r3, #0]
1a0049e4:	6819      	ldr	r1, [r3, #0]
1a0049e6:	3134      	adds	r1, #52	; 0x34
1a0049e8:	f7ff fc58 	bl	1a00429c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a0049ec:	4b22      	ldr	r3, [pc, #136]	; (1a004a78 <vTaskSwitchContext+0xc4>)
1a0049ee:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a0049f0:	fab3 f383 	clz	r3, r3
1a0049f4:	b2db      	uxtb	r3, r3
1a0049f6:	f1c3 031f 	rsb	r3, r3, #31
1a0049fa:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a0049fe:	008a      	lsls	r2, r1, #2
1a004a00:	491e      	ldr	r1, [pc, #120]	; (1a004a7c <vTaskSwitchContext+0xc8>)
1a004a02:	588a      	ldr	r2, [r1, r2]
1a004a04:	b98a      	cbnz	r2, 1a004a2a <vTaskSwitchContext+0x76>
	__asm volatile
1a004a06:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004a0a:	f383 8811 	msr	BASEPRI, r3
1a004a0e:	f3bf 8f6f 	isb	sy
1a004a12:	f3bf 8f4f 	dsb	sy
1a004a16:	e7fe      	b.n	1a004a16 <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a004a18:	689a      	ldr	r2, [r3, #8]
1a004a1a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a004a1e:	d1df      	bne.n	1a0049e0 <vTaskSwitchContext+0x2c>
1a004a20:	68db      	ldr	r3, [r3, #12]
1a004a22:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a004a26:	d1db      	bne.n	1a0049e0 <vTaskSwitchContext+0x2c>
1a004a28:	e7e0      	b.n	1a0049ec <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a004a2a:	4814      	ldr	r0, [pc, #80]	; (1a004a7c <vTaskSwitchContext+0xc8>)
1a004a2c:	009a      	lsls	r2, r3, #2
1a004a2e:	18d4      	adds	r4, r2, r3
1a004a30:	00a1      	lsls	r1, r4, #2
1a004a32:	4401      	add	r1, r0
1a004a34:	684c      	ldr	r4, [r1, #4]
1a004a36:	6864      	ldr	r4, [r4, #4]
1a004a38:	604c      	str	r4, [r1, #4]
1a004a3a:	441a      	add	r2, r3
1a004a3c:	0091      	lsls	r1, r2, #2
1a004a3e:	3108      	adds	r1, #8
1a004a40:	4408      	add	r0, r1
1a004a42:	4284      	cmp	r4, r0
1a004a44:	d009      	beq.n	1a004a5a <vTaskSwitchContext+0xa6>
1a004a46:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a004a4a:	009a      	lsls	r2, r3, #2
1a004a4c:	4b0b      	ldr	r3, [pc, #44]	; (1a004a7c <vTaskSwitchContext+0xc8>)
1a004a4e:	4413      	add	r3, r2
1a004a50:	685b      	ldr	r3, [r3, #4]
1a004a52:	68da      	ldr	r2, [r3, #12]
1a004a54:	4b07      	ldr	r3, [pc, #28]	; (1a004a74 <vTaskSwitchContext+0xc0>)
1a004a56:	601a      	str	r2, [r3, #0]
}
1a004a58:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a004a5a:	6860      	ldr	r0, [r4, #4]
1a004a5c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
1a004a60:	0091      	lsls	r1, r2, #2
1a004a62:	4a06      	ldr	r2, [pc, #24]	; (1a004a7c <vTaskSwitchContext+0xc8>)
1a004a64:	440a      	add	r2, r1
1a004a66:	6050      	str	r0, [r2, #4]
1a004a68:	e7ed      	b.n	1a004a46 <vTaskSwitchContext+0x92>
1a004a6a:	bf00      	nop
1a004a6c:	10004a4c 	.word	0x10004a4c
1a004a70:	10004acc 	.word	0x10004acc
1a004a74:	100049a8 	.word	0x100049a8
1a004a78:	10004a54 	.word	0x10004a54
1a004a7c:	100049b4 	.word	0x100049b4

1a004a80 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a004a80:	b158      	cbz	r0, 1a004a9a <vTaskPlaceOnEventList+0x1a>
{
1a004a82:	b510      	push	{r4, lr}
1a004a84:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a004a86:	4b09      	ldr	r3, [pc, #36]	; (1a004aac <vTaskPlaceOnEventList+0x2c>)
1a004a88:	6819      	ldr	r1, [r3, #0]
1a004a8a:	3118      	adds	r1, #24
1a004a8c:	f7ff fb9c 	bl	1a0041c8 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a004a90:	2101      	movs	r1, #1
1a004a92:	4620      	mov	r0, r4
1a004a94:	f7ff fd4e 	bl	1a004534 <prvAddCurrentTaskToDelayedList>
}
1a004a98:	bd10      	pop	{r4, pc}
1a004a9a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004a9e:	f383 8811 	msr	BASEPRI, r3
1a004aa2:	f3bf 8f6f 	isb	sy
1a004aa6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
1a004aaa:	e7fe      	b.n	1a004aaa <vTaskPlaceOnEventList+0x2a>
1a004aac:	100049a8 	.word	0x100049a8

1a004ab0 <vTaskPlaceOnEventListRestricted>:
	{
1a004ab0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a004ab2:	b170      	cbz	r0, 1a004ad2 <vTaskPlaceOnEventListRestricted+0x22>
1a004ab4:	460c      	mov	r4, r1
1a004ab6:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a004ab8:	4a0a      	ldr	r2, [pc, #40]	; (1a004ae4 <vTaskPlaceOnEventListRestricted+0x34>)
1a004aba:	6811      	ldr	r1, [r2, #0]
1a004abc:	3118      	adds	r1, #24
1a004abe:	f7ff fb78 	bl	1a0041b2 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a004ac2:	b10d      	cbz	r5, 1a004ac8 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
1a004ac4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a004ac8:	4629      	mov	r1, r5
1a004aca:	4620      	mov	r0, r4
1a004acc:	f7ff fd32 	bl	1a004534 <prvAddCurrentTaskToDelayedList>
	}
1a004ad0:	bd38      	pop	{r3, r4, r5, pc}
1a004ad2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004ad6:	f383 8811 	msr	BASEPRI, r3
1a004ada:	f3bf 8f6f 	isb	sy
1a004ade:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
1a004ae2:	e7fe      	b.n	1a004ae2 <vTaskPlaceOnEventListRestricted+0x32>
1a004ae4:	100049a8 	.word	0x100049a8

1a004ae8 <xTaskRemoveFromEventList>:
{
1a004ae8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a004aea:	68c3      	ldr	r3, [r0, #12]
1a004aec:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a004aee:	b324      	cbz	r4, 1a004b3a <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a004af0:	f104 0518 	add.w	r5, r4, #24
1a004af4:	4628      	mov	r0, r5
1a004af6:	f7ff fb81 	bl	1a0041fc <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a004afa:	4b18      	ldr	r3, [pc, #96]	; (1a004b5c <xTaskRemoveFromEventList+0x74>)
1a004afc:	681b      	ldr	r3, [r3, #0]
1a004afe:	bb2b      	cbnz	r3, 1a004b4c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a004b00:	1d25      	adds	r5, r4, #4
1a004b02:	4628      	mov	r0, r5
1a004b04:	f7ff fb7a 	bl	1a0041fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a004b08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a004b0a:	2201      	movs	r2, #1
1a004b0c:	409a      	lsls	r2, r3
1a004b0e:	4914      	ldr	r1, [pc, #80]	; (1a004b60 <xTaskRemoveFromEventList+0x78>)
1a004b10:	6808      	ldr	r0, [r1, #0]
1a004b12:	4302      	orrs	r2, r0
1a004b14:	600a      	str	r2, [r1, #0]
1a004b16:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a004b1a:	009a      	lsls	r2, r3, #2
1a004b1c:	4629      	mov	r1, r5
1a004b1e:	4811      	ldr	r0, [pc, #68]	; (1a004b64 <xTaskRemoveFromEventList+0x7c>)
1a004b20:	4410      	add	r0, r2
1a004b22:	f7ff fb46 	bl	1a0041b2 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a004b26:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a004b28:	4b0f      	ldr	r3, [pc, #60]	; (1a004b68 <xTaskRemoveFromEventList+0x80>)
1a004b2a:	681b      	ldr	r3, [r3, #0]
1a004b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a004b2e:	429a      	cmp	r2, r3
1a004b30:	d911      	bls.n	1a004b56 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a004b32:	2001      	movs	r0, #1
1a004b34:	4b0d      	ldr	r3, [pc, #52]	; (1a004b6c <xTaskRemoveFromEventList+0x84>)
1a004b36:	6018      	str	r0, [r3, #0]
1a004b38:	e00e      	b.n	1a004b58 <xTaskRemoveFromEventList+0x70>
1a004b3a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004b3e:	f383 8811 	msr	BASEPRI, r3
1a004b42:	f3bf 8f6f 	isb	sy
1a004b46:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
1a004b4a:	e7fe      	b.n	1a004b4a <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a004b4c:	4629      	mov	r1, r5
1a004b4e:	4808      	ldr	r0, [pc, #32]	; (1a004b70 <xTaskRemoveFromEventList+0x88>)
1a004b50:	f7ff fb2f 	bl	1a0041b2 <vListInsertEnd>
1a004b54:	e7e7      	b.n	1a004b26 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
1a004b56:	2000      	movs	r0, #0
}
1a004b58:	bd38      	pop	{r3, r4, r5, pc}
1a004b5a:	bf00      	nop
1a004b5c:	10004a4c 	.word	0x10004a4c
1a004b60:	10004a54 	.word	0x10004a54
1a004b64:	100049b4 	.word	0x100049b4
1a004b68:	100049a8 	.word	0x100049a8
1a004b6c:	10004acc 	.word	0x10004acc
1a004b70:	10004a88 	.word	0x10004a88

1a004b74 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a004b74:	4b03      	ldr	r3, [pc, #12]	; (1a004b84 <vTaskInternalSetTimeOutState+0x10>)
1a004b76:	681b      	ldr	r3, [r3, #0]
1a004b78:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a004b7a:	4b03      	ldr	r3, [pc, #12]	; (1a004b88 <vTaskInternalSetTimeOutState+0x14>)
1a004b7c:	681b      	ldr	r3, [r3, #0]
1a004b7e:	6043      	str	r3, [r0, #4]
}
1a004b80:	4770      	bx	lr
1a004b82:	bf00      	nop
1a004b84:	10004a84 	.word	0x10004a84
1a004b88:	10004ac8 	.word	0x10004ac8

1a004b8c <xTaskCheckForTimeOut>:
{
1a004b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a004b8e:	b1c8      	cbz	r0, 1a004bc4 <xTaskCheckForTimeOut+0x38>
1a004b90:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a004b92:	b301      	cbz	r1, 1a004bd6 <xTaskCheckForTimeOut+0x4a>
1a004b94:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a004b96:	f000 fb6d 	bl	1a005274 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a004b9a:	4b1b      	ldr	r3, [pc, #108]	; (1a004c08 <xTaskCheckForTimeOut+0x7c>)
1a004b9c:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a004b9e:	686b      	ldr	r3, [r5, #4]
1a004ba0:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
1a004ba2:	6822      	ldr	r2, [r4, #0]
1a004ba4:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
1a004ba8:	d026      	beq.n	1a004bf8 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a004baa:	682f      	ldr	r7, [r5, #0]
1a004bac:	4e17      	ldr	r6, [pc, #92]	; (1a004c0c <xTaskCheckForTimeOut+0x80>)
1a004bae:	6836      	ldr	r6, [r6, #0]
1a004bb0:	42b7      	cmp	r7, r6
1a004bb2:	d001      	beq.n	1a004bb8 <xTaskCheckForTimeOut+0x2c>
1a004bb4:	428b      	cmp	r3, r1
1a004bb6:	d924      	bls.n	1a004c02 <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a004bb8:	4282      	cmp	r2, r0
1a004bba:	d815      	bhi.n	1a004be8 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a004bbc:	2300      	movs	r3, #0
1a004bbe:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a004bc0:	2401      	movs	r4, #1
1a004bc2:	e01a      	b.n	1a004bfa <xTaskCheckForTimeOut+0x6e>
1a004bc4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004bc8:	f383 8811 	msr	BASEPRI, r3
1a004bcc:	f3bf 8f6f 	isb	sy
1a004bd0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
1a004bd4:	e7fe      	b.n	1a004bd4 <xTaskCheckForTimeOut+0x48>
1a004bd6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004bda:	f383 8811 	msr	BASEPRI, r3
1a004bde:	f3bf 8f6f 	isb	sy
1a004be2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
1a004be6:	e7fe      	b.n	1a004be6 <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
1a004be8:	1a5b      	subs	r3, r3, r1
1a004bea:	4413      	add	r3, r2
1a004bec:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a004bee:	4628      	mov	r0, r5
1a004bf0:	f7ff ffc0 	bl	1a004b74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a004bf4:	2400      	movs	r4, #0
1a004bf6:	e000      	b.n	1a004bfa <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
1a004bf8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a004bfa:	f000 fb5d 	bl	1a0052b8 <vPortExitCritical>
}
1a004bfe:	4620      	mov	r0, r4
1a004c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
1a004c02:	2401      	movs	r4, #1
1a004c04:	e7f9      	b.n	1a004bfa <xTaskCheckForTimeOut+0x6e>
1a004c06:	bf00      	nop
1a004c08:	10004ac8 	.word	0x10004ac8
1a004c0c:	10004a84 	.word	0x10004a84

1a004c10 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a004c10:	4b01      	ldr	r3, [pc, #4]	; (1a004c18 <vTaskMissedYield+0x8>)
1a004c12:	2201      	movs	r2, #1
1a004c14:	601a      	str	r2, [r3, #0]
}
1a004c16:	4770      	bx	lr
1a004c18:	10004acc 	.word	0x10004acc

1a004c1c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a004c1c:	4b05      	ldr	r3, [pc, #20]	; (1a004c34 <xTaskGetSchedulerState+0x18>)
1a004c1e:	681b      	ldr	r3, [r3, #0]
1a004c20:	b133      	cbz	r3, 1a004c30 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a004c22:	4b05      	ldr	r3, [pc, #20]	; (1a004c38 <xTaskGetSchedulerState+0x1c>)
1a004c24:	681b      	ldr	r3, [r3, #0]
1a004c26:	b10b      	cbz	r3, 1a004c2c <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a004c28:	2000      	movs	r0, #0
	}
1a004c2a:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a004c2c:	2002      	movs	r0, #2
1a004c2e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a004c30:	2001      	movs	r0, #1
1a004c32:	4770      	bx	lr
1a004c34:	10004a9c 	.word	0x10004a9c
1a004c38:	10004a4c 	.word	0x10004a4c

1a004c3c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a004c3c:	2800      	cmp	r0, #0
1a004c3e:	d04c      	beq.n	1a004cda <xTaskPriorityDisinherit+0x9e>
	{
1a004c40:	b538      	push	{r3, r4, r5, lr}
1a004c42:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a004c44:	4a27      	ldr	r2, [pc, #156]	; (1a004ce4 <xTaskPriorityDisinherit+0xa8>)
1a004c46:	6812      	ldr	r2, [r2, #0]
1a004c48:	4282      	cmp	r2, r0
1a004c4a:	d008      	beq.n	1a004c5e <xTaskPriorityDisinherit+0x22>
1a004c4c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004c50:	f383 8811 	msr	BASEPRI, r3
1a004c54:	f3bf 8f6f 	isb	sy
1a004c58:	f3bf 8f4f 	dsb	sy
1a004c5c:	e7fe      	b.n	1a004c5c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a004c5e:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a004c60:	b942      	cbnz	r2, 1a004c74 <xTaskPriorityDisinherit+0x38>
1a004c62:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004c66:	f383 8811 	msr	BASEPRI, r3
1a004c6a:	f3bf 8f6f 	isb	sy
1a004c6e:	f3bf 8f4f 	dsb	sy
1a004c72:	e7fe      	b.n	1a004c72 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a004c74:	3a01      	subs	r2, #1
1a004c76:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a004c78:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a004c7a:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a004c7c:	4288      	cmp	r0, r1
1a004c7e:	d02e      	beq.n	1a004cde <xTaskPriorityDisinherit+0xa2>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a004c80:	b10a      	cbz	r2, 1a004c86 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
1a004c82:	2000      	movs	r0, #0
	}
1a004c84:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a004c86:	1d25      	adds	r5, r4, #4
1a004c88:	4628      	mov	r0, r5
1a004c8a:	f7ff fab7 	bl	1a0041fc <uxListRemove>
1a004c8e:	b970      	cbnz	r0, 1a004cae <xTaskPriorityDisinherit+0x72>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a004c90:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a004c92:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1a004c96:	008b      	lsls	r3, r1, #2
1a004c98:	4913      	ldr	r1, [pc, #76]	; (1a004ce8 <xTaskPriorityDisinherit+0xac>)
1a004c9a:	58cb      	ldr	r3, [r1, r3]
1a004c9c:	b93b      	cbnz	r3, 1a004cae <xTaskPriorityDisinherit+0x72>
1a004c9e:	2301      	movs	r3, #1
1a004ca0:	fa03 f202 	lsl.w	r2, r3, r2
1a004ca4:	4911      	ldr	r1, [pc, #68]	; (1a004cec <xTaskPriorityDisinherit+0xb0>)
1a004ca6:	680b      	ldr	r3, [r1, #0]
1a004ca8:	ea23 0302 	bic.w	r3, r3, r2
1a004cac:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a004cae:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a004cb0:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a004cb2:	f1c3 0207 	rsb	r2, r3, #7
1a004cb6:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a004cb8:	2401      	movs	r4, #1
1a004cba:	fa04 f203 	lsl.w	r2, r4, r3
1a004cbe:	490b      	ldr	r1, [pc, #44]	; (1a004cec <xTaskPriorityDisinherit+0xb0>)
1a004cc0:	6808      	ldr	r0, [r1, #0]
1a004cc2:	4302      	orrs	r2, r0
1a004cc4:	600a      	str	r2, [r1, #0]
1a004cc6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a004cca:	009a      	lsls	r2, r3, #2
1a004ccc:	4629      	mov	r1, r5
1a004cce:	4806      	ldr	r0, [pc, #24]	; (1a004ce8 <xTaskPriorityDisinherit+0xac>)
1a004cd0:	4410      	add	r0, r2
1a004cd2:	f7ff fa6e 	bl	1a0041b2 <vListInsertEnd>
					xReturn = pdTRUE;
1a004cd6:	4620      	mov	r0, r4
1a004cd8:	e7d4      	b.n	1a004c84 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
1a004cda:	2000      	movs	r0, #0
	}
1a004cdc:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a004cde:	2000      	movs	r0, #0
1a004ce0:	e7d0      	b.n	1a004c84 <xTaskPriorityDisinherit+0x48>
1a004ce2:	bf00      	nop
1a004ce4:	100049a8 	.word	0x100049a8
1a004ce8:	100049b4 	.word	0x100049b4
1a004cec:	10004a54 	.word	0x10004a54

1a004cf0 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a004cf0:	4b06      	ldr	r3, [pc, #24]	; (1a004d0c <prvGetNextExpireTime+0x1c>)
1a004cf2:	681a      	ldr	r2, [r3, #0]
1a004cf4:	6813      	ldr	r3, [r2, #0]
1a004cf6:	fab3 f383 	clz	r3, r3
1a004cfa:	095b      	lsrs	r3, r3, #5
1a004cfc:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a004cfe:	b913      	cbnz	r3, 1a004d06 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a004d00:	68d3      	ldr	r3, [r2, #12]
1a004d02:	6818      	ldr	r0, [r3, #0]
1a004d04:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a004d06:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a004d08:	4770      	bx	lr
1a004d0a:	bf00      	nop
1a004d0c:	10004ad0 	.word	0x10004ad0

1a004d10 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a004d10:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a004d12:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a004d14:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a004d16:	4291      	cmp	r1, r2
1a004d18:	d80c      	bhi.n	1a004d34 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a004d1a:	1ad2      	subs	r2, r2, r3
1a004d1c:	6983      	ldr	r3, [r0, #24]
1a004d1e:	429a      	cmp	r2, r3
1a004d20:	d301      	bcc.n	1a004d26 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a004d22:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
1a004d24:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a004d26:	1d01      	adds	r1, r0, #4
1a004d28:	4b09      	ldr	r3, [pc, #36]	; (1a004d50 <prvInsertTimerInActiveList+0x40>)
1a004d2a:	6818      	ldr	r0, [r3, #0]
1a004d2c:	f7ff fa4c 	bl	1a0041c8 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a004d30:	2000      	movs	r0, #0
1a004d32:	e7f7      	b.n	1a004d24 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a004d34:	429a      	cmp	r2, r3
1a004d36:	d201      	bcs.n	1a004d3c <prvInsertTimerInActiveList+0x2c>
1a004d38:	4299      	cmp	r1, r3
1a004d3a:	d206      	bcs.n	1a004d4a <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a004d3c:	1d01      	adds	r1, r0, #4
1a004d3e:	4b05      	ldr	r3, [pc, #20]	; (1a004d54 <prvInsertTimerInActiveList+0x44>)
1a004d40:	6818      	ldr	r0, [r3, #0]
1a004d42:	f7ff fa41 	bl	1a0041c8 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a004d46:	2000      	movs	r0, #0
1a004d48:	e7ec      	b.n	1a004d24 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
1a004d4a:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a004d4c:	e7ea      	b.n	1a004d24 <prvInsertTimerInActiveList+0x14>
1a004d4e:	bf00      	nop
1a004d50:	10004ad4 	.word	0x10004ad4
1a004d54:	10004ad0 	.word	0x10004ad0

1a004d58 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a004d58:	b530      	push	{r4, r5, lr}
1a004d5a:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a004d5c:	f000 fa8a 	bl	1a005274 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a004d60:	4b11      	ldr	r3, [pc, #68]	; (1a004da8 <prvCheckForValidListAndQueue+0x50>)
1a004d62:	681b      	ldr	r3, [r3, #0]
1a004d64:	b11b      	cbz	r3, 1a004d6e <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a004d66:	f000 faa7 	bl	1a0052b8 <vPortExitCritical>
}
1a004d6a:	b003      	add	sp, #12
1a004d6c:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a004d6e:	4d0f      	ldr	r5, [pc, #60]	; (1a004dac <prvCheckForValidListAndQueue+0x54>)
1a004d70:	4628      	mov	r0, r5
1a004d72:	f7ff fa10 	bl	1a004196 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a004d76:	4c0e      	ldr	r4, [pc, #56]	; (1a004db0 <prvCheckForValidListAndQueue+0x58>)
1a004d78:	4620      	mov	r0, r4
1a004d7a:	f7ff fa0c 	bl	1a004196 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a004d7e:	4b0d      	ldr	r3, [pc, #52]	; (1a004db4 <prvCheckForValidListAndQueue+0x5c>)
1a004d80:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a004d82:	4b0d      	ldr	r3, [pc, #52]	; (1a004db8 <prvCheckForValidListAndQueue+0x60>)
1a004d84:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a004d86:	2300      	movs	r3, #0
1a004d88:	9300      	str	r3, [sp, #0]
1a004d8a:	4b0c      	ldr	r3, [pc, #48]	; (1a004dbc <prvCheckForValidListAndQueue+0x64>)
1a004d8c:	4a0c      	ldr	r2, [pc, #48]	; (1a004dc0 <prvCheckForValidListAndQueue+0x68>)
1a004d8e:	2110      	movs	r1, #16
1a004d90:	200a      	movs	r0, #10
1a004d92:	f7fe ff7c 	bl	1a003c8e <xQueueGenericCreateStatic>
1a004d96:	4b04      	ldr	r3, [pc, #16]	; (1a004da8 <prvCheckForValidListAndQueue+0x50>)
1a004d98:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a004d9a:	2800      	cmp	r0, #0
1a004d9c:	d0e3      	beq.n	1a004d66 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a004d9e:	4909      	ldr	r1, [pc, #36]	; (1a004dc4 <prvCheckForValidListAndQueue+0x6c>)
1a004da0:	f7ff f9bc 	bl	1a00411c <vQueueAddToRegistry>
1a004da4:	e7df      	b.n	1a004d66 <prvCheckForValidListAndQueue+0xe>
1a004da6:	bf00      	nop
1a004da8:	10004bf4 	.word	0x10004bf4
1a004dac:	10004b78 	.word	0x10004b78
1a004db0:	10004b8c 	.word	0x10004b8c
1a004db4:	10004ad0 	.word	0x10004ad0
1a004db8:	10004ad4 	.word	0x10004ad4
1a004dbc:	10004ba4 	.word	0x10004ba4
1a004dc0:	10004ad8 	.word	0x10004ad8
1a004dc4:	1a0088b8 	.word	0x1a0088b8

1a004dc8 <prvInitialiseNewTimer>:
{
1a004dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a004dcc:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
1a004dce:	b941      	cbnz	r1, 1a004de2 <prvInitialiseNewTimer+0x1a>
1a004dd0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004dd4:	f383 8811 	msr	BASEPRI, r3
1a004dd8:	f3bf 8f6f 	isb	sy
1a004ddc:	f3bf 8f4f 	dsb	sy
1a004de0:	e7fe      	b.n	1a004de0 <prvInitialiseNewTimer+0x18>
1a004de2:	460f      	mov	r7, r1
	if( pxNewTimer != NULL )
1a004de4:	b174      	cbz	r4, 1a004e04 <prvInitialiseNewTimer+0x3c>
1a004de6:	461d      	mov	r5, r3
1a004de8:	4616      	mov	r6, r2
1a004dea:	4680      	mov	r8, r0
		prvCheckForValidListAndQueue();
1a004dec:	f7ff ffb4 	bl	1a004d58 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
1a004df0:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
1a004df4:	61a7      	str	r7, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
1a004df6:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
1a004df8:	6225      	str	r5, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
1a004dfa:	9b06      	ldr	r3, [sp, #24]
1a004dfc:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
1a004dfe:	1d20      	adds	r0, r4, #4
1a004e00:	f7ff f9d4 	bl	1a0041ac <vListInitialiseItem>
}
1a004e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a004e08 <xTimerCreateTimerTask>:
{
1a004e08:	b510      	push	{r4, lr}
1a004e0a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a004e0c:	f7ff ffa4 	bl	1a004d58 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a004e10:	4b12      	ldr	r3, [pc, #72]	; (1a004e5c <xTimerCreateTimerTask+0x54>)
1a004e12:	681b      	ldr	r3, [r3, #0]
1a004e14:	b1cb      	cbz	r3, 1a004e4a <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a004e16:	2400      	movs	r4, #0
1a004e18:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a004e1a:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a004e1c:	aa07      	add	r2, sp, #28
1a004e1e:	a906      	add	r1, sp, #24
1a004e20:	a805      	add	r0, sp, #20
1a004e22:	f7ff fa0b 	bl	1a00423c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a004e26:	9b05      	ldr	r3, [sp, #20]
1a004e28:	9302      	str	r3, [sp, #8]
1a004e2a:	9b06      	ldr	r3, [sp, #24]
1a004e2c:	9301      	str	r3, [sp, #4]
1a004e2e:	2304      	movs	r3, #4
1a004e30:	9300      	str	r3, [sp, #0]
1a004e32:	4623      	mov	r3, r4
1a004e34:	9a07      	ldr	r2, [sp, #28]
1a004e36:	490a      	ldr	r1, [pc, #40]	; (1a004e60 <xTimerCreateTimerTask+0x58>)
1a004e38:	480a      	ldr	r0, [pc, #40]	; (1a004e64 <xTimerCreateTimerTask+0x5c>)
1a004e3a:	f7ff fbc7 	bl	1a0045cc <xTaskCreateStatic>
1a004e3e:	4b0a      	ldr	r3, [pc, #40]	; (1a004e68 <xTimerCreateTimerTask+0x60>)
1a004e40:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a004e42:	b110      	cbz	r0, 1a004e4a <xTimerCreateTimerTask+0x42>
}
1a004e44:	2001      	movs	r0, #1
1a004e46:	b008      	add	sp, #32
1a004e48:	bd10      	pop	{r4, pc}
1a004e4a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004e4e:	f383 8811 	msr	BASEPRI, r3
1a004e52:	f3bf 8f6f 	isb	sy
1a004e56:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
1a004e5a:	e7fe      	b.n	1a004e5a <xTimerCreateTimerTask+0x52>
1a004e5c:	10004bf4 	.word	0x10004bf4
1a004e60:	1a0088c0 	.word	0x1a0088c0
1a004e64:	1a005185 	.word	0x1a005185
1a004e68:	10004bf8 	.word	0x10004bf8

1a004e6c <xTimerCreate>:
	{
1a004e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a004e70:	b082      	sub	sp, #8
1a004e72:	4605      	mov	r5, r0
1a004e74:	460e      	mov	r6, r1
1a004e76:	4617      	mov	r7, r2
1a004e78:	4698      	mov	r8, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
1a004e7a:	2030      	movs	r0, #48	; 0x30
1a004e7c:	f7fe fd4e 	bl	1a00391c <pvPortMalloc>
		if( pxNewTimer != NULL )
1a004e80:	4604      	mov	r4, r0
1a004e82:	b158      	cbz	r0, 1a004e9c <xTimerCreate+0x30>
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
1a004e84:	9001      	str	r0, [sp, #4]
1a004e86:	9b08      	ldr	r3, [sp, #32]
1a004e88:	9300      	str	r3, [sp, #0]
1a004e8a:	4643      	mov	r3, r8
1a004e8c:	463a      	mov	r2, r7
1a004e8e:	4631      	mov	r1, r6
1a004e90:	4628      	mov	r0, r5
1a004e92:	f7ff ff99 	bl	1a004dc8 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
1a004e96:	2300      	movs	r3, #0
1a004e98:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
1a004e9c:	4620      	mov	r0, r4
1a004e9e:	b002      	add	sp, #8
1a004ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a004ea4 <xTimerGenericCommand>:
	configASSERT( xTimer );
1a004ea4:	b1c0      	cbz	r0, 1a004ed8 <xTimerGenericCommand+0x34>
{
1a004ea6:	b530      	push	{r4, r5, lr}
1a004ea8:	b085      	sub	sp, #20
1a004eaa:	4615      	mov	r5, r2
1a004eac:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a004eae:	4a17      	ldr	r2, [pc, #92]	; (1a004f0c <xTimerGenericCommand+0x68>)
1a004eb0:	6810      	ldr	r0, [r2, #0]
1a004eb2:	b340      	cbz	r0, 1a004f06 <xTimerGenericCommand+0x62>
1a004eb4:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a004eb6:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a004eb8:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a004eba:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a004ebc:	2905      	cmp	r1, #5
1a004ebe:	dc1c      	bgt.n	1a004efa <xTimerGenericCommand+0x56>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a004ec0:	f7ff feac 	bl	1a004c1c <xTaskGetSchedulerState>
1a004ec4:	2802      	cmp	r0, #2
1a004ec6:	d010      	beq.n	1a004eea <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a004ec8:	2300      	movs	r3, #0
1a004eca:	461a      	mov	r2, r3
1a004ecc:	4669      	mov	r1, sp
1a004ece:	480f      	ldr	r0, [pc, #60]	; (1a004f0c <xTimerGenericCommand+0x68>)
1a004ed0:	6800      	ldr	r0, [r0, #0]
1a004ed2:	f7fe ff4d 	bl	1a003d70 <xQueueGenericSend>
1a004ed6:	e014      	b.n	1a004f02 <xTimerGenericCommand+0x5e>
1a004ed8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004edc:	f383 8811 	msr	BASEPRI, r3
1a004ee0:	f3bf 8f6f 	isb	sy
1a004ee4:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
1a004ee8:	e7fe      	b.n	1a004ee8 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a004eea:	2300      	movs	r3, #0
1a004eec:	9a08      	ldr	r2, [sp, #32]
1a004eee:	4669      	mov	r1, sp
1a004ef0:	4806      	ldr	r0, [pc, #24]	; (1a004f0c <xTimerGenericCommand+0x68>)
1a004ef2:	6800      	ldr	r0, [r0, #0]
1a004ef4:	f7fe ff3c 	bl	1a003d70 <xQueueGenericSend>
1a004ef8:	e003      	b.n	1a004f02 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a004efa:	2300      	movs	r3, #0
1a004efc:	4669      	mov	r1, sp
1a004efe:	f7fe fff7 	bl	1a003ef0 <xQueueGenericSendFromISR>
}
1a004f02:	b005      	add	sp, #20
1a004f04:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
1a004f06:	2000      	movs	r0, #0
	return xReturn;
1a004f08:	e7fb      	b.n	1a004f02 <xTimerGenericCommand+0x5e>
1a004f0a:	bf00      	nop
1a004f0c:	10004bf4 	.word	0x10004bf4

1a004f10 <prvSwitchTimerLists>:
{
1a004f10:	b570      	push	{r4, r5, r6, lr}
1a004f12:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a004f14:	4b1a      	ldr	r3, [pc, #104]	; (1a004f80 <prvSwitchTimerLists+0x70>)
1a004f16:	681b      	ldr	r3, [r3, #0]
1a004f18:	681a      	ldr	r2, [r3, #0]
1a004f1a:	b352      	cbz	r2, 1a004f72 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a004f1c:	68db      	ldr	r3, [r3, #12]
1a004f1e:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a004f20:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a004f22:	1d25      	adds	r5, r4, #4
1a004f24:	4628      	mov	r0, r5
1a004f26:	f7ff f969 	bl	1a0041fc <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a004f2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a004f2c:	4620      	mov	r0, r4
1a004f2e:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a004f30:	69e3      	ldr	r3, [r4, #28]
1a004f32:	2b01      	cmp	r3, #1
1a004f34:	d1ee      	bne.n	1a004f14 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a004f36:	69a3      	ldr	r3, [r4, #24]
1a004f38:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a004f3a:	429e      	cmp	r6, r3
1a004f3c:	d207      	bcs.n	1a004f4e <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a004f3e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a004f40:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a004f42:	4629      	mov	r1, r5
1a004f44:	4b0e      	ldr	r3, [pc, #56]	; (1a004f80 <prvSwitchTimerLists+0x70>)
1a004f46:	6818      	ldr	r0, [r3, #0]
1a004f48:	f7ff f93e 	bl	1a0041c8 <vListInsert>
1a004f4c:	e7e2      	b.n	1a004f14 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a004f4e:	2100      	movs	r1, #0
1a004f50:	9100      	str	r1, [sp, #0]
1a004f52:	460b      	mov	r3, r1
1a004f54:	4632      	mov	r2, r6
1a004f56:	4620      	mov	r0, r4
1a004f58:	f7ff ffa4 	bl	1a004ea4 <xTimerGenericCommand>
				configASSERT( xResult );
1a004f5c:	2800      	cmp	r0, #0
1a004f5e:	d1d9      	bne.n	1a004f14 <prvSwitchTimerLists+0x4>
1a004f60:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004f64:	f383 8811 	msr	BASEPRI, r3
1a004f68:	f3bf 8f6f 	isb	sy
1a004f6c:	f3bf 8f4f 	dsb	sy
1a004f70:	e7fe      	b.n	1a004f70 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a004f72:	4a04      	ldr	r2, [pc, #16]	; (1a004f84 <prvSwitchTimerLists+0x74>)
1a004f74:	6810      	ldr	r0, [r2, #0]
1a004f76:	4902      	ldr	r1, [pc, #8]	; (1a004f80 <prvSwitchTimerLists+0x70>)
1a004f78:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a004f7a:	6013      	str	r3, [r2, #0]
}
1a004f7c:	b002      	add	sp, #8
1a004f7e:	bd70      	pop	{r4, r5, r6, pc}
1a004f80:	10004ad0 	.word	0x10004ad0
1a004f84:	10004ad4 	.word	0x10004ad4

1a004f88 <prvSampleTimeNow>:
{
1a004f88:	b538      	push	{r3, r4, r5, lr}
1a004f8a:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a004f8c:	f7ff fbdc 	bl	1a004748 <xTaskGetTickCount>
1a004f90:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a004f92:	4b07      	ldr	r3, [pc, #28]	; (1a004fb0 <prvSampleTimeNow+0x28>)
1a004f94:	681b      	ldr	r3, [r3, #0]
1a004f96:	4283      	cmp	r3, r0
1a004f98:	d805      	bhi.n	1a004fa6 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a004f9a:	2300      	movs	r3, #0
1a004f9c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a004f9e:	4b04      	ldr	r3, [pc, #16]	; (1a004fb0 <prvSampleTimeNow+0x28>)
1a004fa0:	601c      	str	r4, [r3, #0]
}
1a004fa2:	4620      	mov	r0, r4
1a004fa4:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a004fa6:	f7ff ffb3 	bl	1a004f10 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a004faa:	2301      	movs	r3, #1
1a004fac:	602b      	str	r3, [r5, #0]
1a004fae:	e7f6      	b.n	1a004f9e <prvSampleTimeNow+0x16>
1a004fb0:	10004ba0 	.word	0x10004ba0

1a004fb4 <prvProcessExpiredTimer>:
{
1a004fb4:	b570      	push	{r4, r5, r6, lr}
1a004fb6:	b082      	sub	sp, #8
1a004fb8:	4605      	mov	r5, r0
1a004fba:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a004fbc:	4b14      	ldr	r3, [pc, #80]	; (1a005010 <prvProcessExpiredTimer+0x5c>)
1a004fbe:	681b      	ldr	r3, [r3, #0]
1a004fc0:	68db      	ldr	r3, [r3, #12]
1a004fc2:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a004fc4:	1d20      	adds	r0, r4, #4
1a004fc6:	f7ff f919 	bl	1a0041fc <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a004fca:	69e3      	ldr	r3, [r4, #28]
1a004fcc:	2b01      	cmp	r3, #1
1a004fce:	d004      	beq.n	1a004fda <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a004fd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a004fd2:	4620      	mov	r0, r4
1a004fd4:	4798      	blx	r3
}
1a004fd6:	b002      	add	sp, #8
1a004fd8:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a004fda:	69a1      	ldr	r1, [r4, #24]
1a004fdc:	462b      	mov	r3, r5
1a004fde:	4632      	mov	r2, r6
1a004fe0:	4429      	add	r1, r5
1a004fe2:	4620      	mov	r0, r4
1a004fe4:	f7ff fe94 	bl	1a004d10 <prvInsertTimerInActiveList>
1a004fe8:	2800      	cmp	r0, #0
1a004fea:	d0f1      	beq.n	1a004fd0 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a004fec:	2100      	movs	r1, #0
1a004fee:	9100      	str	r1, [sp, #0]
1a004ff0:	460b      	mov	r3, r1
1a004ff2:	462a      	mov	r2, r5
1a004ff4:	4620      	mov	r0, r4
1a004ff6:	f7ff ff55 	bl	1a004ea4 <xTimerGenericCommand>
			configASSERT( xResult );
1a004ffa:	2800      	cmp	r0, #0
1a004ffc:	d1e8      	bne.n	1a004fd0 <prvProcessExpiredTimer+0x1c>
1a004ffe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a005002:	f383 8811 	msr	BASEPRI, r3
1a005006:	f3bf 8f6f 	isb	sy
1a00500a:	f3bf 8f4f 	dsb	sy
1a00500e:	e7fe      	b.n	1a00500e <prvProcessExpiredTimer+0x5a>
1a005010:	10004ad0 	.word	0x10004ad0

1a005014 <prvProcessTimerOrBlockTask>:
{
1a005014:	b570      	push	{r4, r5, r6, lr}
1a005016:	b082      	sub	sp, #8
1a005018:	4606      	mov	r6, r0
1a00501a:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a00501c:	f7ff fb8c 	bl	1a004738 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a005020:	a801      	add	r0, sp, #4
1a005022:	f7ff ffb1 	bl	1a004f88 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a005026:	9b01      	ldr	r3, [sp, #4]
1a005028:	bb1b      	cbnz	r3, 1a005072 <prvProcessTimerOrBlockTask+0x5e>
1a00502a:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a00502c:	b90c      	cbnz	r4, 1a005032 <prvProcessTimerOrBlockTask+0x1e>
1a00502e:	42b0      	cmp	r0, r6
1a005030:	d218      	bcs.n	1a005064 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a005032:	b12c      	cbz	r4, 1a005040 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a005034:	4b11      	ldr	r3, [pc, #68]	; (1a00507c <prvProcessTimerOrBlockTask+0x68>)
1a005036:	681b      	ldr	r3, [r3, #0]
1a005038:	681c      	ldr	r4, [r3, #0]
1a00503a:	fab4 f484 	clz	r4, r4
1a00503e:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a005040:	4622      	mov	r2, r4
1a005042:	1b71      	subs	r1, r6, r5
1a005044:	4b0e      	ldr	r3, [pc, #56]	; (1a005080 <prvProcessTimerOrBlockTask+0x6c>)
1a005046:	6818      	ldr	r0, [r3, #0]
1a005048:	f7ff f87c 	bl	1a004144 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a00504c:	f7ff fc0e 	bl	1a00486c <xTaskResumeAll>
1a005050:	b988      	cbnz	r0, 1a005076 <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a005052:	4b0c      	ldr	r3, [pc, #48]	; (1a005084 <prvProcessTimerOrBlockTask+0x70>)
1a005054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a005058:	601a      	str	r2, [r3, #0]
1a00505a:	f3bf 8f4f 	dsb	sy
1a00505e:	f3bf 8f6f 	isb	sy
1a005062:	e008      	b.n	1a005076 <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a005064:	f7ff fc02 	bl	1a00486c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a005068:	4629      	mov	r1, r5
1a00506a:	4630      	mov	r0, r6
1a00506c:	f7ff ffa2 	bl	1a004fb4 <prvProcessExpiredTimer>
1a005070:	e001      	b.n	1a005076 <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a005072:	f7ff fbfb 	bl	1a00486c <xTaskResumeAll>
}
1a005076:	b002      	add	sp, #8
1a005078:	bd70      	pop	{r4, r5, r6, pc}
1a00507a:	bf00      	nop
1a00507c:	10004ad4 	.word	0x10004ad4
1a005080:	10004bf4 	.word	0x10004bf4
1a005084:	e000ed04 	.word	0xe000ed04

1a005088 <prvProcessReceivedCommands>:
{
1a005088:	b530      	push	{r4, r5, lr}
1a00508a:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a00508c:	e006      	b.n	1a00509c <prvProcessReceivedCommands+0x14>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a00508e:	9907      	ldr	r1, [sp, #28]
1a005090:	9806      	ldr	r0, [sp, #24]
1a005092:	9b05      	ldr	r3, [sp, #20]
1a005094:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a005096:	9b04      	ldr	r3, [sp, #16]
1a005098:	2b00      	cmp	r3, #0
1a00509a:	da0b      	bge.n	1a0050b4 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a00509c:	2200      	movs	r2, #0
1a00509e:	a904      	add	r1, sp, #16
1a0050a0:	4b37      	ldr	r3, [pc, #220]	; (1a005180 <prvProcessReceivedCommands+0xf8>)
1a0050a2:	6818      	ldr	r0, [r3, #0]
1a0050a4:	f7fe ff8c 	bl	1a003fc0 <xQueueReceive>
1a0050a8:	2800      	cmp	r0, #0
1a0050aa:	d066      	beq.n	1a00517a <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a0050ac:	9b04      	ldr	r3, [sp, #16]
1a0050ae:	2b00      	cmp	r3, #0
1a0050b0:	daf1      	bge.n	1a005096 <prvProcessReceivedCommands+0xe>
1a0050b2:	e7ec      	b.n	1a00508e <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a0050b4:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a0050b6:	6963      	ldr	r3, [r4, #20]
1a0050b8:	b113      	cbz	r3, 1a0050c0 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0050ba:	1d20      	adds	r0, r4, #4
1a0050bc:	f7ff f89e 	bl	1a0041fc <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a0050c0:	a803      	add	r0, sp, #12
1a0050c2:	f7ff ff61 	bl	1a004f88 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a0050c6:	9b04      	ldr	r3, [sp, #16]
1a0050c8:	2b09      	cmp	r3, #9
1a0050ca:	d8e7      	bhi.n	1a00509c <prvProcessReceivedCommands+0x14>
1a0050cc:	a201      	add	r2, pc, #4	; (adr r2, 1a0050d4 <prvProcessReceivedCommands+0x4c>)
1a0050ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a0050d2:	bf00      	nop
1a0050d4:	1a0050fd 	.word	0x1a0050fd
1a0050d8:	1a0050fd 	.word	0x1a0050fd
1a0050dc:	1a0050fd 	.word	0x1a0050fd
1a0050e0:	1a00509d 	.word	0x1a00509d
1a0050e4:	1a005145 	.word	0x1a005145
1a0050e8:	1a00516b 	.word	0x1a00516b
1a0050ec:	1a0050fd 	.word	0x1a0050fd
1a0050f0:	1a0050fd 	.word	0x1a0050fd
1a0050f4:	1a00509d 	.word	0x1a00509d
1a0050f8:	1a005145 	.word	0x1a005145
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a0050fc:	9905      	ldr	r1, [sp, #20]
1a0050fe:	69a5      	ldr	r5, [r4, #24]
1a005100:	460b      	mov	r3, r1
1a005102:	4602      	mov	r2, r0
1a005104:	4429      	add	r1, r5
1a005106:	4620      	mov	r0, r4
1a005108:	f7ff fe02 	bl	1a004d10 <prvInsertTimerInActiveList>
1a00510c:	2800      	cmp	r0, #0
1a00510e:	d0c5      	beq.n	1a00509c <prvProcessReceivedCommands+0x14>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a005110:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a005112:	4620      	mov	r0, r4
1a005114:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a005116:	69e3      	ldr	r3, [r4, #28]
1a005118:	2b01      	cmp	r3, #1
1a00511a:	d1bf      	bne.n	1a00509c <prvProcessReceivedCommands+0x14>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a00511c:	69a2      	ldr	r2, [r4, #24]
1a00511e:	2100      	movs	r1, #0
1a005120:	9100      	str	r1, [sp, #0]
1a005122:	460b      	mov	r3, r1
1a005124:	9805      	ldr	r0, [sp, #20]
1a005126:	4402      	add	r2, r0
1a005128:	4620      	mov	r0, r4
1a00512a:	f7ff febb 	bl	1a004ea4 <xTimerGenericCommand>
							configASSERT( xResult );
1a00512e:	2800      	cmp	r0, #0
1a005130:	d1b4      	bne.n	1a00509c <prvProcessReceivedCommands+0x14>
1a005132:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a005136:	f383 8811 	msr	BASEPRI, r3
1a00513a:	f3bf 8f6f 	isb	sy
1a00513e:	f3bf 8f4f 	dsb	sy
1a005142:	e7fe      	b.n	1a005142 <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a005144:	9905      	ldr	r1, [sp, #20]
1a005146:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a005148:	b131      	cbz	r1, 1a005158 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a00514a:	4603      	mov	r3, r0
1a00514c:	4602      	mov	r2, r0
1a00514e:	4401      	add	r1, r0
1a005150:	4620      	mov	r0, r4
1a005152:	f7ff fddd 	bl	1a004d10 <prvInsertTimerInActiveList>
					break;
1a005156:	e7a1      	b.n	1a00509c <prvProcessReceivedCommands+0x14>
1a005158:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00515c:	f383 8811 	msr	BASEPRI, r3
1a005160:	f3bf 8f6f 	isb	sy
1a005164:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a005168:	e7fe      	b.n	1a005168 <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a00516a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a00516e:	2b00      	cmp	r3, #0
1a005170:	d194      	bne.n	1a00509c <prvProcessReceivedCommands+0x14>
							vPortFree( pxTimer );
1a005172:	4620      	mov	r0, r4
1a005174:	f7fe fc60 	bl	1a003a38 <vPortFree>
1a005178:	e790      	b.n	1a00509c <prvProcessReceivedCommands+0x14>
}
1a00517a:	b009      	add	sp, #36	; 0x24
1a00517c:	bd30      	pop	{r4, r5, pc}
1a00517e:	bf00      	nop
1a005180:	10004bf4 	.word	0x10004bf4

1a005184 <prvTimerTask>:
{
1a005184:	b500      	push	{lr}
1a005186:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a005188:	a801      	add	r0, sp, #4
1a00518a:	f7ff fdb1 	bl	1a004cf0 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a00518e:	9901      	ldr	r1, [sp, #4]
1a005190:	f7ff ff40 	bl	1a005014 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a005194:	f7ff ff78 	bl	1a005088 <prvProcessReceivedCommands>
1a005198:	e7f6      	b.n	1a005188 <prvTimerTask+0x4>
1a00519a:	Address 0x000000001a00519a is out of bounds.


1a00519c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a00519c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a00519e:	2300      	movs	r3, #0
1a0051a0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a0051a2:	4b0d      	ldr	r3, [pc, #52]	; (1a0051d8 <prvTaskExitError+0x3c>)
1a0051a4:	681b      	ldr	r3, [r3, #0]
1a0051a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0051aa:	d008      	beq.n	1a0051be <prvTaskExitError+0x22>
1a0051ac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0051b0:	f383 8811 	msr	BASEPRI, r3
1a0051b4:	f3bf 8f6f 	isb	sy
1a0051b8:	f3bf 8f4f 	dsb	sy
1a0051bc:	e7fe      	b.n	1a0051bc <prvTaskExitError+0x20>
1a0051be:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0051c2:	f383 8811 	msr	BASEPRI, r3
1a0051c6:	f3bf 8f6f 	isb	sy
1a0051ca:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a0051ce:	9b01      	ldr	r3, [sp, #4]
1a0051d0:	2b00      	cmp	r3, #0
1a0051d2:	d0fc      	beq.n	1a0051ce <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a0051d4:	b002      	add	sp, #8
1a0051d6:	4770      	bx	lr
1a0051d8:	1000000c 	.word	0x1000000c

1a0051dc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a0051dc:	4808      	ldr	r0, [pc, #32]	; (1a005200 <prvPortStartFirstTask+0x24>)
1a0051de:	6800      	ldr	r0, [r0, #0]
1a0051e0:	6800      	ldr	r0, [r0, #0]
1a0051e2:	f380 8808 	msr	MSP, r0
1a0051e6:	f04f 0000 	mov.w	r0, #0
1a0051ea:	f380 8814 	msr	CONTROL, r0
1a0051ee:	b662      	cpsie	i
1a0051f0:	b661      	cpsie	f
1a0051f2:	f3bf 8f4f 	dsb	sy
1a0051f6:	f3bf 8f6f 	isb	sy
1a0051fa:	df00      	svc	0
1a0051fc:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
1a0051fe:	0000      	.short	0x0000
1a005200:	e000ed08 	.word	0xe000ed08

1a005204 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a005204:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a005214 <vPortEnableVFP+0x10>
1a005208:	6801      	ldr	r1, [r0, #0]
1a00520a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a00520e:	6001      	str	r1, [r0, #0]
1a005210:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
1a005212:	0000      	.short	0x0000
1a005214:	e000ed88 	.word	0xe000ed88

1a005218 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a005218:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a00521c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a005220:	f021 0101 	bic.w	r1, r1, #1
1a005224:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a005228:	4b05      	ldr	r3, [pc, #20]	; (1a005240 <pxPortInitialiseStack+0x28>)
1a00522a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a00522e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a005232:	f06f 0302 	mvn.w	r3, #2
1a005236:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a00523a:	3844      	subs	r0, #68	; 0x44
1a00523c:	4770      	bx	lr
1a00523e:	bf00      	nop
1a005240:	1a00519d 	.word	0x1a00519d
1a005244:	ffffffff 	.word	0xffffffff
1a005248:	ffffffff 	.word	0xffffffff
1a00524c:	ffffffff 	.word	0xffffffff

1a005250 <SVC_Handler>:
	__asm volatile (
1a005250:	4b07      	ldr	r3, [pc, #28]	; (1a005270 <pxCurrentTCBConst2>)
1a005252:	6819      	ldr	r1, [r3, #0]
1a005254:	6808      	ldr	r0, [r1, #0]
1a005256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00525a:	f380 8809 	msr	PSP, r0
1a00525e:	f3bf 8f6f 	isb	sy
1a005262:	f04f 0000 	mov.w	r0, #0
1a005266:	f380 8811 	msr	BASEPRI, r0
1a00526a:	4770      	bx	lr
1a00526c:	f3af 8000 	nop.w

1a005270 <pxCurrentTCBConst2>:
1a005270:	100049a8 	.word	0x100049a8

1a005274 <vPortEnterCritical>:
1a005274:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a005278:	f383 8811 	msr	BASEPRI, r3
1a00527c:	f3bf 8f6f 	isb	sy
1a005280:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a005284:	4a0a      	ldr	r2, [pc, #40]	; (1a0052b0 <vPortEnterCritical+0x3c>)
1a005286:	6813      	ldr	r3, [r2, #0]
1a005288:	3301      	adds	r3, #1
1a00528a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a00528c:	2b01      	cmp	r3, #1
1a00528e:	d000      	beq.n	1a005292 <vPortEnterCritical+0x1e>
}
1a005290:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a005292:	4b08      	ldr	r3, [pc, #32]	; (1a0052b4 <vPortEnterCritical+0x40>)
1a005294:	681b      	ldr	r3, [r3, #0]
1a005296:	f013 0fff 	tst.w	r3, #255	; 0xff
1a00529a:	d0f9      	beq.n	1a005290 <vPortEnterCritical+0x1c>
1a00529c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0052a0:	f383 8811 	msr	BASEPRI, r3
1a0052a4:	f3bf 8f6f 	isb	sy
1a0052a8:	f3bf 8f4f 	dsb	sy
1a0052ac:	e7fe      	b.n	1a0052ac <vPortEnterCritical+0x38>
1a0052ae:	bf00      	nop
1a0052b0:	1000000c 	.word	0x1000000c
1a0052b4:	e000ed04 	.word	0xe000ed04

1a0052b8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a0052b8:	4b09      	ldr	r3, [pc, #36]	; (1a0052e0 <vPortExitCritical+0x28>)
1a0052ba:	681b      	ldr	r3, [r3, #0]
1a0052bc:	b943      	cbnz	r3, 1a0052d0 <vPortExitCritical+0x18>
1a0052be:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0052c2:	f383 8811 	msr	BASEPRI, r3
1a0052c6:	f3bf 8f6f 	isb	sy
1a0052ca:	f3bf 8f4f 	dsb	sy
1a0052ce:	e7fe      	b.n	1a0052ce <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a0052d0:	3b01      	subs	r3, #1
1a0052d2:	4a03      	ldr	r2, [pc, #12]	; (1a0052e0 <vPortExitCritical+0x28>)
1a0052d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a0052d6:	b90b      	cbnz	r3, 1a0052dc <vPortExitCritical+0x24>
	__asm volatile
1a0052d8:	f383 8811 	msr	BASEPRI, r3
}
1a0052dc:	4770      	bx	lr
1a0052de:	bf00      	nop
1a0052e0:	1000000c 	.word	0x1000000c
1a0052e4:	ffffffff 	.word	0xffffffff
1a0052e8:	ffffffff 	.word	0xffffffff
1a0052ec:	ffffffff 	.word	0xffffffff

1a0052f0 <PendSV_Handler>:
	__asm volatile
1a0052f0:	f3ef 8009 	mrs	r0, PSP
1a0052f4:	f3bf 8f6f 	isb	sy
1a0052f8:	4b15      	ldr	r3, [pc, #84]	; (1a005350 <pxCurrentTCBConst>)
1a0052fa:	681a      	ldr	r2, [r3, #0]
1a0052fc:	f01e 0f10 	tst.w	lr, #16
1a005300:	bf08      	it	eq
1a005302:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a005306:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00530a:	6010      	str	r0, [r2, #0]
1a00530c:	e92d 0009 	stmdb	sp!, {r0, r3}
1a005310:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a005314:	f380 8811 	msr	BASEPRI, r0
1a005318:	f3bf 8f4f 	dsb	sy
1a00531c:	f3bf 8f6f 	isb	sy
1a005320:	f7ff fb48 	bl	1a0049b4 <vTaskSwitchContext>
1a005324:	f04f 0000 	mov.w	r0, #0
1a005328:	f380 8811 	msr	BASEPRI, r0
1a00532c:	bc09      	pop	{r0, r3}
1a00532e:	6819      	ldr	r1, [r3, #0]
1a005330:	6808      	ldr	r0, [r1, #0]
1a005332:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a005336:	f01e 0f10 	tst.w	lr, #16
1a00533a:	bf08      	it	eq
1a00533c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a005340:	f380 8809 	msr	PSP, r0
1a005344:	f3bf 8f6f 	isb	sy
1a005348:	4770      	bx	lr
1a00534a:	bf00      	nop
1a00534c:	f3af 8000 	nop.w

1a005350 <pxCurrentTCBConst>:
1a005350:	100049a8 	.word	0x100049a8

1a005354 <SysTick_Handler>:
{
1a005354:	b508      	push	{r3, lr}
	__asm volatile
1a005356:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00535a:	f383 8811 	msr	BASEPRI, r3
1a00535e:	f3bf 8f6f 	isb	sy
1a005362:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a005366:	f7ff f9f5 	bl	1a004754 <xTaskIncrementTick>
1a00536a:	b118      	cbz	r0, 1a005374 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a00536c:	4b03      	ldr	r3, [pc, #12]	; (1a00537c <SysTick_Handler+0x28>)
1a00536e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a005372:	601a      	str	r2, [r3, #0]
	__asm volatile
1a005374:	2300      	movs	r3, #0
1a005376:	f383 8811 	msr	BASEPRI, r3
}
1a00537a:	bd08      	pop	{r3, pc}
1a00537c:	e000ed04 	.word	0xe000ed04

1a005380 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a005380:	4a08      	ldr	r2, [pc, #32]	; (1a0053a4 <vPortSetupTimerInterrupt+0x24>)
1a005382:	2300      	movs	r3, #0
1a005384:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a005386:	4908      	ldr	r1, [pc, #32]	; (1a0053a8 <vPortSetupTimerInterrupt+0x28>)
1a005388:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a00538a:	4b08      	ldr	r3, [pc, #32]	; (1a0053ac <vPortSetupTimerInterrupt+0x2c>)
1a00538c:	681b      	ldr	r3, [r3, #0]
1a00538e:	4908      	ldr	r1, [pc, #32]	; (1a0053b0 <vPortSetupTimerInterrupt+0x30>)
1a005390:	fba1 1303 	umull	r1, r3, r1, r3
1a005394:	099b      	lsrs	r3, r3, #6
1a005396:	3b01      	subs	r3, #1
1a005398:	4906      	ldr	r1, [pc, #24]	; (1a0053b4 <vPortSetupTimerInterrupt+0x34>)
1a00539a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a00539c:	2307      	movs	r3, #7
1a00539e:	6013      	str	r3, [r2, #0]
}
1a0053a0:	4770      	bx	lr
1a0053a2:	bf00      	nop
1a0053a4:	e000e010 	.word	0xe000e010
1a0053a8:	e000e018 	.word	0xe000e018
1a0053ac:	10004fe4 	.word	0x10004fe4
1a0053b0:	10624dd3 	.word	0x10624dd3
1a0053b4:	e000e014 	.word	0xe000e014

1a0053b8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a0053b8:	4b3a      	ldr	r3, [pc, #232]	; (1a0054a4 <xPortStartScheduler+0xec>)
1a0053ba:	681a      	ldr	r2, [r3, #0]
1a0053bc:	4b3a      	ldr	r3, [pc, #232]	; (1a0054a8 <xPortStartScheduler+0xf0>)
1a0053be:	429a      	cmp	r2, r3
1a0053c0:	d029      	beq.n	1a005416 <xPortStartScheduler+0x5e>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a0053c2:	4b38      	ldr	r3, [pc, #224]	; (1a0054a4 <xPortStartScheduler+0xec>)
1a0053c4:	681a      	ldr	r2, [r3, #0]
1a0053c6:	4b39      	ldr	r3, [pc, #228]	; (1a0054ac <xPortStartScheduler+0xf4>)
1a0053c8:	429a      	cmp	r2, r3
1a0053ca:	d02d      	beq.n	1a005428 <xPortStartScheduler+0x70>
{
1a0053cc:	b510      	push	{r4, lr}
1a0053ce:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a0053d0:	4b37      	ldr	r3, [pc, #220]	; (1a0054b0 <xPortStartScheduler+0xf8>)
1a0053d2:	781a      	ldrb	r2, [r3, #0]
1a0053d4:	b2d2      	uxtb	r2, r2
1a0053d6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a0053d8:	22ff      	movs	r2, #255	; 0xff
1a0053da:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a0053dc:	781b      	ldrb	r3, [r3, #0]
1a0053de:	b2db      	uxtb	r3, r3
1a0053e0:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a0053e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0053e8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a0053ec:	4a31      	ldr	r2, [pc, #196]	; (1a0054b4 <xPortStartScheduler+0xfc>)
1a0053ee:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a0053f0:	4b31      	ldr	r3, [pc, #196]	; (1a0054b8 <xPortStartScheduler+0x100>)
1a0053f2:	2207      	movs	r2, #7
1a0053f4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a0053f6:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0053fa:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0053fe:	d01c      	beq.n	1a00543a <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
1a005400:	4a2d      	ldr	r2, [pc, #180]	; (1a0054b8 <xPortStartScheduler+0x100>)
1a005402:	6813      	ldr	r3, [r2, #0]
1a005404:	3b01      	subs	r3, #1
1a005406:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a005408:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a00540c:	005b      	lsls	r3, r3, #1
1a00540e:	b2db      	uxtb	r3, r3
1a005410:	f88d 3003 	strb.w	r3, [sp, #3]
1a005414:	e7ef      	b.n	1a0053f6 <xPortStartScheduler+0x3e>
	__asm volatile
1a005416:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00541a:	f383 8811 	msr	BASEPRI, r3
1a00541e:	f3bf 8f6f 	isb	sy
1a005422:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a005426:	e7fe      	b.n	1a005426 <xPortStartScheduler+0x6e>
1a005428:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00542c:	f383 8811 	msr	BASEPRI, r3
1a005430:	f3bf 8f6f 	isb	sy
1a005434:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a005438:	e7fe      	b.n	1a005438 <xPortStartScheduler+0x80>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a00543a:	4b1f      	ldr	r3, [pc, #124]	; (1a0054b8 <xPortStartScheduler+0x100>)
1a00543c:	681b      	ldr	r3, [r3, #0]
1a00543e:	2b04      	cmp	r3, #4
1a005440:	d008      	beq.n	1a005454 <xPortStartScheduler+0x9c>
1a005442:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a005446:	f383 8811 	msr	BASEPRI, r3
1a00544a:	f3bf 8f6f 	isb	sy
1a00544e:	f3bf 8f4f 	dsb	sy
1a005452:	e7fe      	b.n	1a005452 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a005454:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a005456:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a00545a:	4a17      	ldr	r2, [pc, #92]	; (1a0054b8 <xPortStartScheduler+0x100>)
1a00545c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a00545e:	9b01      	ldr	r3, [sp, #4]
1a005460:	b2db      	uxtb	r3, r3
1a005462:	4a13      	ldr	r2, [pc, #76]	; (1a0054b0 <xPortStartScheduler+0xf8>)
1a005464:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a005466:	4b15      	ldr	r3, [pc, #84]	; (1a0054bc <xPortStartScheduler+0x104>)
1a005468:	681a      	ldr	r2, [r3, #0]
1a00546a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a00546e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a005470:	681a      	ldr	r2, [r3, #0]
1a005472:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a005476:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a005478:	f7ff ff82 	bl	1a005380 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a00547c:	2400      	movs	r4, #0
1a00547e:	4b10      	ldr	r3, [pc, #64]	; (1a0054c0 <xPortStartScheduler+0x108>)
1a005480:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a005482:	f7ff febf 	bl	1a005204 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a005486:	4a0f      	ldr	r2, [pc, #60]	; (1a0054c4 <xPortStartScheduler+0x10c>)
1a005488:	6813      	ldr	r3, [r2, #0]
1a00548a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a00548e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a005490:	f7ff fea4 	bl	1a0051dc <prvPortStartFirstTask>
	vTaskSwitchContext();
1a005494:	f7ff fa8e 	bl	1a0049b4 <vTaskSwitchContext>
	prvTaskExitError();
1a005498:	f7ff fe80 	bl	1a00519c <prvTaskExitError>
}
1a00549c:	4620      	mov	r0, r4
1a00549e:	b002      	add	sp, #8
1a0054a0:	bd10      	pop	{r4, pc}
1a0054a2:	bf00      	nop
1a0054a4:	e000ed00 	.word	0xe000ed00
1a0054a8:	410fc271 	.word	0x410fc271
1a0054ac:	410fc270 	.word	0x410fc270
1a0054b0:	e000e400 	.word	0xe000e400
1a0054b4:	10004bfc 	.word	0x10004bfc
1a0054b8:	10004c00 	.word	0x10004c00
1a0054bc:	e000ed20 	.word	0xe000ed20
1a0054c0:	1000000c 	.word	0x1000000c
1a0054c4:	e000ef34 	.word	0xe000ef34

1a0054c8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a0054c8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a0054cc:	2b0f      	cmp	r3, #15
1a0054ce:	d90f      	bls.n	1a0054f0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a0054d0:	4a10      	ldr	r2, [pc, #64]	; (1a005514 <vPortValidateInterruptPriority+0x4c>)
1a0054d2:	5c9b      	ldrb	r3, [r3, r2]
1a0054d4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a0054d6:	4a10      	ldr	r2, [pc, #64]	; (1a005518 <vPortValidateInterruptPriority+0x50>)
1a0054d8:	7812      	ldrb	r2, [r2, #0]
1a0054da:	429a      	cmp	r2, r3
1a0054dc:	d908      	bls.n	1a0054f0 <vPortValidateInterruptPriority+0x28>
1a0054de:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0054e2:	f383 8811 	msr	BASEPRI, r3
1a0054e6:	f3bf 8f6f 	isb	sy
1a0054ea:	f3bf 8f4f 	dsb	sy
1a0054ee:	e7fe      	b.n	1a0054ee <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a0054f0:	4b0a      	ldr	r3, [pc, #40]	; (1a00551c <vPortValidateInterruptPriority+0x54>)
1a0054f2:	681b      	ldr	r3, [r3, #0]
1a0054f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a0054f8:	4a09      	ldr	r2, [pc, #36]	; (1a005520 <vPortValidateInterruptPriority+0x58>)
1a0054fa:	6812      	ldr	r2, [r2, #0]
1a0054fc:	4293      	cmp	r3, r2
1a0054fe:	d908      	bls.n	1a005512 <vPortValidateInterruptPriority+0x4a>
1a005500:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a005504:	f383 8811 	msr	BASEPRI, r3
1a005508:	f3bf 8f6f 	isb	sy
1a00550c:	f3bf 8f4f 	dsb	sy
1a005510:	e7fe      	b.n	1a005510 <vPortValidateInterruptPriority+0x48>
	}
1a005512:	4770      	bx	lr
1a005514:	e000e3f0 	.word	0xe000e3f0
1a005518:	10004bfc 	.word	0x10004bfc
1a00551c:	e000ed0c 	.word	0xe000ed0c
1a005520:	10004c00 	.word	0x10004c00

1a005524 <DAC_IRQHandler>:
}
/*-----------------------------------------------------------*/

// ISR Handler
void vSoftwareInterruptHandler( void )
{
1a005524:	b508      	push	{r3, lr}
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a005526:	4b05      	ldr	r3, [pc, #20]	; (1a00553c <DAC_IRQHandler+0x18>)
1a005528:	2201      	movs	r2, #1
1a00552a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   NVIC_ClearPendingIRQ( mainSW_INTERRUPT_ID );

   // Execute Tick Hook function if pointer is not NULL
   if( freeRtosInterruptCallback != NULL ) {
1a00552e:	4b04      	ldr	r3, [pc, #16]	; (1a005540 <DAC_IRQHandler+0x1c>)
1a005530:	681b      	ldr	r3, [r3, #0]
1a005532:	b113      	cbz	r3, 1a00553a <DAC_IRQHandler+0x16>
      (* freeRtosInterruptCallback )();
1a005534:	4b02      	ldr	r3, [pc, #8]	; (1a005540 <DAC_IRQHandler+0x1c>)
1a005536:	681b      	ldr	r3, [r3, #0]
1a005538:	4798      	blx	r3
   }
}
1a00553a:	bd08      	pop	{r3, pc}
1a00553c:	e000e100 	.word	0xe000e100
1a005540:	10004c04 	.word	0x10004c04

1a005544 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a005544:	2200      	movs	r2, #0
1a005546:	2a05      	cmp	r2, #5
1a005548:	d819      	bhi.n	1a00557e <Board_LED_Init+0x3a>
{
1a00554a:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a00554c:	490c      	ldr	r1, [pc, #48]	; (1a005580 <Board_LED_Init+0x3c>)
1a00554e:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a005552:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a005556:	784c      	ldrb	r4, [r1, #1]
	pGPIO->DIR[port] |= 1UL << pin;
1a005558:	4b0a      	ldr	r3, [pc, #40]	; (1a005584 <Board_LED_Init+0x40>)
1a00555a:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a00555e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a005562:	2001      	movs	r0, #1
1a005564:	40a0      	lsls	r0, r4
1a005566:	4301      	orrs	r1, r0
1a005568:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a00556c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a005570:	2100      	movs	r1, #0
1a005572:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a005574:	3201      	adds	r2, #1
1a005576:	2a05      	cmp	r2, #5
1a005578:	d9e8      	bls.n	1a00554c <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a00557a:	bc70      	pop	{r4, r5, r6}
1a00557c:	4770      	bx	lr
1a00557e:	4770      	bx	lr
1a005580:	1a0088d4 	.word	0x1a0088d4
1a005584:	400f4000 	.word	0x400f4000

1a005588 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a005588:	2300      	movs	r3, #0
1a00558a:	2b03      	cmp	r3, #3
1a00558c:	d816      	bhi.n	1a0055bc <Board_TEC_Init+0x34>
{
1a00558e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a005590:	490b      	ldr	r1, [pc, #44]	; (1a0055c0 <Board_TEC_Init+0x38>)
1a005592:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a005596:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00559a:	784d      	ldrb	r5, [r1, #1]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a00559c:	4c09      	ldr	r4, [pc, #36]	; (1a0055c4 <Board_TEC_Init+0x3c>)
1a00559e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0055a2:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0055a6:	2001      	movs	r0, #1
1a0055a8:	40a8      	lsls	r0, r5
1a0055aa:	ea21 0100 	bic.w	r1, r1, r0
1a0055ae:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0055b2:	3301      	adds	r3, #1
1a0055b4:	2b03      	cmp	r3, #3
1a0055b6:	d9eb      	bls.n	1a005590 <Board_TEC_Init+0x8>
   }
}
1a0055b8:	bc30      	pop	{r4, r5}
1a0055ba:	4770      	bx	lr
1a0055bc:	4770      	bx	lr
1a0055be:	bf00      	nop
1a0055c0:	1a0088cc 	.word	0x1a0088cc
1a0055c4:	400f4000 	.word	0x400f4000

1a0055c8 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0055c8:	2300      	movs	r3, #0
1a0055ca:	2b08      	cmp	r3, #8
1a0055cc:	d816      	bhi.n	1a0055fc <Board_GPIO_Init+0x34>
{
1a0055ce:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0055d0:	490b      	ldr	r1, [pc, #44]	; (1a005600 <Board_GPIO_Init+0x38>)
1a0055d2:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0055d6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0055da:	784d      	ldrb	r5, [r1, #1]
1a0055dc:	4c09      	ldr	r4, [pc, #36]	; (1a005604 <Board_GPIO_Init+0x3c>)
1a0055de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0055e2:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0055e6:	2001      	movs	r0, #1
1a0055e8:	40a8      	lsls	r0, r5
1a0055ea:	ea21 0100 	bic.w	r1, r1, r0
1a0055ee:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0055f2:	3301      	adds	r3, #1
1a0055f4:	2b08      	cmp	r3, #8
1a0055f6:	d9eb      	bls.n	1a0055d0 <Board_GPIO_Init+0x8>
   }
}
1a0055f8:	bc30      	pop	{r4, r5}
1a0055fa:	4770      	bx	lr
1a0055fc:	4770      	bx	lr
1a0055fe:	bf00      	nop
1a005600:	1a0088e0 	.word	0x1a0088e0
1a005604:	400f4000 	.word	0x400f4000

1a005608 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a005608:	b510      	push	{r4, lr}
1a00560a:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a00560c:	4c08      	ldr	r4, [pc, #32]	; (1a005630 <Board_ADC_Init+0x28>)
1a00560e:	4669      	mov	r1, sp
1a005610:	4620      	mov	r0, r4
1a005612:	f000 f9d9 	bl	1a0059c8 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a005616:	4a07      	ldr	r2, [pc, #28]	; (1a005634 <Board_ADC_Init+0x2c>)
1a005618:	4669      	mov	r1, sp
1a00561a:	4620      	mov	r0, r4
1a00561c:	f000 f9f4 	bl	1a005a08 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a005620:	2200      	movs	r2, #0
1a005622:	4669      	mov	r1, sp
1a005624:	4620      	mov	r0, r4
1a005626:	f000 fa08 	bl	1a005a3a <Chip_ADC_SetResolution>
}
1a00562a:	b002      	add	sp, #8
1a00562c:	bd10      	pop	{r4, pc}
1a00562e:	bf00      	nop
1a005630:	400e3000 	.word	0x400e3000
1a005634:	00061a80 	.word	0x00061a80

1a005638 <Board_SPI_Init>:
{
1a005638:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a00563a:	4c0b      	ldr	r4, [pc, #44]	; (1a005668 <Board_SPI_Init+0x30>)
1a00563c:	4620      	mov	r0, r4
1a00563e:	f000 fe8f 	bl	1a006360 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a005642:	6863      	ldr	r3, [r4, #4]
1a005644:	f023 0304 	bic.w	r3, r3, #4
1a005648:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00564a:	6823      	ldr	r3, [r4, #0]
1a00564c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a005650:	f043 0307 	orr.w	r3, r3, #7
1a005654:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a005656:	4905      	ldr	r1, [pc, #20]	; (1a00566c <Board_SPI_Init+0x34>)
1a005658:	4620      	mov	r0, r4
1a00565a:	f000 fe62 	bl	1a006322 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a00565e:	6863      	ldr	r3, [r4, #4]
1a005660:	f043 0302 	orr.w	r3, r3, #2
1a005664:	6063      	str	r3, [r4, #4]
}
1a005666:	bd10      	pop	{r4, pc}
1a005668:	400c5000 	.word	0x400c5000
1a00566c:	000186a0 	.word	0x000186a0

1a005670 <Board_I2C_Init>:
{
1a005670:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a005672:	2000      	movs	r0, #0
1a005674:	f000 fea0 	bl	1a0063b8 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a005678:	4b04      	ldr	r3, [pc, #16]	; (1a00568c <Board_I2C_Init+0x1c>)
1a00567a:	f640 0208 	movw	r2, #2056	; 0x808
1a00567e:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a005682:	4903      	ldr	r1, [pc, #12]	; (1a005690 <Board_I2C_Init+0x20>)
1a005684:	2000      	movs	r0, #0
1a005686:	f000 fea9 	bl	1a0063dc <Chip_I2C_SetClockRate>
}
1a00568a:	bd08      	pop	{r3, pc}
1a00568c:	40086000 	.word	0x40086000
1a005690:	000f4240 	.word	0x000f4240

1a005694 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a005694:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a005696:	4c07      	ldr	r4, [pc, #28]	; (1a0056b4 <Board_Debug_Init+0x20>)
1a005698:	4620      	mov	r0, r4
1a00569a:	f000 f8b9 	bl	1a005810 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a00569e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0056a2:	4620      	mov	r0, r4
1a0056a4:	f000 f8fe 	bl	1a0058a4 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a0056a8:	2303      	movs	r3, #3
1a0056aa:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a0056ac:	2301      	movs	r3, #1
1a0056ae:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a0056b0:	bd10      	pop	{r4, pc}
1a0056b2:	bf00      	nop
1a0056b4:	400c1000 	.word	0x400c1000

1a0056b8 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0056b8:	4b03      	ldr	r3, [pc, #12]	; (1a0056c8 <Board_UARTPutChar+0x10>)
1a0056ba:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a0056bc:	f013 0f20 	tst.w	r3, #32
1a0056c0:	d0fa      	beq.n	1a0056b8 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a0056c2:	4b01      	ldr	r3, [pc, #4]	; (1a0056c8 <Board_UARTPutChar+0x10>)
1a0056c4:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a0056c6:	4770      	bx	lr
1a0056c8:	400c1000 	.word	0x400c1000

1a0056cc <Board_UARTGetChar>:
	return pUART->LSR;
1a0056cc:	4b05      	ldr	r3, [pc, #20]	; (1a0056e4 <Board_UARTGetChar+0x18>)
1a0056ce:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a0056d0:	f013 0f01 	tst.w	r3, #1
1a0056d4:	d003      	beq.n	1a0056de <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0056d6:	4b03      	ldr	r3, [pc, #12]	; (1a0056e4 <Board_UARTGetChar+0x18>)
1a0056d8:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a0056da:	b2c0      	uxtb	r0, r0
1a0056dc:	4770      	bx	lr
   }
   return EOF;
1a0056de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0056e2:	4770      	bx	lr
1a0056e4:	400c1000 	.word	0x400c1000

1a0056e8 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a0056e8:	b508      	push	{r3, lr}
   DEBUGINIT();
1a0056ea:	f7ff ffd3 	bl	1a005694 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a0056ee:	4809      	ldr	r0, [pc, #36]	; (1a005714 <Board_Init+0x2c>)
1a0056f0:	f000 fd48 	bl	1a006184 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a0056f4:	f7ff ff68 	bl	1a0055c8 <Board_GPIO_Init>
   Board_ADC_Init();
1a0056f8:	f7ff ff86 	bl	1a005608 <Board_ADC_Init>
   Board_SPI_Init();
1a0056fc:	f7ff ff9c 	bl	1a005638 <Board_SPI_Init>
   Board_I2C_Init();
1a005700:	f7ff ffb6 	bl	1a005670 <Board_I2C_Init>

   Board_LED_Init();
1a005704:	f7ff ff1e 	bl	1a005544 <Board_LED_Init>
   Board_TEC_Init();
1a005708:	f7ff ff3e 	bl	1a005588 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a00570c:	f000 f99c 	bl	1a005a48 <SystemCoreClockUpdate>
}
1a005710:	bd08      	pop	{r3, pc}
1a005712:	bf00      	nop
1a005714:	400f4000 	.word	0x400f4000

1a005718 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a005718:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a00571a:	b2c0      	uxtb	r0, r0
1a00571c:	f7ff ffcc 	bl	1a0056b8 <Board_UARTPutChar>
}
1a005720:	bd08      	pop	{r3, pc}

1a005722 <__stdio_getchar>:

int __stdio_getchar()
{
1a005722:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a005724:	f7ff ffd2 	bl	1a0056cc <Board_UARTGetChar>
}
1a005728:	bd08      	pop	{r3, pc}

1a00572a <__stdio_init>:

void __stdio_init()
{
1a00572a:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a00572c:	f7ff ffb2 	bl	1a005694 <Board_Debug_Init>
1a005730:	bd08      	pop	{r3, pc}
1a005732:	Address 0x000000001a005732 is out of bounds.


1a005734 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a005734:	2300      	movs	r3, #0
1a005736:	2b1c      	cmp	r3, #28
1a005738:	d812      	bhi.n	1a005760 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a00573a:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a00573c:	4a09      	ldr	r2, [pc, #36]	; (1a005764 <Board_SetupMuxing+0x30>)
1a00573e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a005742:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a005746:	784a      	ldrb	r2, [r1, #1]
1a005748:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00574a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00574e:	4906      	ldr	r1, [pc, #24]	; (1a005768 <Board_SetupMuxing+0x34>)
1a005750:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a005754:	3301      	adds	r3, #1
1a005756:	2b1c      	cmp	r3, #28
1a005758:	d9f0      	bls.n	1a00573c <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a00575a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00575e:	4770      	bx	lr
1a005760:	4770      	bx	lr
1a005762:	bf00      	nop
1a005764:	1a0088fc 	.word	0x1a0088fc
1a005768:	40086000 	.word	0x40086000

1a00576c <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a00576c:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00576e:	4a17      	ldr	r2, [pc, #92]	; (1a0057cc <Board_SetupClocking+0x60>)
1a005770:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a005774:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a005778:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00577c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a005780:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a005784:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a005788:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00578c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a005790:	2201      	movs	r2, #1
1a005792:	490f      	ldr	r1, [pc, #60]	; (1a0057d0 <Board_SetupClocking+0x64>)
1a005794:	2006      	movs	r0, #6
1a005796:	f000 fc27 	bl	1a005fe8 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00579a:	2400      	movs	r4, #0
1a00579c:	b14c      	cbz	r4, 1a0057b2 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a00579e:	4b0b      	ldr	r3, [pc, #44]	; (1a0057cc <Board_SetupClocking+0x60>)
1a0057a0:	685a      	ldr	r2, [r3, #4]
1a0057a2:	f022 020c 	bic.w	r2, r2, #12
1a0057a6:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a0057a8:	685a      	ldr	r2, [r3, #4]
1a0057aa:	f042 0203 	orr.w	r2, r2, #3
1a0057ae:	605a      	str	r2, [r3, #4]
}
1a0057b0:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a0057b2:	4808      	ldr	r0, [pc, #32]	; (1a0057d4 <Board_SetupClocking+0x68>)
1a0057b4:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0057b8:	2301      	movs	r3, #1
1a0057ba:	788a      	ldrb	r2, [r1, #2]
1a0057bc:	7849      	ldrb	r1, [r1, #1]
1a0057be:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0057c2:	f000 fb6d 	bl	1a005ea0 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0057c6:	3401      	adds	r4, #1
1a0057c8:	e7e8      	b.n	1a00579c <Board_SetupClocking+0x30>
1a0057ca:	bf00      	nop
1a0057cc:	40043000 	.word	0x40043000
1a0057d0:	0c28cb00 	.word	0x0c28cb00
1a0057d4:	1a0088f8 	.word	0x1a0088f8

1a0057d8 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0057d8:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a0057da:	f7ff ffab 	bl	1a005734 <Board_SetupMuxing>
    Board_SetupClocking();
1a0057de:	f7ff ffc5 	bl	1a00576c <Board_SetupClocking>
}
1a0057e2:	bd08      	pop	{r3, pc}

1a0057e4 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a0057e4:	4b09      	ldr	r3, [pc, #36]	; (1a00580c <Chip_UART_GetIndex+0x28>)
1a0057e6:	4298      	cmp	r0, r3
1a0057e8:	d009      	beq.n	1a0057fe <Chip_UART_GetIndex+0x1a>
1a0057ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0057ee:	4298      	cmp	r0, r3
1a0057f0:	d007      	beq.n	1a005802 <Chip_UART_GetIndex+0x1e>
1a0057f2:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a0057f6:	4298      	cmp	r0, r3
1a0057f8:	d005      	beq.n	1a005806 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a0057fa:	2000      	movs	r0, #0
1a0057fc:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a0057fe:	2002      	movs	r0, #2
1a005800:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a005802:	2003      	movs	r0, #3
1a005804:	4770      	bx	lr
			return 1;
1a005806:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a005808:	4770      	bx	lr
1a00580a:	bf00      	nop
1a00580c:	400c1000 	.word	0x400c1000

1a005810 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a005810:	b530      	push	{r4, r5, lr}
1a005812:	b083      	sub	sp, #12
1a005814:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a005816:	f7ff ffe5 	bl	1a0057e4 <Chip_UART_GetIndex>
1a00581a:	2301      	movs	r3, #1
1a00581c:	461a      	mov	r2, r3
1a00581e:	4619      	mov	r1, r3
1a005820:	4d0e      	ldr	r5, [pc, #56]	; (1a00585c <Chip_UART_Init+0x4c>)
1a005822:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a005826:	f000 fb81 	bl	1a005f2c <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a00582a:	2307      	movs	r3, #7
1a00582c:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a00582e:	2300      	movs	r3, #0
1a005830:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a005832:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a005834:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a005836:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a005838:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a00583a:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a00583c:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a00583e:	4b08      	ldr	r3, [pc, #32]	; (1a005860 <Chip_UART_Init+0x50>)
1a005840:	429c      	cmp	r4, r3
1a005842:	d006      	beq.n	1a005852 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a005844:	2303      	movs	r3, #3
1a005846:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a005848:	2310      	movs	r3, #16
1a00584a:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a00584c:	9b01      	ldr	r3, [sp, #4]
}
1a00584e:	b003      	add	sp, #12
1a005850:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a005852:	2300      	movs	r3, #0
1a005854:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a005856:	69a3      	ldr	r3, [r4, #24]
1a005858:	9301      	str	r3, [sp, #4]
1a00585a:	e7f3      	b.n	1a005844 <Chip_UART_Init+0x34>
1a00585c:	1a008978 	.word	0x1a008978
1a005860:	40082000 	.word	0x40082000

1a005864 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a005864:	b538      	push	{r3, r4, r5, lr}
1a005866:	4605      	mov	r5, r0
1a005868:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00586a:	f7ff ffbb 	bl	1a0057e4 <Chip_UART_GetIndex>
1a00586e:	4b0c      	ldr	r3, [pc, #48]	; (1a0058a0 <Chip_UART_SetBaud+0x3c>)
1a005870:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a005874:	f000 fb92 	bl	1a005f9c <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a005878:	0123      	lsls	r3, r4, #4
1a00587a:	fbb0 f3f3 	udiv	r3, r0, r3

	/* High and low halves of the divider */
	divh = div / 256;
	divl = div - (divh * 256);
1a00587e:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a005880:	68ea      	ldr	r2, [r5, #12]
1a005882:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a005886:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a005888:	6029      	str	r1, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a00588a:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a00588e:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a005890:	68ea      	ldr	r2, [r5, #12]
1a005892:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a005896:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a005898:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a00589c:	0900      	lsrs	r0, r0, #4
1a00589e:	bd38      	pop	{r3, r4, r5, pc}
1a0058a0:	1a008970 	.word	0x1a008970

1a0058a4 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a0058a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0058a8:	b083      	sub	sp, #12
1a0058aa:	9001      	str	r0, [sp, #4]
1a0058ac:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0058ae:	f7ff ff99 	bl	1a0057e4 <Chip_UART_GetIndex>
1a0058b2:	4b32      	ldr	r3, [pc, #200]	; (1a00597c <Chip_UART_SetBaudFDR+0xd8>)
1a0058b4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0058b8:	f000 fb70 	bl	1a005f9c <Chip_Clock_GetRate>
1a0058bc:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a0058be:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0058c2:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a0058c4:	f04f 0b00 	mov.w	fp, #0
1a0058c8:	46a2      	mov	sl, r4
1a0058ca:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a0058cc:	e02a      	b.n	1a005924 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a0058ce:	4242      	negs	r2, r0
				div ++;
1a0058d0:	1c4b      	adds	r3, r1, #1
1a0058d2:	e017      	b.n	1a005904 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a0058d4:	b30a      	cbz	r2, 1a00591a <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a0058d6:	4617      	mov	r7, r2
			sd = d;
1a0058d8:	46ab      	mov	fp, r5
			sm = m;
1a0058da:	46a2      	mov	sl, r4
			sdiv = div;
1a0058dc:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a0058de:	3501      	adds	r5, #1
1a0058e0:	42ac      	cmp	r4, r5
1a0058e2:	d91e      	bls.n	1a005922 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a0058e4:	0933      	lsrs	r3, r6, #4
1a0058e6:	0730      	lsls	r0, r6, #28
1a0058e8:	fba4 0100 	umull	r0, r1, r4, r0
1a0058ec:	fb04 1103 	mla	r1, r4, r3, r1
1a0058f0:	1962      	adds	r2, r4, r5
1a0058f2:	fb08 f202 	mul.w	r2, r8, r2
1a0058f6:	2300      	movs	r3, #0
1a0058f8:	f001 f9b2 	bl	1a006c60 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a0058fc:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a0058fe:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a005900:	2800      	cmp	r0, #0
1a005902:	dbe4      	blt.n	1a0058ce <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a005904:	4297      	cmp	r7, r2
1a005906:	d3ea      	bcc.n	1a0058de <Chip_UART_SetBaudFDR+0x3a>
1a005908:	2b00      	cmp	r3, #0
1a00590a:	d0e8      	beq.n	1a0058de <Chip_UART_SetBaudFDR+0x3a>
1a00590c:	0c19      	lsrs	r1, r3, #16
1a00590e:	d1e6      	bne.n	1a0058de <Chip_UART_SetBaudFDR+0x3a>
1a005910:	2b02      	cmp	r3, #2
1a005912:	d8df      	bhi.n	1a0058d4 <Chip_UART_SetBaudFDR+0x30>
1a005914:	2d00      	cmp	r5, #0
1a005916:	d0dd      	beq.n	1a0058d4 <Chip_UART_SetBaudFDR+0x30>
1a005918:	e7e1      	b.n	1a0058de <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a00591a:	4617      	mov	r7, r2
			sd = d;
1a00591c:	46ab      	mov	fp, r5
			sm = m;
1a00591e:	46a2      	mov	sl, r4
			sdiv = div;
1a005920:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a005922:	3401      	adds	r4, #1
1a005924:	b11f      	cbz	r7, 1a00592e <Chip_UART_SetBaudFDR+0x8a>
1a005926:	2c0f      	cmp	r4, #15
1a005928:	d801      	bhi.n	1a00592e <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a00592a:	2500      	movs	r5, #0
1a00592c:	e7d8      	b.n	1a0058e0 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a00592e:	f1b9 0f00 	cmp.w	r9, #0
1a005932:	d01e      	beq.n	1a005972 <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a005934:	9a01      	ldr	r2, [sp, #4]
1a005936:	4611      	mov	r1, r2
1a005938:	68d3      	ldr	r3, [r2, #12]
1a00593a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00593e:	60d3      	str	r3, [r2, #12]
	pUART->DLL = (uint32_t) dll;
1a005940:	fa5f f389 	uxtb.w	r3, r9
1a005944:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a005946:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a00594a:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a00594c:	68d3      	ldr	r3, [r2, #12]
1a00594e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a005952:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a005954:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a005958:	b2db      	uxtb	r3, r3
1a00595a:	f00b 020f 	and.w	r2, fp, #15
1a00595e:	4313      	orrs	r3, r2
1a005960:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a005962:	0933      	lsrs	r3, r6, #4
1a005964:	fb0a f303 	mul.w	r3, sl, r3
1a005968:	44da      	add	sl, fp
1a00596a:	fb09 f90a 	mul.w	r9, r9, sl
1a00596e:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a005972:	4648      	mov	r0, r9
1a005974:	b003      	add	sp, #12
1a005976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00597a:	bf00      	nop
1a00597c:	1a008970 	.word	0x1a008970

1a005980 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a005980:	4b03      	ldr	r3, [pc, #12]	; (1a005990 <Chip_ADC_GetClockIndex+0x10>)
1a005982:	4298      	cmp	r0, r3
1a005984:	d001      	beq.n	1a00598a <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a005986:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a005988:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a00598a:	2004      	movs	r0, #4
1a00598c:	4770      	bx	lr
1a00598e:	bf00      	nop
1a005990:	400e4000 	.word	0x400e4000

1a005994 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a005994:	b570      	push	{r4, r5, r6, lr}
1a005996:	460d      	mov	r5, r1
1a005998:	4614      	mov	r4, r2
1a00599a:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a00599c:	f7ff fff0 	bl	1a005980 <Chip_ADC_GetClockIndex>
1a0059a0:	f000 fafc 	bl	1a005f9c <Chip_Clock_GetRate>
	if (burstMode) {
1a0059a4:	b155      	cbz	r5, 1a0059bc <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a0059a6:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a0059aa:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a0059ae:	0064      	lsls	r4, r4, #1
1a0059b0:	fbb0 f0f4 	udiv	r0, r0, r4
1a0059b4:	b2c0      	uxtb	r0, r0
1a0059b6:	3801      	subs	r0, #1
	return div;
}
1a0059b8:	b2c0      	uxtb	r0, r0
1a0059ba:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a0059bc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a0059c0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a0059c4:	e7f1      	b.n	1a0059aa <getClkDiv+0x16>
1a0059c6:	Address 0x000000001a0059c6 is out of bounds.


1a0059c8 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a0059c8:	b538      	push	{r3, r4, r5, lr}
1a0059ca:	4605      	mov	r5, r0
1a0059cc:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a0059ce:	f7ff ffd7 	bl	1a005980 <Chip_ADC_GetClockIndex>
1a0059d2:	2301      	movs	r3, #1
1a0059d4:	461a      	mov	r2, r3
1a0059d6:	4619      	mov	r1, r3
1a0059d8:	f000 faa8 	bl	1a005f2c <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a0059dc:	2100      	movs	r1, #0
1a0059de:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a0059e0:	4a08      	ldr	r2, [pc, #32]	; (1a005a04 <Chip_ADC_Init+0x3c>)
1a0059e2:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a0059e4:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a0059e6:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a0059e8:	230b      	movs	r3, #11
1a0059ea:	4628      	mov	r0, r5
1a0059ec:	f7ff ffd2 	bl	1a005994 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0059f0:	0200      	lsls	r0, r0, #8
1a0059f2:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0059f6:	7920      	ldrb	r0, [r4, #4]
1a0059f8:	0440      	lsls	r0, r0, #17
1a0059fa:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a0059fe:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a005a00:	6028      	str	r0, [r5, #0]
}
1a005a02:	bd38      	pop	{r3, r4, r5, pc}
1a005a04:	00061a80 	.word	0x00061a80

1a005a08 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a005a08:	b570      	push	{r4, r5, r6, lr}
1a005a0a:	4605      	mov	r5, r0
1a005a0c:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a005a0e:	6804      	ldr	r4, [r0, #0]
1a005a10:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a005a14:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a005a18:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a005a1a:	790b      	ldrb	r3, [r1, #4]
1a005a1c:	f1c3 030b 	rsb	r3, r3, #11
1a005a20:	b2db      	uxtb	r3, r3
1a005a22:	7949      	ldrb	r1, [r1, #5]
1a005a24:	f7ff ffb6 	bl	1a005994 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a005a28:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a005a2c:	7933      	ldrb	r3, [r6, #4]
1a005a2e:	045b      	lsls	r3, r3, #17
1a005a30:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a005a34:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a005a36:	602b      	str	r3, [r5, #0]
}
1a005a38:	bd70      	pop	{r4, r5, r6, pc}

1a005a3a <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a005a3a:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a005a3c:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a005a3e:	680a      	ldr	r2, [r1, #0]
1a005a40:	f7ff ffe2 	bl	1a005a08 <Chip_ADC_SetSampleRate>
}
1a005a44:	bd08      	pop	{r3, pc}
1a005a46:	Address 0x000000001a005a46 is out of bounds.


1a005a48 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a005a48:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a005a4a:	2069      	movs	r0, #105	; 0x69
1a005a4c:	f000 faa6 	bl	1a005f9c <Chip_Clock_GetRate>
1a005a50:	4b01      	ldr	r3, [pc, #4]	; (1a005a58 <SystemCoreClockUpdate+0x10>)
1a005a52:	6018      	str	r0, [r3, #0]
}
1a005a54:	bd08      	pop	{r3, pc}
1a005a56:	bf00      	nop
1a005a58:	10004fe4 	.word	0x10004fe4

1a005a5c <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a005a5c:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a005a5e:	680b      	ldr	r3, [r1, #0]
1a005a60:	f013 0f80 	tst.w	r3, #128	; 0x80
1a005a64:	d002      	beq.n	1a005a6c <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a005a66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a005a6a:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a005a6c:	4607      	mov	r7, r0
1a005a6e:	2501      	movs	r5, #1
1a005a70:	e03a      	b.n	1a005ae8 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a005a72:	694b      	ldr	r3, [r1, #20]
1a005a74:	fb03 f302 	mul.w	r3, r3, r2
1a005a78:	fbb3 f3f5 	udiv	r3, r3, r5
1a005a7c:	e01c      	b.n	1a005ab8 <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a005a7e:	461c      	mov	r4, r3
	if (val < 0)
1a005a80:	ebb0 0c04 	subs.w	ip, r0, r4
1a005a84:	d427      	bmi.n	1a005ad6 <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a005a86:	4567      	cmp	r7, ip
1a005a88:	d906      	bls.n	1a005a98 <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a005a8a:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a005a8c:	1c77      	adds	r7, r6, #1
1a005a8e:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a005a90:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a005a92:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a005a94:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a005a96:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a005a98:	3201      	adds	r2, #1
1a005a9a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a005a9e:	dc1d      	bgt.n	1a005adc <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a005aa0:	680c      	ldr	r4, [r1, #0]
1a005aa2:	f014 0f40 	tst.w	r4, #64	; 0x40
1a005aa6:	d0e4      	beq.n	1a005a72 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a005aa8:	1c73      	adds	r3, r6, #1
1a005aaa:	fa02 fc03 	lsl.w	ip, r2, r3
1a005aae:	694b      	ldr	r3, [r1, #20]
1a005ab0:	fb03 f30c 	mul.w	r3, r3, ip
1a005ab4:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a005ab8:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a005af4 <pll_calc_divs+0x98>
1a005abc:	4563      	cmp	r3, ip
1a005abe:	d9eb      	bls.n	1a005a98 <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a005ac0:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a005af8 <pll_calc_divs+0x9c>
1a005ac4:	4563      	cmp	r3, ip
1a005ac6:	d809      	bhi.n	1a005adc <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a005ac8:	f014 0f80 	tst.w	r4, #128	; 0x80
1a005acc:	d1d7      	bne.n	1a005a7e <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a005ace:	1c74      	adds	r4, r6, #1
1a005ad0:	fa23 f404 	lsr.w	r4, r3, r4
1a005ad4:	e7d4      	b.n	1a005a80 <pll_calc_divs+0x24>
		return -val;
1a005ad6:	f1cc 0c00 	rsb	ip, ip, #0
1a005ada:	e7d4      	b.n	1a005a86 <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a005adc:	3601      	adds	r6, #1
1a005ade:	2e03      	cmp	r6, #3
1a005ae0:	dc01      	bgt.n	1a005ae6 <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a005ae2:	2201      	movs	r2, #1
1a005ae4:	e7d9      	b.n	1a005a9a <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a005ae6:	3501      	adds	r5, #1
1a005ae8:	2d04      	cmp	r5, #4
1a005aea:	dc01      	bgt.n	1a005af0 <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a005aec:	2600      	movs	r6, #0
1a005aee:	e7f6      	b.n	1a005ade <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a005af0:	bcf0      	pop	{r4, r5, r6, r7}
1a005af2:	4770      	bx	lr
1a005af4:	094c5eff 	.word	0x094c5eff
1a005af8:	1312d000 	.word	0x1312d000

1a005afc <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a005afc:	b5f0      	push	{r4, r5, r6, r7, lr}
1a005afe:	b099      	sub	sp, #100	; 0x64
1a005b00:	4605      	mov	r5, r0
1a005b02:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a005b04:	225c      	movs	r2, #92	; 0x5c
1a005b06:	2100      	movs	r1, #0
1a005b08:	a801      	add	r0, sp, #4
1a005b0a:	f001 fc16 	bl	1a00733a <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a005b0e:	2380      	movs	r3, #128	; 0x80
1a005b10:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a005b12:	6963      	ldr	r3, [r4, #20]
1a005b14:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a005b16:	7923      	ldrb	r3, [r4, #4]
1a005b18:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a005b1c:	4669      	mov	r1, sp
1a005b1e:	4628      	mov	r0, r5
1a005b20:	f7ff ff9c 	bl	1a005a5c <pll_calc_divs>
	if (pll[0].fout == freq) {
1a005b24:	9b06      	ldr	r3, [sp, #24]
1a005b26:	42ab      	cmp	r3, r5
1a005b28:	d027      	beq.n	1a005b7a <pll_get_frac+0x7e>
	if (val < 0)
1a005b2a:	1aeb      	subs	r3, r5, r3
1a005b2c:	d42e      	bmi.n	1a005b8c <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a005b2e:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a005b30:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a005b32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a005b36:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a005b38:	6963      	ldr	r3, [r4, #20]
1a005b3a:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a005b3c:	7923      	ldrb	r3, [r4, #4]
1a005b3e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a005b42:	a910      	add	r1, sp, #64	; 0x40
1a005b44:	4628      	mov	r0, r5
1a005b46:	f7ff ff89 	bl	1a005a5c <pll_calc_divs>
	if (pll[2].fout == freq) {
1a005b4a:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a005b4c:	42ab      	cmp	r3, r5
1a005b4e:	d01f      	beq.n	1a005b90 <pll_get_frac+0x94>
	if (val < 0)
1a005b50:	1aeb      	subs	r3, r5, r3
1a005b52:	d425      	bmi.n	1a005ba0 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a005b54:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a005b56:	4b2b      	ldr	r3, [pc, #172]	; (1a005c04 <pll_get_frac+0x108>)
1a005b58:	429d      	cmp	r5, r3
1a005b5a:	d923      	bls.n	1a005ba4 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a005b5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a005b5e:	1aed      	subs	r5, r5, r3
1a005b60:	d433      	bmi.n	1a005bca <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a005b62:	42ae      	cmp	r6, r5
1a005b64:	dc3b      	bgt.n	1a005bde <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a005b66:	42be      	cmp	r6, r7
1a005b68:	dc31      	bgt.n	1a005bce <pll_get_frac+0xd2>
			*ppll = pll[0];
1a005b6a:	466d      	mov	r5, sp
1a005b6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a005b6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a005b70:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a005b74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a005b78:	e006      	b.n	1a005b88 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a005b7a:	466d      	mov	r5, sp
1a005b7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a005b7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a005b80:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a005b84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a005b88:	b019      	add	sp, #100	; 0x64
1a005b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a005b8c:	425b      	negs	r3, r3
1a005b8e:	e7ce      	b.n	1a005b2e <pll_get_frac+0x32>
		*ppll = pll[2];
1a005b90:	ad10      	add	r5, sp, #64	; 0x40
1a005b92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a005b94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a005b96:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a005b9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a005b9e:	e7f3      	b.n	1a005b88 <pll_get_frac+0x8c>
		return -val;
1a005ba0:	425b      	negs	r3, r3
1a005ba2:	e7d7      	b.n	1a005b54 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a005ba4:	2340      	movs	r3, #64	; 0x40
1a005ba6:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a005ba8:	6963      	ldr	r3, [r4, #20]
1a005baa:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a005bac:	a908      	add	r1, sp, #32
1a005bae:	4628      	mov	r0, r5
1a005bb0:	f7ff ff54 	bl	1a005a5c <pll_calc_divs>
		if (pll[1].fout == freq) {
1a005bb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a005bb6:	42ab      	cmp	r3, r5
1a005bb8:	d1d0      	bne.n	1a005b5c <pll_get_frac+0x60>
			*ppll = pll[1];
1a005bba:	ad08      	add	r5, sp, #32
1a005bbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a005bbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a005bc0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a005bc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a005bc8:	e7de      	b.n	1a005b88 <pll_get_frac+0x8c>
		return -val;
1a005bca:	426d      	negs	r5, r5
1a005bcc:	e7c9      	b.n	1a005b62 <pll_get_frac+0x66>
			*ppll = pll[2];
1a005bce:	ad10      	add	r5, sp, #64	; 0x40
1a005bd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a005bd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a005bd4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a005bd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a005bdc:	e7d4      	b.n	1a005b88 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a005bde:	42af      	cmp	r7, r5
1a005be0:	db07      	blt.n	1a005bf2 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a005be2:	ad08      	add	r5, sp, #32
1a005be4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a005be6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a005be8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a005bec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a005bf0:	e7ca      	b.n	1a005b88 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a005bf2:	ad10      	add	r5, sp, #64	; 0x40
1a005bf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a005bf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a005bf8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a005bfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a005c00:	e7c2      	b.n	1a005b88 <pll_get_frac+0x8c>
1a005c02:	bf00      	nop
1a005c04:	068e7780 	.word	0x068e7780

1a005c08 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a005c08:	b430      	push	{r4, r5}
1a005c0a:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a005c0c:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a005c0e:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a005c10:	e000      	b.n	1a005c14 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a005c12:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a005c14:	281c      	cmp	r0, #28
1a005c16:	d118      	bne.n	1a005c4a <Chip_Clock_FindBaseClock+0x42>
1a005c18:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a005c1c:	0051      	lsls	r1, r2, #1
1a005c1e:	4a0c      	ldr	r2, [pc, #48]	; (1a005c50 <Chip_Clock_FindBaseClock+0x48>)
1a005c20:	440a      	add	r2, r1
1a005c22:	7914      	ldrb	r4, [r2, #4]
1a005c24:	4284      	cmp	r4, r0
1a005c26:	d010      	beq.n	1a005c4a <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a005c28:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a005c2c:	004a      	lsls	r2, r1, #1
1a005c2e:	4908      	ldr	r1, [pc, #32]	; (1a005c50 <Chip_Clock_FindBaseClock+0x48>)
1a005c30:	5a8a      	ldrh	r2, [r1, r2]
1a005c32:	42aa      	cmp	r2, r5
1a005c34:	d8ed      	bhi.n	1a005c12 <Chip_Clock_FindBaseClock+0xa>
1a005c36:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a005c3a:	0051      	lsls	r1, r2, #1
1a005c3c:	4a04      	ldr	r2, [pc, #16]	; (1a005c50 <Chip_Clock_FindBaseClock+0x48>)
1a005c3e:	440a      	add	r2, r1
1a005c40:	8852      	ldrh	r2, [r2, #2]
1a005c42:	42aa      	cmp	r2, r5
1a005c44:	d3e5      	bcc.n	1a005c12 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a005c46:	4620      	mov	r0, r4
1a005c48:	e7e4      	b.n	1a005c14 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a005c4a:	bc30      	pop	{r4, r5}
1a005c4c:	4770      	bx	lr
1a005c4e:	bf00      	nop
1a005c50:	1a00898c 	.word	0x1a00898c

1a005c54 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a005c54:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a005c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a005c5a:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a005c5c:	4a0d      	ldr	r2, [pc, #52]	; (1a005c94 <Chip_Clock_EnableCrystal+0x40>)
1a005c5e:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a005c60:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a005c64:	6992      	ldr	r2, [r2, #24]
1a005c66:	428a      	cmp	r2, r1
1a005c68:	d001      	beq.n	1a005c6e <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a005c6a:	4a0a      	ldr	r2, [pc, #40]	; (1a005c94 <Chip_Clock_EnableCrystal+0x40>)
1a005c6c:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a005c6e:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a005c72:	4a09      	ldr	r2, [pc, #36]	; (1a005c98 <Chip_Clock_EnableCrystal+0x44>)
1a005c74:	6811      	ldr	r1, [r2, #0]
1a005c76:	4a09      	ldr	r2, [pc, #36]	; (1a005c9c <Chip_Clock_EnableCrystal+0x48>)
1a005c78:	4291      	cmp	r1, r2
1a005c7a:	d901      	bls.n	1a005c80 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a005c7c:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a005c80:	4a04      	ldr	r2, [pc, #16]	; (1a005c94 <Chip_Clock_EnableCrystal+0x40>)
1a005c82:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a005c84:	9b01      	ldr	r3, [sp, #4]
1a005c86:	1e5a      	subs	r2, r3, #1
1a005c88:	9201      	str	r2, [sp, #4]
1a005c8a:	2b00      	cmp	r3, #0
1a005c8c:	d1fa      	bne.n	1a005c84 <Chip_Clock_EnableCrystal+0x30>
}
1a005c8e:	b002      	add	sp, #8
1a005c90:	4770      	bx	lr
1a005c92:	bf00      	nop
1a005c94:	40050000 	.word	0x40050000
1a005c98:	1a0088f4 	.word	0x1a0088f4
1a005c9c:	01312cff 	.word	0x01312cff

1a005ca0 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a005ca0:	3012      	adds	r0, #18
1a005ca2:	4b05      	ldr	r3, [pc, #20]	; (1a005cb8 <Chip_Clock_GetDividerSource+0x18>)
1a005ca4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a005ca8:	f010 0f01 	tst.w	r0, #1
1a005cac:	d102      	bne.n	1a005cb4 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a005cae:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a005cb2:	4770      	bx	lr
		return CLKINPUT_PD;
1a005cb4:	2011      	movs	r0, #17
}
1a005cb6:	4770      	bx	lr
1a005cb8:	40050000 	.word	0x40050000

1a005cbc <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a005cbc:	f100 0212 	add.w	r2, r0, #18
1a005cc0:	4b03      	ldr	r3, [pc, #12]	; (1a005cd0 <Chip_Clock_GetDividerDivisor+0x14>)
1a005cc2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a005cc6:	4b03      	ldr	r3, [pc, #12]	; (1a005cd4 <Chip_Clock_GetDividerDivisor+0x18>)
1a005cc8:	5c18      	ldrb	r0, [r3, r0]
}
1a005cca:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a005cce:	4770      	bx	lr
1a005cd0:	40050000 	.word	0x40050000
1a005cd4:	1a008984 	.word	0x1a008984

1a005cd8 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a005cd8:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a005cda:	2810      	cmp	r0, #16
1a005cdc:	d80a      	bhi.n	1a005cf4 <Chip_Clock_GetClockInputHz+0x1c>
1a005cde:	e8df f000 	tbb	[pc, r0]
1a005ce2:	0b44      	.short	0x0b44
1a005ce4:	0921180d 	.word	0x0921180d
1a005ce8:	2d2a2724 	.word	0x2d2a2724
1a005cec:	34300909 	.word	0x34300909
1a005cf0:	3c38      	.short	0x3c38
1a005cf2:	40          	.byte	0x40
1a005cf3:	00          	.byte	0x00
	uint32_t rate = 0;
1a005cf4:	2000      	movs	r0, #0
1a005cf6:	e03a      	b.n	1a005d6e <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a005cf8:	481e      	ldr	r0, [pc, #120]	; (1a005d74 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a005cfa:	e038      	b.n	1a005d6e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a005cfc:	4b1e      	ldr	r3, [pc, #120]	; (1a005d78 <Chip_Clock_GetClockInputHz+0xa0>)
1a005cfe:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a005d02:	f003 0307 	and.w	r3, r3, #7
1a005d06:	2b04      	cmp	r3, #4
1a005d08:	d001      	beq.n	1a005d0e <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a005d0a:	481c      	ldr	r0, [pc, #112]	; (1a005d7c <Chip_Clock_GetClockInputHz+0xa4>)
1a005d0c:	e02f      	b.n	1a005d6e <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a005d0e:	2000      	movs	r0, #0
1a005d10:	e02d      	b.n	1a005d6e <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a005d12:	4b19      	ldr	r3, [pc, #100]	; (1a005d78 <Chip_Clock_GetClockInputHz+0xa0>)
1a005d14:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a005d18:	f003 0307 	and.w	r3, r3, #7
1a005d1c:	2b04      	cmp	r3, #4
1a005d1e:	d027      	beq.n	1a005d70 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a005d20:	4816      	ldr	r0, [pc, #88]	; (1a005d7c <Chip_Clock_GetClockInputHz+0xa4>)
1a005d22:	e024      	b.n	1a005d6e <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a005d24:	4b16      	ldr	r3, [pc, #88]	; (1a005d80 <Chip_Clock_GetClockInputHz+0xa8>)
1a005d26:	6818      	ldr	r0, [r3, #0]
		break;
1a005d28:	e021      	b.n	1a005d6e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a005d2a:	4b16      	ldr	r3, [pc, #88]	; (1a005d84 <Chip_Clock_GetClockInputHz+0xac>)
1a005d2c:	6818      	ldr	r0, [r3, #0]
		break;
1a005d2e:	e01e      	b.n	1a005d6e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a005d30:	4b15      	ldr	r3, [pc, #84]	; (1a005d88 <Chip_Clock_GetClockInputHz+0xb0>)
1a005d32:	6818      	ldr	r0, [r3, #0]
		break;
1a005d34:	e01b      	b.n	1a005d6e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a005d36:	4b14      	ldr	r3, [pc, #80]	; (1a005d88 <Chip_Clock_GetClockInputHz+0xb0>)
1a005d38:	6858      	ldr	r0, [r3, #4]
		break;
1a005d3a:	e018      	b.n	1a005d6e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a005d3c:	f000 f868 	bl	1a005e10 <Chip_Clock_GetMainPLLHz>
		break;
1a005d40:	e015      	b.n	1a005d6e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a005d42:	2100      	movs	r1, #0
1a005d44:	f000 f89a 	bl	1a005e7c <Chip_Clock_GetDivRate>
		break;
1a005d48:	e011      	b.n	1a005d6e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a005d4a:	2101      	movs	r1, #1
1a005d4c:	f000 f896 	bl	1a005e7c <Chip_Clock_GetDivRate>
		break;
1a005d50:	e00d      	b.n	1a005d6e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a005d52:	2102      	movs	r1, #2
1a005d54:	f000 f892 	bl	1a005e7c <Chip_Clock_GetDivRate>
		break;
1a005d58:	e009      	b.n	1a005d6e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a005d5a:	2103      	movs	r1, #3
1a005d5c:	f000 f88e 	bl	1a005e7c <Chip_Clock_GetDivRate>
		break;
1a005d60:	e005      	b.n	1a005d6e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a005d62:	2104      	movs	r1, #4
1a005d64:	f000 f88a 	bl	1a005e7c <Chip_Clock_GetDivRate>
		break;
1a005d68:	e001      	b.n	1a005d6e <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a005d6a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a005d6e:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a005d70:	4806      	ldr	r0, [pc, #24]	; (1a005d8c <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a005d72:	e7fc      	b.n	1a005d6e <Chip_Clock_GetClockInputHz+0x96>
1a005d74:	00b71b00 	.word	0x00b71b00
1a005d78:	40043000 	.word	0x40043000
1a005d7c:	017d7840 	.word	0x017d7840
1a005d80:	1a0088c8 	.word	0x1a0088c8
1a005d84:	1a0088f4 	.word	0x1a0088f4
1a005d88:	10004c08 	.word	0x10004c08
1a005d8c:	02faf080 	.word	0x02faf080

1a005d90 <Chip_Clock_CalcMainPLLValue>:
{
1a005d90:	b538      	push	{r3, r4, r5, lr}
1a005d92:	4605      	mov	r5, r0
1a005d94:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a005d96:	7908      	ldrb	r0, [r1, #4]
1a005d98:	f7ff ff9e 	bl	1a005cd8 <Chip_Clock_GetClockInputHz>
1a005d9c:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a005d9e:	4b19      	ldr	r3, [pc, #100]	; (1a005e04 <Chip_Clock_CalcMainPLLValue+0x74>)
1a005da0:	442b      	add	r3, r5
1a005da2:	4a19      	ldr	r2, [pc, #100]	; (1a005e08 <Chip_Clock_CalcMainPLLValue+0x78>)
1a005da4:	4293      	cmp	r3, r2
1a005da6:	d821      	bhi.n	1a005dec <Chip_Clock_CalcMainPLLValue+0x5c>
1a005da8:	b318      	cbz	r0, 1a005df2 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a005daa:	2380      	movs	r3, #128	; 0x80
1a005dac:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a005dae:	2300      	movs	r3, #0
1a005db0:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a005db2:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a005db4:	fbb5 f3f0 	udiv	r3, r5, r0
1a005db8:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a005dba:	4a14      	ldr	r2, [pc, #80]	; (1a005e0c <Chip_Clock_CalcMainPLLValue+0x7c>)
1a005dbc:	4295      	cmp	r5, r2
1a005dbe:	d903      	bls.n	1a005dc8 <Chip_Clock_CalcMainPLLValue+0x38>
1a005dc0:	fb03 f000 	mul.w	r0, r3, r0
1a005dc4:	42a8      	cmp	r0, r5
1a005dc6:	d007      	beq.n	1a005dd8 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a005dc8:	4621      	mov	r1, r4
1a005dca:	4628      	mov	r0, r5
1a005dcc:	f7ff fe96 	bl	1a005afc <pll_get_frac>
		if (!ppll->nsel) {
1a005dd0:	68a3      	ldr	r3, [r4, #8]
1a005dd2:	b18b      	cbz	r3, 1a005df8 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a005dd4:	3b01      	subs	r3, #1
1a005dd6:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a005dd8:	6923      	ldr	r3, [r4, #16]
1a005dda:	b183      	cbz	r3, 1a005dfe <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a005ddc:	68e2      	ldr	r2, [r4, #12]
1a005dde:	b10a      	cbz	r2, 1a005de4 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a005de0:	3a01      	subs	r2, #1
1a005de2:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a005de4:	3b01      	subs	r3, #1
1a005de6:	6123      	str	r3, [r4, #16]
	return 0;
1a005de8:	2000      	movs	r0, #0
}
1a005dea:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a005dec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005df0:	e7fb      	b.n	1a005dea <Chip_Clock_CalcMainPLLValue+0x5a>
1a005df2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005df6:	e7f8      	b.n	1a005dea <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a005df8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005dfc:	e7f5      	b.n	1a005dea <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a005dfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005e02:	e7f2      	b.n	1a005dea <Chip_Clock_CalcMainPLLValue+0x5a>
1a005e04:	ff6b3a10 	.word	0xff6b3a10
1a005e08:	0b940510 	.word	0x0b940510
1a005e0c:	094c5eff 	.word	0x094c5eff

1a005e10 <Chip_Clock_GetMainPLLHz>:
{
1a005e10:	b530      	push	{r4, r5, lr}
1a005e12:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a005e14:	4d17      	ldr	r5, [pc, #92]	; (1a005e74 <Chip_Clock_GetMainPLLHz+0x64>)
1a005e16:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a005e18:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a005e1c:	f7ff ff5c 	bl	1a005cd8 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a005e20:	4b15      	ldr	r3, [pc, #84]	; (1a005e78 <Chip_Clock_GetMainPLLHz+0x68>)
1a005e22:	681b      	ldr	r3, [r3, #0]
1a005e24:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a005e26:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a005e28:	f013 0f01 	tst.w	r3, #1
1a005e2c:	d020      	beq.n	1a005e70 <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a005e2e:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a005e32:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a005e36:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a005e3a:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a005e3e:	3301      	adds	r3, #1
	n = nsel + 1;
1a005e40:	3201      	adds	r2, #1
	p = ptab[psel];
1a005e42:	f10d 0c08 	add.w	ip, sp, #8
1a005e46:	4461      	add	r1, ip
1a005e48:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a005e4c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a005e50:	d108      	bne.n	1a005e64 <Chip_Clock_GetMainPLLHz+0x54>
1a005e52:	b93d      	cbnz	r5, 1a005e64 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a005e54:	0049      	lsls	r1, r1, #1
1a005e56:	fbb3 f3f1 	udiv	r3, r3, r1
1a005e5a:	fbb0 f0f2 	udiv	r0, r0, r2
1a005e5e:	fb00 f003 	mul.w	r0, r0, r3
1a005e62:	e003      	b.n	1a005e6c <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a005e64:	fbb0 f0f2 	udiv	r0, r0, r2
1a005e68:	fb03 f000 	mul.w	r0, r3, r0
}
1a005e6c:	b003      	add	sp, #12
1a005e6e:	bd30      	pop	{r4, r5, pc}
		return 0;
1a005e70:	2000      	movs	r0, #0
1a005e72:	e7fb      	b.n	1a005e6c <Chip_Clock_GetMainPLLHz+0x5c>
1a005e74:	40050000 	.word	0x40050000
1a005e78:	1a008980 	.word	0x1a008980

1a005e7c <Chip_Clock_GetDivRate>:
{
1a005e7c:	b538      	push	{r3, r4, r5, lr}
1a005e7e:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a005e80:	4608      	mov	r0, r1
1a005e82:	f7ff ff0d 	bl	1a005ca0 <Chip_Clock_GetDividerSource>
1a005e86:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a005e88:	4620      	mov	r0, r4
1a005e8a:	f7ff ff17 	bl	1a005cbc <Chip_Clock_GetDividerDivisor>
1a005e8e:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a005e90:	4628      	mov	r0, r5
1a005e92:	f7ff ff21 	bl	1a005cd8 <Chip_Clock_GetClockInputHz>
1a005e96:	3401      	adds	r4, #1
}
1a005e98:	fbb0 f0f4 	udiv	r0, r0, r4
1a005e9c:	bd38      	pop	{r3, r4, r5, pc}
1a005e9e:	Address 0x000000001a005e9e is out of bounds.


1a005ea0 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a005ea0:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a005ea2:	f100 0416 	add.w	r4, r0, #22
1a005ea6:	00a4      	lsls	r4, r4, #2
1a005ea8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a005eac:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a005eb0:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a005eb2:	281b      	cmp	r0, #27
1a005eb4:	d813      	bhi.n	1a005ede <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a005eb6:	2911      	cmp	r1, #17
1a005eb8:	d01a      	beq.n	1a005ef0 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a005eba:	4d0e      	ldr	r5, [pc, #56]	; (1a005ef4 <Chip_Clock_SetBaseClock+0x54>)
1a005ebc:	4025      	ands	r5, r4

			if (autoblocken) {
1a005ebe:	b10a      	cbz	r2, 1a005ec4 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a005ec0:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a005ec4:	b10b      	cbz	r3, 1a005eca <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a005ec6:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a005eca:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a005ece:	3016      	adds	r0, #22
1a005ed0:	0080      	lsls	r0, r0, #2
1a005ed2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a005ed6:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a005eda:	6045      	str	r5, [r0, #4]
1a005edc:	e008      	b.n	1a005ef0 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a005ede:	f044 0401 	orr.w	r4, r4, #1
1a005ee2:	3016      	adds	r0, #22
1a005ee4:	0080      	lsls	r0, r0, #2
1a005ee6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a005eea:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a005eee:	6044      	str	r4, [r0, #4]
	}
}
1a005ef0:	bc30      	pop	{r4, r5}
1a005ef2:	4770      	bx	lr
1a005ef4:	e0fff7fe 	.word	0xe0fff7fe

1a005ef8 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a005ef8:	281b      	cmp	r0, #27
1a005efa:	d80c      	bhi.n	1a005f16 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a005efc:	3016      	adds	r0, #22
1a005efe:	0080      	lsls	r0, r0, #2
1a005f00:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a005f04:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a005f08:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a005f0a:	f010 0f01 	tst.w	r0, #1
1a005f0e:	d104      	bne.n	1a005f1a <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a005f10:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a005f14:	4770      	bx	lr
		return CLKINPUT_PD;
1a005f16:	2011      	movs	r0, #17
1a005f18:	4770      	bx	lr
		return CLKINPUT_PD;
1a005f1a:	2011      	movs	r0, #17
}
1a005f1c:	4770      	bx	lr

1a005f1e <Chip_Clock_GetBaseClocktHz>:
{
1a005f1e:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a005f20:	f7ff ffea 	bl	1a005ef8 <Chip_Clock_GetBaseClock>
1a005f24:	f7ff fed8 	bl	1a005cd8 <Chip_Clock_GetClockInputHz>
}
1a005f28:	bd08      	pop	{r3, pc}
1a005f2a:	Address 0x000000001a005f2a is out of bounds.


1a005f2c <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a005f2c:	b971      	cbnz	r1, 1a005f4c <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a005f2e:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a005f30:	b10a      	cbz	r2, 1a005f36 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a005f32:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a005f36:	2b02      	cmp	r3, #2
1a005f38:	d00a      	beq.n	1a005f50 <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a005f3a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a005f3e:	d30a      	bcc.n	1a005f56 <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a005f40:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a005f44:	4b06      	ldr	r3, [pc, #24]	; (1a005f60 <Chip_Clock_EnableOpts+0x34>)
1a005f46:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a005f4a:	4770      	bx	lr
		reg |= (1 << 1);
1a005f4c:	2103      	movs	r1, #3
1a005f4e:	e7ef      	b.n	1a005f30 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a005f50:	f041 0120 	orr.w	r1, r1, #32
1a005f54:	e7f1      	b.n	1a005f3a <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a005f56:	3020      	adds	r0, #32
1a005f58:	4b02      	ldr	r3, [pc, #8]	; (1a005f64 <Chip_Clock_EnableOpts+0x38>)
1a005f5a:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a005f5e:	4770      	bx	lr
1a005f60:	40052000 	.word	0x40052000
1a005f64:	40051000 	.word	0x40051000

1a005f68 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a005f68:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a005f6c:	d309      	bcc.n	1a005f82 <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a005f6e:	4a09      	ldr	r2, [pc, #36]	; (1a005f94 <Chip_Clock_Enable+0x2c>)
1a005f70:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a005f74:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a005f78:	f043 0301 	orr.w	r3, r3, #1
1a005f7c:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a005f80:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a005f82:	4a05      	ldr	r2, [pc, #20]	; (1a005f98 <Chip_Clock_Enable+0x30>)
1a005f84:	3020      	adds	r0, #32
1a005f86:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a005f8a:	f043 0301 	orr.w	r3, r3, #1
1a005f8e:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a005f92:	4770      	bx	lr
1a005f94:	40052000 	.word	0x40052000
1a005f98:	40051000 	.word	0x40051000

1a005f9c <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a005f9c:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a005f9e:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a005fa2:	d309      	bcc.n	1a005fb8 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a005fa4:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a005fa8:	4a0d      	ldr	r2, [pc, #52]	; (1a005fe0 <Chip_Clock_GetRate+0x44>)
1a005faa:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a005fae:	f014 0f01 	tst.w	r4, #1
1a005fb2:	d107      	bne.n	1a005fc4 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a005fb4:	2000      	movs	r0, #0
	}

	return rate;
}
1a005fb6:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a005fb8:	f100 0320 	add.w	r3, r0, #32
1a005fbc:	4a09      	ldr	r2, [pc, #36]	; (1a005fe4 <Chip_Clock_GetRate+0x48>)
1a005fbe:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a005fc2:	e7f4      	b.n	1a005fae <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a005fc4:	f7ff fe20 	bl	1a005c08 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a005fc8:	f7ff ffa9 	bl	1a005f1e <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a005fcc:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a005fd0:	d103      	bne.n	1a005fda <Chip_Clock_GetRate+0x3e>
			div = 1;
1a005fd2:	2301      	movs	r3, #1
		rate = rate / div;
1a005fd4:	fbb0 f0f3 	udiv	r0, r0, r3
1a005fd8:	e7ed      	b.n	1a005fb6 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a005fda:	2302      	movs	r3, #2
1a005fdc:	e7fa      	b.n	1a005fd4 <Chip_Clock_GetRate+0x38>
1a005fde:	bf00      	nop
1a005fe0:	40052000 	.word	0x40052000
1a005fe4:	40051000 	.word	0x40051000

1a005fe8 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a005fe8:	b570      	push	{r4, r5, r6, lr}
1a005fea:	b08a      	sub	sp, #40	; 0x28
1a005fec:	4605      	mov	r5, r0
1a005fee:	460e      	mov	r6, r1
1a005ff0:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a005ff2:	f24c 3350 	movw	r3, #50000	; 0xc350
1a005ff6:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a005ff8:	2806      	cmp	r0, #6
1a005ffa:	d018      	beq.n	1a00602e <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a005ffc:	2300      	movs	r3, #0
1a005ffe:	2201      	movs	r2, #1
1a006000:	4629      	mov	r1, r5
1a006002:	2004      	movs	r0, #4
1a006004:	f7ff ff4c 	bl	1a005ea0 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a006008:	4a4a      	ldr	r2, [pc, #296]	; (1a006134 <Chip_SetupCoreClock+0x14c>)
1a00600a:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a00600c:	f043 0301 	orr.w	r3, r3, #1
1a006010:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a006012:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a006016:	a901      	add	r1, sp, #4
1a006018:	4630      	mov	r0, r6
1a00601a:	f7ff feb9 	bl	1a005d90 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a00601e:	4b46      	ldr	r3, [pc, #280]	; (1a006138 <Chip_SetupCoreClock+0x150>)
1a006020:	429e      	cmp	r6, r3
1a006022:	d916      	bls.n	1a006052 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a006024:	9b01      	ldr	r3, [sp, #4]
1a006026:	f013 0f40 	tst.w	r3, #64	; 0x40
1a00602a:	d003      	beq.n	1a006034 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a00602c:	e7fe      	b.n	1a00602c <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a00602e:	f7ff fe11 	bl	1a005c54 <Chip_Clock_EnableCrystal>
1a006032:	e7e3      	b.n	1a005ffc <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a006034:	f013 0f80 	tst.w	r3, #128	; 0x80
1a006038:	d005      	beq.n	1a006046 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a00603a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00603e:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a006040:	2500      	movs	r5, #0
			direct = 1;
1a006042:	2601      	movs	r6, #1
1a006044:	e007      	b.n	1a006056 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a006046:	9b04      	ldr	r3, [sp, #16]
1a006048:	3301      	adds	r3, #1
1a00604a:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a00604c:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a00604e:	2600      	movs	r6, #0
1a006050:	e001      	b.n	1a006056 <Chip_SetupCoreClock+0x6e>
1a006052:	2500      	movs	r5, #0
1a006054:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a006056:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00605a:	9b01      	ldr	r3, [sp, #4]
1a00605c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a006060:	9a05      	ldr	r2, [sp, #20]
1a006062:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a006066:	9a03      	ldr	r2, [sp, #12]
1a006068:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00606c:	9a04      	ldr	r2, [sp, #16]
1a00606e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a006072:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a006076:	4a2f      	ldr	r2, [pc, #188]	; (1a006134 <Chip_SetupCoreClock+0x14c>)
1a006078:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a00607a:	4b2e      	ldr	r3, [pc, #184]	; (1a006134 <Chip_SetupCoreClock+0x14c>)
1a00607c:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a00607e:	f013 0f01 	tst.w	r3, #1
1a006082:	d0fa      	beq.n	1a00607a <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a006084:	2300      	movs	r3, #0
1a006086:	2201      	movs	r2, #1
1a006088:	2109      	movs	r1, #9
1a00608a:	2004      	movs	r0, #4
1a00608c:	f7ff ff08 	bl	1a005ea0 <Chip_Clock_SetBaseClock>

	if (direct) {
1a006090:	b306      	cbz	r6, 1a0060d4 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a006092:	f24c 3350 	movw	r3, #50000	; 0xc350
1a006096:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a006098:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00609a:	1e5a      	subs	r2, r3, #1
1a00609c:	9209      	str	r2, [sp, #36]	; 0x24
1a00609e:	2b00      	cmp	r3, #0
1a0060a0:	d1fa      	bne.n	1a006098 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a0060a2:	9b01      	ldr	r3, [sp, #4]
1a0060a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0060a8:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0060aa:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0060ae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0060b2:	9a05      	ldr	r2, [sp, #20]
1a0060b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0060b8:	9a03      	ldr	r2, [sp, #12]
1a0060ba:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0060be:	9a04      	ldr	r2, [sp, #16]
1a0060c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0060c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0060c8:	4a1a      	ldr	r2, [pc, #104]	; (1a006134 <Chip_SetupCoreClock+0x14c>)
1a0060ca:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a0060cc:	2c00      	cmp	r4, #0
1a0060ce:	d12e      	bne.n	1a00612e <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a0060d0:	b00a      	add	sp, #40	; 0x28
1a0060d2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a0060d4:	2d00      	cmp	r5, #0
1a0060d6:	d0f9      	beq.n	1a0060cc <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0060d8:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0060dc:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a0060de:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0060e0:	1e5a      	subs	r2, r3, #1
1a0060e2:	9209      	str	r2, [sp, #36]	; 0x24
1a0060e4:	2b00      	cmp	r3, #0
1a0060e6:	d1fa      	bne.n	1a0060de <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a0060e8:	9b04      	ldr	r3, [sp, #16]
1a0060ea:	1e5a      	subs	r2, r3, #1
1a0060ec:	9204      	str	r2, [sp, #16]
1a0060ee:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a0060f2:	9b01      	ldr	r3, [sp, #4]
1a0060f4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a0060f8:	9905      	ldr	r1, [sp, #20]
1a0060fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0060fe:	9903      	ldr	r1, [sp, #12]
1a006100:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a006104:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a006108:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00610c:	4a09      	ldr	r2, [pc, #36]	; (1a006134 <Chip_SetupCoreClock+0x14c>)
1a00610e:	6453      	str	r3, [r2, #68]	; 0x44
1a006110:	e7dc      	b.n	1a0060cc <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a006112:	480a      	ldr	r0, [pc, #40]	; (1a00613c <Chip_SetupCoreClock+0x154>)
1a006114:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a006118:	78cb      	ldrb	r3, [r1, #3]
1a00611a:	788a      	ldrb	r2, [r1, #2]
1a00611c:	7849      	ldrb	r1, [r1, #1]
1a00611e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a006122:	f7ff febd 	bl	1a005ea0 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a006126:	3401      	adds	r4, #1
1a006128:	2c11      	cmp	r4, #17
1a00612a:	d9f2      	bls.n	1a006112 <Chip_SetupCoreClock+0x12a>
1a00612c:	e7d0      	b.n	1a0060d0 <Chip_SetupCoreClock+0xe8>
1a00612e:	2400      	movs	r4, #0
1a006130:	e7fa      	b.n	1a006128 <Chip_SetupCoreClock+0x140>
1a006132:	bf00      	nop
1a006134:	40050000 	.word	0x40050000
1a006138:	068e7780 	.word	0x068e7780
1a00613c:	1a0089f8 	.word	0x1a0089f8

1a006140 <setClkDiv>:
 * Private functions
 ****************************************************************************/

/* Setup EEPROM clock */
STATIC void setClkDiv(LPC_EEPROM_T *pEEPROM)
{
1a006140:	b510      	push	{r4, lr}
1a006142:	4604      	mov	r4, r0
	uint32_t clk;

	/* Setup EEPROM timing to 375KHz based on PCLK rate */
	clk = Chip_Clock_GetRate(CLK_MX_EEPROM);
1a006144:	2074      	movs	r0, #116	; 0x74
1a006146:	f7ff ff29 	bl	1a005f9c <Chip_Clock_GetRate>

	/* Set EEPROM clock divide value*/
	pEEPROM->CLKDIV = clk / EEPROM_CLOCK_DIV - 1;
1a00614a:	4b03      	ldr	r3, [pc, #12]	; (1a006158 <setClkDiv+0x18>)
1a00614c:	fba3 3000 	umull	r3, r0, r3, r0
1a006150:	0c40      	lsrs	r0, r0, #17
1a006152:	3801      	subs	r0, #1
1a006154:	6160      	str	r0, [r4, #20]
}
1a006156:	bd10      	pop	{r4, pc}
1a006158:	165e9f81 	.word	0x165e9f81

1a00615c <Chip_EEPROM_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the EEPROM peripheral with specified parameter */
void Chip_EEPROM_Init(LPC_EEPROM_T *pEEPROM)
{
1a00615c:	b510      	push	{r4, lr}
1a00615e:	4604      	mov	r4, r0
	pEEPROM->PWRDWN = 0;
1a006160:	2300      	movs	r3, #0
1a006162:	6183      	str	r3, [r0, #24]
	/* Disable EEPROM power down mode */
	Chip_EEPROM_DisablePowerDown(pEEPROM);
	setClkDiv(pEEPROM);
1a006164:	f7ff ffec 	bl	1a006140 <setClkDiv>
 * @note    Bits 7:0 represents wait state for Read Phase 2 and
 *          Bits 15:8 represents wait state for Read Phase1
 */
STATIC INLINE void Chip_EEPROM_SetReadWaitState(LPC_EEPROM_T *pEEPROM, uint32_t ws)
{
	pEEPROM->RWSTATE = ws;
1a006168:	2358      	movs	r3, #88	; 0x58
1a00616a:	60a3      	str	r3, [r4, #8]
 *          Bits 15:8 represents wait state for Phase2, and
 *          Bits 23:16 represents wait state for Phase1
 */
STATIC INLINE void Chip_EEPROM_SetWaitState(LPC_EEPROM_T *pEEPROM, uint32_t ws)
{
	pEEPROM->WSTATE = ws;
1a00616c:	f240 2332 	movw	r3, #562	; 0x232
1a006170:	6123      	str	r3, [r4, #16]
	setWaitState(pEEPROM);
}
1a006172:	bd10      	pop	{r4, pc}

1a006174 <Chip_EEPROM_WaitForIntStatus>:
 * @param	pEEPROM	: Pointer to EEPROM peripheral block structure
 * @return	OR-ed bits value of EEPROM_INT_*
 */
STATIC INLINE uint32_t Chip_EEPROM_GetIntStatus(LPC_EEPROM_T *pEEPROM)
{
	return pEEPROM->INTSTAT;
1a006174:	f8d0 3fe0 	ldr.w	r3, [r0, #4064]	; 0xfe0
void Chip_EEPROM_WaitForIntStatus(LPC_EEPROM_T *pEEPROM, uint32_t mask)
{
	uint32_t status;
	while (1) {
		status = Chip_EEPROM_GetIntStatus(pEEPROM);
		if ((status & mask) == mask) {
1a006178:	ea31 0303 	bics.w	r3, r1, r3
1a00617c:	d1fa      	bne.n	1a006174 <Chip_EEPROM_WaitForIntStatus>
 * @param	mask	: Interrupt mask (or-ed bits value of EEPROM_INT_*)
 * @return	Nothing
 */
STATIC INLINE void Chip_EEPROM_ClearIntStatus(LPC_EEPROM_T *pEEPROM, uint32_t mask)
{
	pEEPROM->INTSTATCLR =  mask;
1a00617e:	f8c0 1fe8 	str.w	r1, [r0, #4072]	; 0xfe8
			break;
		}
	}
	Chip_EEPROM_ClearIntStatus(pEEPROM, mask);
}
1a006182:	4770      	bx	lr

1a006184 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a006184:	4770      	bx	lr

1a006186 <SSP_Write2BFifo>:
 * Private functions
 ****************************************************************************/

STATIC void SSP_Write2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	if (xf_setup->tx_data) {
1a006186:	680b      	ldr	r3, [r1, #0]
1a006188:	b133      	cbz	r3, 1a006198 <SSP_Write2BFifo+0x12>
		Chip_SSP_SendFrame(pSSP, (*(uint16_t *) ((uint32_t) xf_setup->tx_data +
												 xf_setup->tx_cnt)));
1a00618a:	684a      	ldr	r2, [r1, #4]
		Chip_SSP_SendFrame(pSSP, (*(uint16_t *) ((uint32_t) xf_setup->tx_data +
1a00618c:	5a9b      	ldrh	r3, [r3, r2]
	pSSP->DR = SSP_DR_BITMASK(tx_data);
1a00618e:	6083      	str	r3, [r0, #8]
	}
	else {
		Chip_SSP_SendFrame(pSSP, 0xFFFF);
	}

	xf_setup->tx_cnt += 2;
1a006190:	684b      	ldr	r3, [r1, #4]
1a006192:	3302      	adds	r3, #2
1a006194:	604b      	str	r3, [r1, #4]
}
1a006196:	4770      	bx	lr
1a006198:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a00619c:	6083      	str	r3, [r0, #8]
1a00619e:	e7f7      	b.n	1a006190 <SSP_Write2BFifo+0xa>

1a0061a0 <SSP_Write1BFifo>:

/** SSP macro: write 1 bytes to FIFO buffer */
STATIC void SSP_Write1BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	if (xf_setup->tx_data) {
1a0061a0:	680b      	ldr	r3, [r1, #0]
1a0061a2:	b133      	cbz	r3, 1a0061b2 <SSP_Write1BFifo+0x12>
		Chip_SSP_SendFrame(pSSP, (*(uint8_t *) ((uint32_t) xf_setup->tx_data + xf_setup->tx_cnt)));
1a0061a4:	684a      	ldr	r2, [r1, #4]
1a0061a6:	5c9b      	ldrb	r3, [r3, r2]
1a0061a8:	6083      	str	r3, [r0, #8]
	}
	else {
		Chip_SSP_SendFrame(pSSP, 0xFF);
	}

	xf_setup->tx_cnt++;
1a0061aa:	684b      	ldr	r3, [r1, #4]
1a0061ac:	3301      	adds	r3, #1
1a0061ae:	604b      	str	r3, [r1, #4]
}
1a0061b0:	4770      	bx	lr
1a0061b2:	23ff      	movs	r3, #255	; 0xff
1a0061b4:	6083      	str	r3, [r0, #8]
1a0061b6:	e7f8      	b.n	1a0061aa <SSP_Write1BFifo+0xa>

1a0061b8 <SSP_Read2BFifo>:
	return (pSSP->SR & Stat) ? SET : RESET;
1a0061b8:	68c3      	ldr	r3, [r0, #12]
/** SSP macro: read 1 bytes from FIFO buffer */
STATIC void SSP_Read2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a0061ba:	f013 0f04 	tst.w	r3, #4
1a0061be:	d01b      	beq.n	1a0061f8 <SSP_Read2BFifo+0x40>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a0061c0:	68ca      	ldr	r2, [r1, #12]
1a0061c2:	690b      	ldr	r3, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a0061c4:	429a      	cmp	r2, r3
1a0061c6:	d216      	bcs.n	1a0061f6 <SSP_Read2BFifo+0x3e>
{
1a0061c8:	b410      	push	{r4}
1a0061ca:	e00a      	b.n	1a0061e2 <SSP_Read2BFifo+0x2a>
		rDat = Chip_SSP_ReceiveFrame(pSSP);
		if (xf_setup->rx_data) {
			*(uint16_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
		}

		xf_setup->rx_cnt += 2;
1a0061cc:	68cb      	ldr	r3, [r1, #12]
1a0061ce:	3302      	adds	r3, #2
1a0061d0:	60cb      	str	r3, [r1, #12]
1a0061d2:	68c3      	ldr	r3, [r0, #12]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a0061d4:	f013 0f04 	tst.w	r3, #4
1a0061d8:	d00a      	beq.n	1a0061f0 <SSP_Read2BFifo+0x38>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a0061da:	68ca      	ldr	r2, [r1, #12]
1a0061dc:	690b      	ldr	r3, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a0061de:	429a      	cmp	r2, r3
1a0061e0:	d206      	bcs.n	1a0061f0 <SSP_Read2BFifo+0x38>
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a0061e2:	6883      	ldr	r3, [r0, #8]
1a0061e4:	b29b      	uxth	r3, r3
		if (xf_setup->rx_data) {
1a0061e6:	688c      	ldr	r4, [r1, #8]
1a0061e8:	2c00      	cmp	r4, #0
1a0061ea:	d0ef      	beq.n	1a0061cc <SSP_Read2BFifo+0x14>
			*(uint16_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
1a0061ec:	52a3      	strh	r3, [r4, r2]
1a0061ee:	e7ed      	b.n	1a0061cc <SSP_Read2BFifo+0x14>
	}
}
1a0061f0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0061f4:	4770      	bx	lr
1a0061f6:	4770      	bx	lr
1a0061f8:	4770      	bx	lr

1a0061fa <SSP_Read1BFifo>:
	return (pSSP->SR & Stat) ? SET : RESET;
1a0061fa:	68c3      	ldr	r3, [r0, #12]
/** SSP macro: read 2 bytes from FIFO buffer */
STATIC void SSP_Read1BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a0061fc:	f013 0f04 	tst.w	r3, #4
1a006200:	d01a      	beq.n	1a006238 <SSP_Read1BFifo+0x3e>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a006202:	68cb      	ldr	r3, [r1, #12]
1a006204:	690a      	ldr	r2, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a006206:	4293      	cmp	r3, r2
1a006208:	d215      	bcs.n	1a006236 <SSP_Read1BFifo+0x3c>
{
1a00620a:	b410      	push	{r4}
1a00620c:	e00a      	b.n	1a006224 <SSP_Read1BFifo+0x2a>
		rDat = Chip_SSP_ReceiveFrame(pSSP);
		if (xf_setup->rx_data) {
			*(uint8_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
		}

		xf_setup->rx_cnt++;
1a00620e:	68cb      	ldr	r3, [r1, #12]
1a006210:	3301      	adds	r3, #1
1a006212:	60cb      	str	r3, [r1, #12]
1a006214:	68c3      	ldr	r3, [r0, #12]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a006216:	f013 0f04 	tst.w	r3, #4
1a00621a:	d009      	beq.n	1a006230 <SSP_Read1BFifo+0x36>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a00621c:	68cb      	ldr	r3, [r1, #12]
1a00621e:	690a      	ldr	r2, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a006220:	4293      	cmp	r3, r2
1a006222:	d205      	bcs.n	1a006230 <SSP_Read1BFifo+0x36>
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a006224:	6884      	ldr	r4, [r0, #8]
		if (xf_setup->rx_data) {
1a006226:	688a      	ldr	r2, [r1, #8]
1a006228:	2a00      	cmp	r2, #0
1a00622a:	d0f0      	beq.n	1a00620e <SSP_Read1BFifo+0x14>
			*(uint8_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
1a00622c:	54d4      	strb	r4, [r2, r3]
1a00622e:	e7ee      	b.n	1a00620e <SSP_Read1BFifo+0x14>
	}
}
1a006230:	f85d 4b04 	ldr.w	r4, [sp], #4
1a006234:	4770      	bx	lr
1a006236:	4770      	bx	lr
1a006238:	4770      	bx	lr
1a00623a:	Address 0x000000001a00623a is out of bounds.


1a00623c <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a00623c:	4b03      	ldr	r3, [pc, #12]	; (1a00624c <Chip_SSP_GetClockIndex+0x10>)
1a00623e:	4298      	cmp	r0, r3
1a006240:	d001      	beq.n	1a006246 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a006242:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a006244:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a006246:	20a5      	movs	r0, #165	; 0xa5
1a006248:	4770      	bx	lr
1a00624a:	bf00      	nop
1a00624c:	400c5000 	.word	0x400c5000

1a006250 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a006250:	4b04      	ldr	r3, [pc, #16]	; (1a006264 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a006252:	4298      	cmp	r0, r3
1a006254:	d002      	beq.n	1a00625c <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a006256:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a00625a:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a00625c:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a006260:	4770      	bx	lr
1a006262:	bf00      	nop
1a006264:	400c5000 	.word	0x400c5000

1a006268 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a006268:	6803      	ldr	r3, [r0, #0]
1a00626a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a00626e:	0209      	lsls	r1, r1, #8
1a006270:	b289      	uxth	r1, r1
1a006272:	4319      	orrs	r1, r3
1a006274:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a006276:	6102      	str	r2, [r0, #16]
}
1a006278:	4770      	bx	lr

1a00627a <Chip_SSP_RWFrames_Blocking>:

/* SSP Polling Read/Write in blocking mode */
uint32_t Chip_SSP_RWFrames_Blocking(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
1a00627a:	b538      	push	{r3, r4, r5, lr}
1a00627c:	4604      	mov	r4, r0
1a00627e:	460d      	mov	r5, r1
	return (pSSP->SR & Stat) ? SET : RESET;
1a006280:	68e3      	ldr	r3, [r4, #12]
	/* Clear all remaining frames in RX FIFO */
	while (Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE)) {
1a006282:	f013 0f04 	tst.w	r3, #4
1a006286:	d001      	beq.n	1a00628c <Chip_SSP_RWFrames_Blocking+0x12>
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a006288:	68a3      	ldr	r3, [r4, #8]
1a00628a:	e7f9      	b.n	1a006280 <Chip_SSP_RWFrames_Blocking+0x6>
	pSSP->ICR = IntClear;
1a00628c:	2303      	movs	r3, #3
1a00628e:	6223      	str	r3, [r4, #32]
	return SSP_CR0_DSS(pSSP->CR0);
1a006290:	6823      	ldr	r3, [r4, #0]
	}

	/* Clear status */
	Chip_SSP_ClearIntPending(pSSP, SSP_INT_CLEAR_BITMASK);

	if (Chip_SSP_GetDataSize(pSSP) > SSP_BITS_8) {
1a006292:	f013 0f08 	tst.w	r3, #8
1a006296:	d108      	bne.n	1a0062aa <Chip_SSP_RWFrames_Blocking+0x30>
1a006298:	e022      	b.n	1a0062e0 <Chip_SSP_RWFrames_Blocking+0x66>
	return (pSSP->RIS & RawInt) ? SET : RESET;
1a00629a:	69a3      	ldr	r3, [r4, #24]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
				SSP_Write2BFifo(pSSP, xf_setup);
			}

			/* Check overrun error */
			if (Chip_SSP_GetRawIntStatus(pSSP, SSP_RORRIS) == SET) {
1a00629c:	f013 0f01 	tst.w	r3, #1
1a0062a0:	d139      	bne.n	1a006316 <Chip_SSP_RWFrames_Blocking+0x9c>
				return ERROR;
			}

			/* Check for any data available in RX FIFO */
			SSP_Read2BFifo(pSSP, xf_setup);
1a0062a2:	4629      	mov	r1, r5
1a0062a4:	4620      	mov	r0, r4
1a0062a6:	f7ff ff87 	bl	1a0061b8 <SSP_Read2BFifo>
		while (xf_setup->rx_cnt < xf_setup->length || xf_setup->tx_cnt < xf_setup->length) {
1a0062aa:	68ea      	ldr	r2, [r5, #12]
1a0062ac:	692b      	ldr	r3, [r5, #16]
1a0062ae:	429a      	cmp	r2, r3
1a0062b0:	d302      	bcc.n	1a0062b8 <Chip_SSP_RWFrames_Blocking+0x3e>
1a0062b2:	686a      	ldr	r2, [r5, #4]
1a0062b4:	4293      	cmp	r3, r2
1a0062b6:	d926      	bls.n	1a006306 <Chip_SSP_RWFrames_Blocking+0x8c>
	return (pSSP->SR & Stat) ? SET : RESET;
1a0062b8:	68e2      	ldr	r2, [r4, #12]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
1a0062ba:	f012 0f02 	tst.w	r2, #2
1a0062be:	d0ec      	beq.n	1a00629a <Chip_SSP_RWFrames_Blocking+0x20>
1a0062c0:	686a      	ldr	r2, [r5, #4]
1a0062c2:	429a      	cmp	r2, r3
1a0062c4:	d2e9      	bcs.n	1a00629a <Chip_SSP_RWFrames_Blocking+0x20>
				SSP_Write2BFifo(pSSP, xf_setup);
1a0062c6:	4629      	mov	r1, r5
1a0062c8:	4620      	mov	r0, r4
1a0062ca:	f7ff ff5c 	bl	1a006186 <SSP_Write2BFifo>
1a0062ce:	e7e4      	b.n	1a00629a <Chip_SSP_RWFrames_Blocking+0x20>
	return (pSSP->RIS & RawInt) ? SET : RESET;
1a0062d0:	69a3      	ldr	r3, [r4, #24]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
				SSP_Write1BFifo(pSSP, xf_setup);
			}

			/* Check overrun error */
			if (Chip_SSP_GetRawIntStatus(pSSP, SSP_RORRIS) == SET) {
1a0062d2:	f013 0f01 	tst.w	r3, #1
1a0062d6:	d120      	bne.n	1a00631a <Chip_SSP_RWFrames_Blocking+0xa0>
				return ERROR;
			}

			/* Check for any data available in RX FIFO */
			SSP_Read1BFifo(pSSP, xf_setup);
1a0062d8:	4629      	mov	r1, r5
1a0062da:	4620      	mov	r0, r4
1a0062dc:	f7ff ff8d 	bl	1a0061fa <SSP_Read1BFifo>
		while (xf_setup->rx_cnt < xf_setup->length || xf_setup->tx_cnt < xf_setup->length) {
1a0062e0:	68ea      	ldr	r2, [r5, #12]
1a0062e2:	692b      	ldr	r3, [r5, #16]
1a0062e4:	429a      	cmp	r2, r3
1a0062e6:	d302      	bcc.n	1a0062ee <Chip_SSP_RWFrames_Blocking+0x74>
1a0062e8:	686a      	ldr	r2, [r5, #4]
1a0062ea:	4293      	cmp	r3, r2
1a0062ec:	d90b      	bls.n	1a006306 <Chip_SSP_RWFrames_Blocking+0x8c>
	return (pSSP->SR & Stat) ? SET : RESET;
1a0062ee:	68e2      	ldr	r2, [r4, #12]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
1a0062f0:	f012 0f02 	tst.w	r2, #2
1a0062f4:	d0ec      	beq.n	1a0062d0 <Chip_SSP_RWFrames_Blocking+0x56>
1a0062f6:	686a      	ldr	r2, [r5, #4]
1a0062f8:	429a      	cmp	r2, r3
1a0062fa:	d2e9      	bcs.n	1a0062d0 <Chip_SSP_RWFrames_Blocking+0x56>
				SSP_Write1BFifo(pSSP, xf_setup);
1a0062fc:	4629      	mov	r1, r5
1a0062fe:	4620      	mov	r0, r4
1a006300:	f7ff ff4e 	bl	1a0061a0 <SSP_Write1BFifo>
1a006304:	e7e4      	b.n	1a0062d0 <Chip_SSP_RWFrames_Blocking+0x56>
		}
	}
	if (xf_setup->tx_data) {
1a006306:	682b      	ldr	r3, [r5, #0]
1a006308:	b10b      	cbz	r3, 1a00630e <Chip_SSP_RWFrames_Blocking+0x94>
		return xf_setup->tx_cnt;
1a00630a:	6868      	ldr	r0, [r5, #4]
1a00630c:	e004      	b.n	1a006318 <Chip_SSP_RWFrames_Blocking+0x9e>
	}
	else if (xf_setup->rx_data) {
1a00630e:	68ab      	ldr	r3, [r5, #8]
1a006310:	b12b      	cbz	r3, 1a00631e <Chip_SSP_RWFrames_Blocking+0xa4>
		return xf_setup->rx_cnt;
1a006312:	68e8      	ldr	r0, [r5, #12]
1a006314:	e000      	b.n	1a006318 <Chip_SSP_RWFrames_Blocking+0x9e>
				return ERROR;
1a006316:	2000      	movs	r0, #0
	}

	return 0;
}
1a006318:	bd38      	pop	{r3, r4, r5, pc}
				return ERROR;
1a00631a:	2000      	movs	r0, #0
1a00631c:	e7fc      	b.n	1a006318 <Chip_SSP_RWFrames_Blocking+0x9e>
	return 0;
1a00631e:	2000      	movs	r0, #0
1a006320:	e7fa      	b.n	1a006318 <Chip_SSP_RWFrames_Blocking+0x9e>

1a006322 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a006322:	b570      	push	{r4, r5, r6, lr}
1a006324:	4606      	mov	r6, r0
1a006326:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a006328:	f7ff ff92 	bl	1a006250 <Chip_SSP_GetPeriphClockIndex>
1a00632c:	f7ff fe36 	bl	1a005f9c <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a006330:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a006332:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a006336:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a006338:	e000      	b.n	1a00633c <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a00633a:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a00633c:	42ab      	cmp	r3, r5
1a00633e:	d90b      	bls.n	1a006358 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a006340:	1c4c      	adds	r4, r1, #1
1a006342:	fb02 f304 	mul.w	r3, r2, r4
1a006346:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a00634a:	429d      	cmp	r5, r3
1a00634c:	d2f6      	bcs.n	1a00633c <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a00634e:	2cff      	cmp	r4, #255	; 0xff
1a006350:	d9f3      	bls.n	1a00633a <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a006352:	3202      	adds	r2, #2
				cr0_div = 0;
1a006354:	2100      	movs	r1, #0
1a006356:	e7f1      	b.n	1a00633c <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a006358:	4630      	mov	r0, r6
1a00635a:	f7ff ff85 	bl	1a006268 <Chip_SSP_SetClockRate>
}
1a00635e:	bd70      	pop	{r4, r5, r6, pc}

1a006360 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a006360:	b510      	push	{r4, lr}
1a006362:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a006364:	f7ff ff6a 	bl	1a00623c <Chip_SSP_GetClockIndex>
1a006368:	f7ff fdfe 	bl	1a005f68 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a00636c:	4620      	mov	r0, r4
1a00636e:	f7ff ff6f 	bl	1a006250 <Chip_SSP_GetPeriphClockIndex>
1a006372:	f7ff fdf9 	bl	1a005f68 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a006376:	6863      	ldr	r3, [r4, #4]
1a006378:	f023 0304 	bic.w	r3, r3, #4
1a00637c:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00637e:	6823      	ldr	r3, [r4, #0]
1a006380:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a006384:	f043 0307 	orr.w	r3, r3, #7
1a006388:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a00638a:	4902      	ldr	r1, [pc, #8]	; (1a006394 <Chip_SSP_Init+0x34>)
1a00638c:	4620      	mov	r0, r4
1a00638e:	f7ff ffc8 	bl	1a006322 <Chip_SSP_SetBitRate>
}
1a006392:	bd10      	pop	{r4, pc}
1a006394:	000186a0 	.word	0x000186a0

1a006398 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a006398:	2901      	cmp	r1, #1
1a00639a:	d109      	bne.n	1a0063b0 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a00639c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a0063a0:	0082      	lsls	r2, r0, #2
1a0063a2:	4b04      	ldr	r3, [pc, #16]	; (1a0063b4 <Chip_I2C_EventHandler+0x1c>)
1a0063a4:	4413      	add	r3, r2
1a0063a6:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a0063a8:	7d13      	ldrb	r3, [r2, #20]
1a0063aa:	b2db      	uxtb	r3, r3
1a0063ac:	2b04      	cmp	r3, #4
1a0063ae:	d0fb      	beq.n	1a0063a8 <Chip_I2C_EventHandler+0x10>
}
1a0063b0:	4770      	bx	lr
1a0063b2:	bf00      	nop
1a0063b4:	10000010 	.word	0x10000010

1a0063b8 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a0063b8:	b570      	push	{r4, r5, r6, lr}
1a0063ba:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a0063bc:	4e06      	ldr	r6, [pc, #24]	; (1a0063d8 <Chip_I2C_Init+0x20>)
1a0063be:	00c4      	lsls	r4, r0, #3
1a0063c0:	1a22      	subs	r2, r4, r0
1a0063c2:	0093      	lsls	r3, r2, #2
1a0063c4:	4433      	add	r3, r6
1a0063c6:	8898      	ldrh	r0, [r3, #4]
1a0063c8:	f7ff fdce 	bl	1a005f68 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a0063cc:	1b64      	subs	r4, r4, r5
1a0063ce:	00a3      	lsls	r3, r4, #2
1a0063d0:	58f3      	ldr	r3, [r6, r3]
1a0063d2:	226c      	movs	r2, #108	; 0x6c
1a0063d4:	619a      	str	r2, [r3, #24]
}
1a0063d6:	bd70      	pop	{r4, r5, r6, pc}
1a0063d8:	10000010 	.word	0x10000010

1a0063dc <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a0063dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0063e0:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a0063e2:	4e0b      	ldr	r6, [pc, #44]	; (1a006410 <Chip_I2C_SetClockRate+0x34>)
1a0063e4:	00c5      	lsls	r5, r0, #3
1a0063e6:	1a2b      	subs	r3, r5, r0
1a0063e8:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a0063ec:	eb06 0308 	add.w	r3, r6, r8
1a0063f0:	8898      	ldrh	r0, [r3, #4]
1a0063f2:	f7ff fdd3 	bl	1a005f9c <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a0063f6:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a0063fa:	f856 3008 	ldr.w	r3, [r6, r8]
1a0063fe:	0842      	lsrs	r2, r0, #1
1a006400:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a006402:	f856 3008 	ldr.w	r3, [r6, r8]
1a006406:	691a      	ldr	r2, [r3, #16]
1a006408:	1a80      	subs	r0, r0, r2
1a00640a:	6158      	str	r0, [r3, #20]
}
1a00640c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a006410:	10000010 	.word	0x10000010

1a006414 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a006414:	b508      	push	{r3, lr}
   // to use CMSIS.
   volatile unsigned int *pCREG_M0APPMAP = (volatile unsigned int *) 0x40043404;
   // CMSIS : CREG->M0APPMAP = <address of vector table>
   *pCREG_M0APPMAP = (unsigned int)g_pfnVectors;
#else
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a006416:	4a0b      	ldr	r2, [pc, #44]	; (1a006444 <SystemInit+0x30>)
1a006418:	4b0b      	ldr	r3, [pc, #44]	; (1a006448 <SystemInit+0x34>)
1a00641a:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a00641c:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a006420:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a006422:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a006426:	2b20      	cmp	r3, #32
1a006428:	d004      	beq.n	1a006434 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit only in M4 */
   Board_SystemInit();
1a00642a:	f7ff f9d5 	bl	1a0057d8 <Board_SystemInit>
   Board_Init();
1a00642e:	f7ff f95b 	bl	1a0056e8 <Board_Init>
#endif
}
1a006432:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a006434:	4a04      	ldr	r2, [pc, #16]	; (1a006448 <SystemInit+0x34>)
1a006436:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a00643a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a00643e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a006442:	e7f2      	b.n	1a00642a <SystemInit+0x16>
1a006444:	1a000000 	.word	0x1a000000
1a006448:	e000ed00 	.word	0xe000ed00

1a00644c <uartRxReady>:
//-------------------------------------------------------------

// Return TRUE if have unread data in RX FIFO
bool_t uartRxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
1a00644c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a006450:	0083      	lsls	r3, r0, #2
1a006452:	4a03      	ldr	r2, [pc, #12]	; (1a006460 <uartRxReady+0x14>)
1a006454:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a006456:	6958      	ldr	r0, [r3, #20]
}
1a006458:	f000 0001 	and.w	r0, r0, #1
1a00645c:	4770      	bx	lr
1a00645e:	bf00      	nop
1a006460:	1a008a40 	.word	0x1a008a40

1a006464 <uartTxReady>:

// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a006464:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a006468:	0083      	lsls	r3, r0, #2
1a00646a:	4a03      	ldr	r2, [pc, #12]	; (1a006478 <uartTxReady+0x14>)
1a00646c:	58d3      	ldr	r3, [r2, r3]
1a00646e:	6958      	ldr	r0, [r3, #20]
}
1a006470:	f000 0020 	and.w	r0, r0, #32
1a006474:	4770      	bx	lr
1a006476:	bf00      	nop
1a006478:	1a008a40 	.word	0x1a008a40

1a00647c <uartRxRead>:

// Read from RX FIFO
uint8_t uartRxRead( uartMap_t uart )
{
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a00647c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a006480:	0083      	lsls	r3, r0, #2
1a006482:	4a02      	ldr	r2, [pc, #8]	; (1a00648c <uartRxRead+0x10>)
1a006484:	58d3      	ldr	r3, [r2, r3]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a006486:	6818      	ldr	r0, [r3, #0]
}
1a006488:	b2c0      	uxtb	r0, r0
1a00648a:	4770      	bx	lr
1a00648c:	1a008a40 	.word	0x1a008a40

1a006490 <uartRxFlush>:

// Read all bytes from RX FIFO and discards
void uartRxFlush( uartMap_t uart )
{
1a006490:	b510      	push	{r4, lr}
1a006492:	4604      	mov	r4, r0
   while ( uartRxReady(uart) ) {
1a006494:	4620      	mov	r0, r4
1a006496:	f7ff ffd9 	bl	1a00644c <uartRxReady>
1a00649a:	b118      	cbz	r0, 1a0064a4 <uartRxFlush+0x14>
      uartRxRead(uart);
1a00649c:	4620      	mov	r0, r4
1a00649e:	f7ff ffed 	bl	1a00647c <uartRxRead>
1a0064a2:	e7f7      	b.n	1a006494 <uartRxFlush+0x4>
   }
}
1a0064a4:	bd10      	pop	{r4, pc}
1a0064a6:	Address 0x000000001a0064a6 is out of bounds.


1a0064a8 <uartTxWrite>:

// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a0064a8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0064ac:	0083      	lsls	r3, r0, #2
1a0064ae:	4a02      	ldr	r2, [pc, #8]	; (1a0064b8 <uartTxWrite+0x10>)
1a0064b0:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a0064b2:	6019      	str	r1, [r3, #0]
}
1a0064b4:	4770      	bx	lr
1a0064b6:	bf00      	nop
1a0064b8:	1a008a40 	.word	0x1a008a40

1a0064bc <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a0064bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0064c0:	4680      	mov	r8, r0
1a0064c2:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a0064c4:	4c19      	ldr	r4, [pc, #100]	; (1a00652c <uartInit+0x70>)
1a0064c6:	0045      	lsls	r5, r0, #1
1a0064c8:	182a      	adds	r2, r5, r0
1a0064ca:	0093      	lsls	r3, r2, #2
1a0064cc:	18e6      	adds	r6, r4, r3
1a0064ce:	58e7      	ldr	r7, [r4, r3]
1a0064d0:	4638      	mov	r0, r7
1a0064d2:	f7ff f99d 	bl	1a005810 <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a0064d6:	4649      	mov	r1, r9
1a0064d8:	4638      	mov	r0, r7
1a0064da:	f7ff f9c3 	bl	1a005864 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a0064de:	23c7      	movs	r3, #199	; 0xc7
1a0064e0:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0064e2:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a0064e4:	2301      	movs	r3, #1
1a0064e6:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a0064e8:	7930      	ldrb	r0, [r6, #4]
1a0064ea:	7973      	ldrb	r3, [r6, #5]
1a0064ec:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0064ee:	f042 0218 	orr.w	r2, r2, #24
1a0064f2:	490f      	ldr	r1, [pc, #60]	; (1a006530 <uartInit+0x74>)
1a0064f4:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a0064f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a0064fc:	79f0      	ldrb	r0, [r6, #7]
1a0064fe:	7a33      	ldrb	r3, [r6, #8]
1a006500:	7a72      	ldrb	r2, [r6, #9]
1a006502:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a006506:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a00650a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a00650e:	f1b8 0f01 	cmp.w	r8, #1
1a006512:	d001      	beq.n	1a006518 <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a006514:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a006518:	4a06      	ldr	r2, [pc, #24]	; (1a006534 <uartInit+0x78>)
1a00651a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a00651c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a006520:	64d3      	str	r3, [r2, #76]	; 0x4c
1a006522:	221a      	movs	r2, #26
1a006524:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a006528:	e7f4      	b.n	1a006514 <uartInit+0x58>
1a00652a:	bf00      	nop
1a00652c:	1a008a40 	.word	0x1a008a40
1a006530:	40086000 	.word	0x40086000
1a006534:	40081000 	.word	0x40081000

1a006538 <uartReadByte>:
   }
}

// Read 1 byte from RX FIFO, check first if exist aviable data
bool_t uartReadByte( uartMap_t uart, uint8_t* receivedByte )
{
1a006538:	b538      	push	{r3, r4, r5, lr}
1a00653a:	4605      	mov	r5, r0
1a00653c:	460c      	mov	r4, r1
   bool_t retVal = TRUE;
   if ( uartRxReady(uart) ) {
1a00653e:	f7ff ff85 	bl	1a00644c <uartRxReady>
1a006542:	4603      	mov	r3, r0
1a006544:	b908      	cbnz	r0, 1a00654a <uartReadByte+0x12>
      *receivedByte = uartRxRead(uart);
   } else {
      retVal = FALSE;
   }
   return retVal;
}
1a006546:	4618      	mov	r0, r3
1a006548:	bd38      	pop	{r3, r4, r5, pc}
      *receivedByte = uartRxRead(uart);
1a00654a:	4628      	mov	r0, r5
1a00654c:	f7ff ff96 	bl	1a00647c <uartRxRead>
1a006550:	7020      	strb	r0, [r4, #0]
   bool_t retVal = TRUE;
1a006552:	2301      	movs	r3, #1
1a006554:	e7f7      	b.n	1a006546 <uartReadByte+0xe>

1a006556 <uartWriteByte>:

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a006556:	b538      	push	{r3, r4, r5, lr}
1a006558:	4604      	mov	r4, r0
1a00655a:	460d      	mov	r5, r1
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a00655c:	4620      	mov	r0, r4
1a00655e:	f7ff ff81 	bl	1a006464 <uartTxReady>
1a006562:	2800      	cmp	r0, #0
1a006564:	d0fa      	beq.n	1a00655c <uartWriteByte+0x6>
   // Send byte
   uartTxWrite( uart, value );
1a006566:	4629      	mov	r1, r5
1a006568:	4620      	mov	r0, r4
1a00656a:	f7ff ff9d 	bl	1a0064a8 <uartTxWrite>
}
1a00656e:	bd38      	pop	{r3, r4, r5, pc}

1a006570 <uartWriteByteArray>:
}

// Blocking, Send a Byte Array
void uartWriteByteArray( uartMap_t uart,
                         const uint8_t* byteArray, uint32_t byteArrayLen )
{
1a006570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a006572:	4607      	mov	r7, r0
1a006574:	460e      	mov	r6, r1
1a006576:	4615      	mov	r5, r2
   uint32_t i = 0;
   for( i=0; i<byteArrayLen; i++ ) {
1a006578:	2400      	movs	r4, #0
1a00657a:	42ac      	cmp	r4, r5
1a00657c:	d205      	bcs.n	1a00658a <uartWriteByteArray+0x1a>
      uartWriteByte( uart, byteArray[i] );
1a00657e:	5d31      	ldrb	r1, [r6, r4]
1a006580:	4638      	mov	r0, r7
1a006582:	f7ff ffe8 	bl	1a006556 <uartWriteByte>
   for( i=0; i<byteArrayLen; i++ ) {
1a006586:	3401      	adds	r4, #1
1a006588:	e7f7      	b.n	1a00657a <uartWriteByteArray+0xa>
   }
}
1a00658a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1a00658c <spiInit>:
bool_t spiInit( spiMap_t spi )
{

   bool_t retVal = TRUE;

   if( spi == SPI0 ) {
1a00658c:	b108      	cbz	r0, 1a006592 <spiInit+0x6>
      #else
         #error BOARD compile variable must be defined
      #endif

   } else {
      retVal = FALSE;
1a00658e:	2000      	movs	r0, #0
   }

   return retVal;
}
1a006590:	4770      	bx	lr
{
1a006592:	b570      	push	{r4, r5, r6, lr}
1a006594:	4c0e      	ldr	r4, [pc, #56]	; (1a0065d0 <spiInit+0x44>)
1a006596:	2600      	movs	r6, #0
1a006598:	f8c4 6790 	str.w	r6, [r4, #1936]	; 0x790
1a00659c:	23c5      	movs	r3, #197	; 0xc5
1a00659e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
1a0065a2:	2305      	movs	r3, #5
1a0065a4:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
         Chip_SSP_Init( LPC_SSP1 );
1a0065a8:	4d0a      	ldr	r5, [pc, #40]	; (1a0065d4 <spiInit+0x48>)
1a0065aa:	4628      	mov	r0, r5
1a0065ac:	f7ff fed8 	bl	1a006360 <Chip_SSP_Init>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a0065b0:	686b      	ldr	r3, [r5, #4]
1a0065b2:	f043 0302 	orr.w	r3, r3, #2
1a0065b6:	606b      	str	r3, [r5, #4]
1a0065b8:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
	pGPIO->DIR[port] |= 1UL << pin;
1a0065bc:	4906      	ldr	r1, [pc, #24]	; (1a0065d8 <spiInit+0x4c>)
1a0065be:	f242 020c 	movw	r2, #8204	; 0x200c
1a0065c2:	588b      	ldr	r3, [r1, r2]
1a0065c4:	f043 0301 	orr.w	r3, r3, #1
1a0065c8:	508b      	str	r3, [r1, r2]
   bool_t retVal = TRUE;
1a0065ca:	2001      	movs	r0, #1
}
1a0065cc:	bd70      	pop	{r4, r5, r6, pc}
1a0065ce:	bf00      	nop
1a0065d0:	40086000 	.word	0x40086000
1a0065d4:	400c5000 	.word	0x400c5000
1a0065d8:	400f4000 	.word	0x400f4000

1a0065dc <spiWrite>:
   return retVal;
}


bool_t spiWrite( spiMap_t spi, uint8_t* buffer, uint32_t bufferSize)
{
1a0065dc:	b500      	push	{lr}
1a0065de:	b087      	sub	sp, #28

   bool_t retVal = TRUE;

   Chip_SSP_DATA_SETUP_T xferConfig;

   xferConfig.tx_data = buffer;
1a0065e0:	9101      	str	r1, [sp, #4]
   xferConfig.tx_cnt  = 0;
1a0065e2:	2300      	movs	r3, #0
1a0065e4:	9302      	str	r3, [sp, #8]
   xferConfig.rx_data = NULL;
1a0065e6:	9303      	str	r3, [sp, #12]
   xferConfig.rx_cnt  = 0;
1a0065e8:	9304      	str	r3, [sp, #16]
   xferConfig.length  = bufferSize;
1a0065ea:	9205      	str	r2, [sp, #20]

   if( spi == SPI0 ) {
1a0065ec:	b118      	cbz	r0, 1a0065f6 <spiWrite+0x1a>
      Chip_SSP_RWFrames_Blocking( LPC_SSP1, &xferConfig );
   } else {
      retVal = FALSE;
1a0065ee:	2000      	movs	r0, #0
   }

   return retVal;
}
1a0065f0:	b007      	add	sp, #28
1a0065f2:	f85d fb04 	ldr.w	pc, [sp], #4
      Chip_SSP_RWFrames_Blocking( LPC_SSP1, &xferConfig );
1a0065f6:	a901      	add	r1, sp, #4
1a0065f8:	4802      	ldr	r0, [pc, #8]	; (1a006604 <spiWrite+0x28>)
1a0065fa:	f7ff fe3e 	bl	1a00627a <Chip_SSP_RWFrames_Blocking>
   bool_t retVal = TRUE;
1a0065fe:	2001      	movs	r0, #1
1a006600:	e7f6      	b.n	1a0065f0 <spiWrite+0x14>
1a006602:	bf00      	nop
1a006604:	400c5000 	.word	0x400c5000

1a006608 <tickRead>:
}
*/

// Read Tick Counter
tick_t tickRead( void )
{
1a006608:	b508      	push	{r3, lr}
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
1a00660a:	f7fe f89d 	bl	1a004748 <xTaskGetTickCount>
   #else
      return tickCounter;
   #endif
}
1a00660e:	2100      	movs	r1, #0
1a006610:	bd08      	pop	{r3, pc}
1a006612:	Address 0x000000001a006612 is out of bounds.


1a006614 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a006614:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a006616:	4d0b      	ldr	r5, [pc, #44]	; (1a006644 <gpioObtainPinInit+0x30>)
1a006618:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a00661c:	182c      	adds	r4, r5, r0
1a00661e:	5628      	ldrsb	r0, [r5, r0]
1a006620:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a006622:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a006626:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a006628:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a00662c:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a00662e:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a006632:	9b02      	ldr	r3, [sp, #8]
1a006634:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a006636:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a00663a:	9b03      	ldr	r3, [sp, #12]
1a00663c:	701a      	strb	r2, [r3, #0]
}
1a00663e:	bc30      	pop	{r4, r5}
1a006640:	4770      	bx	lr
1a006642:	bf00      	nop
1a006644:	1a008a88 	.word	0x1a008a88

1a006648 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a006648:	f110 0f02 	cmn.w	r0, #2
1a00664c:	f000 80c7 	beq.w	1a0067de <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a006650:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a006654:	f000 80c5 	beq.w	1a0067e2 <gpioInit+0x19a>
{
1a006658:	b570      	push	{r4, r5, r6, lr}
1a00665a:	b084      	sub	sp, #16
1a00665c:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00665e:	2300      	movs	r3, #0
1a006660:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a006664:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a006668:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00666c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a006670:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a006674:	f10d 030b 	add.w	r3, sp, #11
1a006678:	9301      	str	r3, [sp, #4]
1a00667a:	ab03      	add	r3, sp, #12
1a00667c:	9300      	str	r3, [sp, #0]
1a00667e:	f10d 030d 	add.w	r3, sp, #13
1a006682:	f10d 020e 	add.w	r2, sp, #14
1a006686:	f10d 010f 	add.w	r1, sp, #15
1a00668a:	f7ff ffc3 	bl	1a006614 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a00668e:	2c05      	cmp	r4, #5
1a006690:	f200 80a9 	bhi.w	1a0067e6 <gpioInit+0x19e>
1a006694:	e8df f004 	tbb	[pc, r4]
1a006698:	45278109 	.word	0x45278109
1a00669c:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a00669e:	4853      	ldr	r0, [pc, #332]	; (1a0067ec <gpioInit+0x1a4>)
1a0066a0:	f7ff fd70 	bl	1a006184 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a0066a4:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a0066a6:	b004      	add	sp, #16
1a0066a8:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a0066aa:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0066ae:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0066b2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0066b6:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0066ba:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0066be:	494c      	ldr	r1, [pc, #304]	; (1a0067f0 <gpioInit+0x1a8>)
1a0066c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0066c4:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0066c8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0066cc:	2001      	movs	r0, #1
1a0066ce:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] &= ~bitValue;
1a0066d2:	4c46      	ldr	r4, [pc, #280]	; (1a0067ec <gpioInit+0x1a4>)
1a0066d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0066d8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0066dc:	ea22 0201 	bic.w	r2, r2, r1
1a0066e0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0066e4:	e7df      	b.n	1a0066a6 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0066e6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0066ea:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0066ee:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0066f2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a0066f6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0066fa:	493d      	ldr	r1, [pc, #244]	; (1a0067f0 <gpioInit+0x1a8>)
1a0066fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a006700:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a006704:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a006708:	2001      	movs	r0, #1
1a00670a:	fa00 f102 	lsl.w	r1, r0, r2
1a00670e:	4c37      	ldr	r4, [pc, #220]	; (1a0067ec <gpioInit+0x1a4>)
1a006710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a006714:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a006718:	ea22 0201 	bic.w	r2, r2, r1
1a00671c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a006720:	e7c1      	b.n	1a0066a6 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a006722:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a006726:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00672a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00672e:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a006732:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a006736:	492e      	ldr	r1, [pc, #184]	; (1a0067f0 <gpioInit+0x1a8>)
1a006738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00673c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a006740:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a006744:	2001      	movs	r0, #1
1a006746:	fa00 f102 	lsl.w	r1, r0, r2
1a00674a:	4c28      	ldr	r4, [pc, #160]	; (1a0067ec <gpioInit+0x1a4>)
1a00674c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a006750:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a006754:	ea22 0201 	bic.w	r2, r2, r1
1a006758:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00675c:	e7a3      	b.n	1a0066a6 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00675e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a006762:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a006766:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00676a:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a00676e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a006772:	491f      	ldr	r1, [pc, #124]	; (1a0067f0 <gpioInit+0x1a8>)
1a006774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a006778:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00677c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a006780:	2001      	movs	r0, #1
1a006782:	fa00 f102 	lsl.w	r1, r0, r2
1a006786:	4c19      	ldr	r4, [pc, #100]	; (1a0067ec <gpioInit+0x1a4>)
1a006788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00678c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a006790:	ea22 0201 	bic.w	r2, r2, r1
1a006794:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a006798:	e785      	b.n	1a0066a6 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00679a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00679e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0067a2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0067a6:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0067aa:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0067ae:	4910      	ldr	r1, [pc, #64]	; (1a0067f0 <gpioInit+0x1a8>)
1a0067b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a0067b4:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a0067b8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0067bc:	2001      	movs	r0, #1
1a0067be:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a0067c2:	4b0a      	ldr	r3, [pc, #40]	; (1a0067ec <gpioInit+0x1a4>)
1a0067c4:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0067c8:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a0067cc:	4331      	orrs	r1, r6
1a0067ce:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a0067d2:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a0067d4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0067d8:	2100      	movs	r1, #0
1a0067da:	5499      	strb	r1, [r3, r2]
1a0067dc:	e763      	b.n	1a0066a6 <gpioInit+0x5e>
	  return FALSE;
1a0067de:	2000      	movs	r0, #0
1a0067e0:	4770      	bx	lr
	  return FALSE;
1a0067e2:	2000      	movs	r0, #0
}
1a0067e4:	4770      	bx	lr
      ret_val = 0;
1a0067e6:	2000      	movs	r0, #0
1a0067e8:	e75d      	b.n	1a0066a6 <gpioInit+0x5e>
1a0067ea:	bf00      	nop
1a0067ec:	400f4000 	.word	0x400f4000
1a0067f0:	40086000 	.word	0x40086000

1a0067f4 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a0067f4:	f110 0f02 	cmn.w	r0, #2
1a0067f8:	d02d      	beq.n	1a006856 <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a0067fa:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0067fe:	d02c      	beq.n	1a00685a <gpioWrite+0x66>
{
1a006800:	b510      	push	{r4, lr}
1a006802:	b084      	sub	sp, #16
1a006804:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a006806:	2300      	movs	r3, #0
1a006808:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00680c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a006810:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a006814:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a006818:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a00681c:	f10d 030b 	add.w	r3, sp, #11
1a006820:	9301      	str	r3, [sp, #4]
1a006822:	ab03      	add	r3, sp, #12
1a006824:	9300      	str	r3, [sp, #0]
1a006826:	f10d 030d 	add.w	r3, sp, #13
1a00682a:	f10d 020e 	add.w	r2, sp, #14
1a00682e:	f10d 010f 	add.w	r1, sp, #15
1a006832:	f7ff feef 	bl	1a006614 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a006836:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00683a:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a00683e:	1c21      	adds	r1, r4, #0
1a006840:	bf18      	it	ne
1a006842:	2101      	movne	r1, #1
1a006844:	015b      	lsls	r3, r3, #5
1a006846:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a00684a:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00684e:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a006850:	2001      	movs	r0, #1
}
1a006852:	b004      	add	sp, #16
1a006854:	bd10      	pop	{r4, pc}
	  return FALSE;
1a006856:	2000      	movs	r0, #0
1a006858:	4770      	bx	lr
	  return FALSE;
1a00685a:	2000      	movs	r0, #0
}
1a00685c:	4770      	bx	lr

1a00685e <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a00685e:	f110 0f02 	cmn.w	r0, #2
1a006862:	d02c      	beq.n	1a0068be <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a006864:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a006868:	d02b      	beq.n	1a0068c2 <gpioRead+0x64>
{
1a00686a:	b500      	push	{lr}
1a00686c:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a00686e:	2300      	movs	r3, #0
1a006870:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a006874:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a006878:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00687c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a006880:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a006884:	f10d 030b 	add.w	r3, sp, #11
1a006888:	9301      	str	r3, [sp, #4]
1a00688a:	ab03      	add	r3, sp, #12
1a00688c:	9300      	str	r3, [sp, #0]
1a00688e:	f10d 030d 	add.w	r3, sp, #13
1a006892:	f10d 020e 	add.w	r2, sp, #14
1a006896:	f10d 010f 	add.w	r1, sp, #15
1a00689a:	f7ff febb 	bl	1a006614 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a00689e:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a0068a2:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a0068a6:	015b      	lsls	r3, r3, #5
1a0068a8:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0068ac:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0068b0:	5c98      	ldrb	r0, [r3, r2]
1a0068b2:	3000      	adds	r0, #0
1a0068b4:	bf18      	it	ne
1a0068b6:	2001      	movne	r0, #1

   return ret_val;
}
1a0068b8:	b005      	add	sp, #20
1a0068ba:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a0068be:	2001      	movs	r0, #1
1a0068c0:	4770      	bx	lr
      return FALSE;
1a0068c2:	2000      	movs	r0, #0
}
1a0068c4:	4770      	bx	lr

1a0068c6 <gpioToggle>:
{
1a0068c6:	b510      	push	{r4, lr}
1a0068c8:	4604      	mov	r4, r0
   return gpioWrite( pin, !gpioRead(pin) );
1a0068ca:	f7ff ffc8 	bl	1a00685e <gpioRead>
1a0068ce:	fab0 f180 	clz	r1, r0
1a0068d2:	0949      	lsrs	r1, r1, #5
1a0068d4:	4620      	mov	r0, r4
1a0068d6:	f7ff ff8d 	bl	1a0067f4 <gpioWrite>
}
1a0068da:	bd10      	pop	{r4, pc}

1a0068dc <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a0068dc:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a0068de:	4b04      	ldr	r3, [pc, #16]	; (1a0068f0 <USB0_IRQHandler+0x14>)
1a0068e0:	681b      	ldr	r3, [r3, #0]
1a0068e2:	681b      	ldr	r3, [r3, #0]
1a0068e4:	68db      	ldr	r3, [r3, #12]
1a0068e6:	4a03      	ldr	r2, [pc, #12]	; (1a0068f4 <USB0_IRQHandler+0x18>)
1a0068e8:	6810      	ldr	r0, [r2, #0]
1a0068ea:	4798      	blx	r3
}
1a0068ec:	bd08      	pop	{r3, pc}
1a0068ee:	bf00      	nop
1a0068f0:	10004fe8 	.word	0x10004fe8
1a0068f4:	10004c10 	.word	0x10004c10

1a0068f8 <delayInaccurateMs>:
/*==================[external functions definition]==========================*/

/* ---- Inaccurate Blocking Delay ---- */

void delayInaccurateMs(tick_t delay_ms)
{
1a0068f8:	b4f0      	push	{r4, r5, r6, r7}
1a0068fa:	b084      	sub	sp, #16
   volatile tick_t i;
   volatile tick_t delay;
   delay = INACCURATE_TO_MS * delay_ms;
1a0068fc:	ea4f 0c81 	mov.w	ip, r1, lsl #2
1a006900:	0083      	lsls	r3, r0, #2
1a006902:	ea4c 7290 	orr.w	r2, ip, r0, lsr #30
1a006906:	181b      	adds	r3, r3, r0
1a006908:	eb41 0202 	adc.w	r2, r1, r2
1a00690c:	0211      	lsls	r1, r2, #8
1a00690e:	ea41 6113 	orr.w	r1, r1, r3, lsr #24
1a006912:	0218      	lsls	r0, r3, #8
1a006914:	1ac6      	subs	r6, r0, r3
1a006916:	eb61 0702 	sbc.w	r7, r1, r2
1a00691a:	013b      	lsls	r3, r7, #4
1a00691c:	ea43 7316 	orr.w	r3, r3, r6, lsr #28
1a006920:	0132      	lsls	r2, r6, #4
1a006922:	4616      	mov	r6, r2
1a006924:	461f      	mov	r7, r3
1a006926:	e9cd 6700 	strd	r6, r7, [sp]
   for( i=delay; i>0; i-- );
1a00692a:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00692e:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a006932:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a006936:	4313      	orrs	r3, r2
1a006938:	d008      	beq.n	1a00694c <delayInaccurateMs+0x54>
1a00693a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00693e:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
1a006942:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
1a006946:	e9cd 4502 	strd	r4, r5, [sp, #8]
1a00694a:	e7f2      	b.n	1a006932 <delayInaccurateMs+0x3a>
}
1a00694c:	b004      	add	sp, #16
1a00694e:	bcf0      	pop	{r4, r5, r6, r7}
1a006950:	4770      	bx	lr

1a006952 <delayInaccurateUs>:

void delayInaccurateUs( tick_t delay_us )
{
1a006952:	b530      	push	{r4, r5, lr}
1a006954:	b085      	sub	sp, #20
   volatile tick_t i;
   volatile tick_t delay;
   delay = (INACCURATE_TO_US_x10 * delay_us) / 10;
1a006956:	1803      	adds	r3, r0, r0
1a006958:	eb41 0201 	adc.w	r2, r1, r1
1a00695c:	1818      	adds	r0, r3, r0
1a00695e:	eb42 0101 	adc.w	r1, r2, r1
1a006962:	010b      	lsls	r3, r1, #4
1a006964:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
1a006968:	0102      	lsls	r2, r0, #4
1a00696a:	1880      	adds	r0, r0, r2
1a00696c:	eb43 0101 	adc.w	r1, r3, r1
1a006970:	008b      	lsls	r3, r1, #2
1a006972:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
1a006976:	0082      	lsls	r2, r0, #2
1a006978:	4610      	mov	r0, r2
1a00697a:	4619      	mov	r1, r3
1a00697c:	220a      	movs	r2, #10
1a00697e:	2300      	movs	r3, #0
1a006980:	f000 f96e 	bl	1a006c60 <__aeabi_uldivmod>
1a006984:	e9cd 0100 	strd	r0, r1, [sp]
   for( i=delay; i>0; i-- );
1a006988:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00698c:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a006990:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a006994:	4313      	orrs	r3, r2
1a006996:	d008      	beq.n	1a0069aa <delayInaccurateUs+0x58>
1a006998:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00699c:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
1a0069a0:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
1a0069a4:	e9cd 4502 	strd	r4, r5, [sp, #8]
1a0069a8:	e7f2      	b.n	1a006990 <delayInaccurateUs+0x3e>
}
1a0069aa:	b005      	add	sp, #20
1a0069ac:	bd30      	pop	{r4, r5, pc}
1a0069ae:	Address 0x000000001a0069ae is out of bounds.


1a0069b0 <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay( tick_t duration_ms )
{
1a0069b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0069b4:	4680      	mov	r8, r0
1a0069b6:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a0069b8:	f7ff fe26 	bl	1a006608 <tickRead>
1a0069bc:	4606      	mov	r6, r0
1a0069be:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration_ms/tickRateMS );
1a0069c0:	f7ff fe22 	bl	1a006608 <tickRead>
1a0069c4:	1b84      	subs	r4, r0, r6
1a0069c6:	eb61 0507 	sbc.w	r5, r1, r7
1a0069ca:	4b06      	ldr	r3, [pc, #24]	; (1a0069e4 <delay+0x34>)
1a0069cc:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0069d0:	4640      	mov	r0, r8
1a0069d2:	4649      	mov	r1, r9
1a0069d4:	f000 f944 	bl	1a006c60 <__aeabi_uldivmod>
1a0069d8:	428d      	cmp	r5, r1
1a0069da:	bf08      	it	eq
1a0069dc:	4284      	cmpeq	r4, r0
1a0069de:	d3ef      	bcc.n	1a0069c0 <delay+0x10>
}
1a0069e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0069e4:	10000048 	.word	0x10000048

1a0069e8 <lcdPinSet>:
}



static void lcdPinSet( uint8_t pin, bool_t status )
{
1a0069e8:	b508      	push	{r3, lr}
#ifdef LCD_HD44780_I2C_PCF8574T
   pcf8574TGpioWrite( pin, status );
#else
   gpioWrite( pin, status );
1a0069ea:	b240      	sxtb	r0, r0
1a0069ec:	f7ff ff02 	bl	1a0067f4 <gpioWrite>
#endif
}
1a0069f0:	bd08      	pop	{r3, pc}

1a0069f2 <lcdSendNibble>:
   lcdPinSet( LCD_HD44780_EN, OFF );      // EN = 0 for H-to-L pulse
   //lcdDelay_us(50); // commands need > 37us to settle
}

static void lcdSendNibble( uint8_t nibble )
{
1a0069f2:	b510      	push	{r4, lr}
1a0069f4:	4604      	mov	r4, r0
   lcdPinSet( LCD_HD44780_D7, ( nibble & 0x80 ) );
1a0069f6:	f000 0180 	and.w	r1, r0, #128	; 0x80
1a0069fa:	2014      	movs	r0, #20
1a0069fc:	f7ff fff4 	bl	1a0069e8 <lcdPinSet>
   lcdPinSet( LCD_HD44780_D6, ( nibble & 0x40 ) );
1a006a00:	f004 0140 	and.w	r1, r4, #64	; 0x40
1a006a04:	2012      	movs	r0, #18
1a006a06:	f7ff ffef 	bl	1a0069e8 <lcdPinSet>
   lcdPinSet( LCD_HD44780_D5, ( nibble & 0x20 ) );
1a006a0a:	f004 0120 	and.w	r1, r4, #32
1a006a0e:	2011      	movs	r0, #17
1a006a10:	f7ff ffea 	bl	1a0069e8 <lcdPinSet>
   lcdPinSet( LCD_HD44780_D4, ( nibble & 0x10 ) );
1a006a14:	f004 0110 	and.w	r1, r4, #16
1a006a18:	2010      	movs	r0, #16
1a006a1a:	f7ff ffe5 	bl	1a0069e8 <lcdPinSet>
}
1a006a1e:	bd10      	pop	{r4, pc}

1a006a20 <lcdEnablePulse>:
{
1a006a20:	b508      	push	{r3, lr}
   lcdPinSet( LCD_HD44780_EN, ON );       // EN = 1 for H-to-L pulse
1a006a22:	2101      	movs	r1, #1
1a006a24:	2021      	movs	r0, #33	; 0x21
1a006a26:	f7ff ffdf 	bl	1a0069e8 <lcdPinSet>
   lcdDelay_us( LCD_EN_PULSE_WAIT_US );   // Wait to make EN wider //lcdDelay_us(1);
1a006a2a:	2019      	movs	r0, #25
1a006a2c:	2100      	movs	r1, #0
1a006a2e:	f7ff ff90 	bl	1a006952 <delayInaccurateUs>
   lcdPinSet( LCD_HD44780_EN, OFF );      // EN = 0 for H-to-L pulse
1a006a32:	2100      	movs	r1, #0
1a006a34:	2021      	movs	r0, #33	; 0x21
1a006a36:	f7ff ffd7 	bl	1a0069e8 <lcdPinSet>
}
1a006a3a:	bd08      	pop	{r3, pc}

1a006a3c <lcdCommand>:

/*==================[definiciones de funciones externas]=====================*/

void lcdCommand( uint8_t cmd )
{
1a006a3c:	b510      	push	{r4, lr}
1a006a3e:	4604      	mov	r4, r0
   lcdSendNibble( cmd & 0xF0 );          // Send high nibble to D7-D4
1a006a40:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
1a006a44:	f7ff ffd5 	bl	1a0069f2 <lcdSendNibble>

   lcdPinSet( LCD_HD44780_RS, OFF );   // RS = 0 for command
1a006a48:	2100      	movs	r1, #0
1a006a4a:	2013      	movs	r0, #19
1a006a4c:	f7ff ffcc 	bl	1a0069e8 <lcdPinSet>
   lcdPinSet( LCD_HD44780_RW, OFF );   // RW = 0 for write
1a006a50:	2100      	movs	r1, #0
1a006a52:	20ff      	movs	r0, #255	; 0xff
1a006a54:	f7ff ffc8 	bl	1a0069e8 <lcdPinSet>

   lcdEnablePulse();
1a006a58:	f7ff ffe2 	bl	1a006a20 <lcdEnablePulse>
   lcdDelay_us( LCD_LOW_WAIT_US );       // Wait
1a006a5c:	2019      	movs	r0, #25
1a006a5e:	2100      	movs	r1, #0
1a006a60:	f7ff ff77 	bl	1a006952 <delayInaccurateUs>

   lcdSendNibble( cmd << 4 );            // Send low nibble to D7-D4
1a006a64:	0120      	lsls	r0, r4, #4
1a006a66:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
1a006a6a:	f7ff ffc2 	bl	1a0069f2 <lcdSendNibble>
   lcdEnablePulse();
1a006a6e:	f7ff ffd7 	bl	1a006a20 <lcdEnablePulse>
}
1a006a72:	bd10      	pop	{r4, pc}

1a006a74 <lcdData>:

void lcdData( uint8_t data )
{
1a006a74:	b510      	push	{r4, lr}
1a006a76:	4604      	mov	r4, r0
   lcdSendNibble( data & 0xF0 );         // Send high nibble to D7-D4
1a006a78:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
1a006a7c:	f7ff ffb9 	bl	1a0069f2 <lcdSendNibble>

   lcdPinSet( LCD_HD44780_RS, ON );    // RS = 1 for data
1a006a80:	2101      	movs	r1, #1
1a006a82:	2013      	movs	r0, #19
1a006a84:	f7ff ffb0 	bl	1a0069e8 <lcdPinSet>
   lcdPinSet( LCD_HD44780_RW, OFF );   // RW = 0 for write
1a006a88:	2100      	movs	r1, #0
1a006a8a:	20ff      	movs	r0, #255	; 0xff
1a006a8c:	f7ff ffac 	bl	1a0069e8 <lcdPinSet>

   lcdEnablePulse();
1a006a90:	f7ff ffc6 	bl	1a006a20 <lcdEnablePulse>

   lcdSendNibble( data << 4 );           // Send low nibble to D7-D4
1a006a94:	0120      	lsls	r0, r4, #4
1a006a96:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
1a006a9a:	f7ff ffaa 	bl	1a0069f2 <lcdSendNibble>
   lcdEnablePulse();
1a006a9e:	f7ff ffbf 	bl	1a006a20 <lcdEnablePulse>
}
1a006aa2:	bd10      	pop	{r4, pc}

1a006aa4 <lcdInit>:

void lcdInit( uint16_t lineWidth, uint16_t amountOfLines,
              uint16_t charWidth, uint16_t charHeight )
{
1a006aa4:	b538      	push	{r3, r4, r5, lr}
   lcd.lineWidth = lineWidth;
1a006aa6:	4c3b      	ldr	r4, [pc, #236]	; (1a006b94 <lcdInit+0xf0>)
1a006aa8:	8020      	strh	r0, [r4, #0]
   lcd.amountOfLines = amountOfLines;
1a006aaa:	8061      	strh	r1, [r4, #2]
   lcd.charWidth = charWidth;
1a006aac:	80a2      	strh	r2, [r4, #4]
   lcd.charHeight = charHeight;
1a006aae:	80e3      	strh	r3, [r4, #6]
   lcd.x = 0;
1a006ab0:	2500      	movs	r5, #0
1a006ab2:	7225      	strb	r5, [r4, #8]
   lcd.y = 0;
1a006ab4:	7265      	strb	r5, [r4, #9]
   pcf8574TInit( I2C0, PCF8574T_I2C_ADDRESS );
   lcdPinSet( LCD_HD44780_BACKLIGHT, ON );
//   delay(100);
#else
   // Configure LCD Pins as Outputs
   lcdInitPinAsOutput( LCD_HD44780_RST );
1a006ab6:	2101      	movs	r1, #1
1a006ab8:	200f      	movs	r0, #15
1a006aba:	f7ff fdc5 	bl	1a006648 <gpioInit>
   lcdInitPinAsOutput( LCD_HD44780_RS );
1a006abe:	2101      	movs	r1, #1
1a006ac0:	2013      	movs	r0, #19
1a006ac2:	f7ff fdc1 	bl	1a006648 <gpioInit>
   lcdInitPinAsOutput( LCD_HD44780_RW );
1a006ac6:	2101      	movs	r1, #1
1a006ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a006acc:	f7ff fdbc 	bl	1a006648 <gpioInit>
   lcdInitPinAsOutput( LCD_HD44780_EN );
1a006ad0:	2101      	movs	r1, #1
1a006ad2:	2021      	movs	r0, #33	; 0x21
1a006ad4:	f7ff fdb8 	bl	1a006648 <gpioInit>
   lcdInitPinAsOutput( LCD_HD44780_D4 );
1a006ad8:	2101      	movs	r1, #1
1a006ada:	2010      	movs	r0, #16
1a006adc:	f7ff fdb4 	bl	1a006648 <gpioInit>
   lcdInitPinAsOutput( LCD_HD44780_D5 );
1a006ae0:	2101      	movs	r1, #1
1a006ae2:	2011      	movs	r0, #17
1a006ae4:	f7ff fdb0 	bl	1a006648 <gpioInit>
   lcdInitPinAsOutput( LCD_HD44780_D6 );
1a006ae8:	2101      	movs	r1, #1
1a006aea:	2012      	movs	r0, #18
1a006aec:	f7ff fdac 	bl	1a006648 <gpioInit>
   lcdInitPinAsOutput( LCD_HD44780_D7 );
1a006af0:	2101      	movs	r1, #1
1a006af2:	2014      	movs	r0, #20
1a006af4:	f7ff fda8 	bl	1a006648 <gpioInit>
#endif

   // Configure LCD for 4-bit mode
   lcdPinSet( LCD_HD44780_RW, OFF );     // RW = 0
1a006af8:	4629      	mov	r1, r5
1a006afa:	20ff      	movs	r0, #255	; 0xff
1a006afc:	f7ff ff74 	bl	1a0069e8 <lcdPinSet>
   lcdPinSet( LCD_HD44780_RS, OFF );     // RS = 0
1a006b00:	4629      	mov	r1, r5
1a006b02:	2013      	movs	r0, #19
1a006b04:	f7ff ff70 	bl	1a0069e8 <lcdPinSet>
   lcdPinSet( LCD_HD44780_EN, OFF );     // EN = 0
1a006b08:	4629      	mov	r1, r5
1a006b0a:	2021      	movs	r0, #33	; 0x21
1a006b0c:	f7ff ff6c 	bl	1a0069e8 <lcdPinSet>

   	   	//lcdCommandDelay();                    // Wait ///////////////////////////////////////
   	   //lcdCommand( 0x20 );                   // Command 0x20 for 4-bit mode
        lcdCommand( 0x30 );                   // Command 0x20 for 4-bit mode
1a006b10:	2030      	movs	r0, #48	; 0x30
1a006b12:	f7ff ff93 	bl	1a006a3c <lcdCommand>
        lcdCommandDelay();                    // Wait
1a006b16:	206e      	movs	r0, #110	; 0x6e
1a006b18:	2100      	movs	r1, #0
1a006b1a:	f7ff ff1a 	bl	1a006952 <delayInaccurateUs>
        lcdDelay_ms(100); //////////////////////////////////////////////////////////////////
1a006b1e:	2064      	movs	r0, #100	; 0x64
1a006b20:	2100      	movs	r1, #0
1a006b22:	f7ff fee9 	bl	1a0068f8 <delayInaccurateMs>
        //lcdCommand( 0x20 );                   // Command 0x20 for 4-bit mode
        //lcdCommand( 0x00 );                   // Command 0x20 for 4-bit mode
        //lcdCommandDelay();                    // Wait
        lcdCommand( 0x30 );                   // Command 0x20 for 4-bit mode
1a006b26:	2030      	movs	r0, #48	; 0x30
1a006b28:	f7ff ff88 	bl	1a006a3c <lcdCommand>
        lcdDelay_us(40);
1a006b2c:	2028      	movs	r0, #40	; 0x28
1a006b2e:	2100      	movs	r1, #0
1a006b30:	f7ff ff0f 	bl	1a006952 <delayInaccurateUs>
        lcdDelay_ms(5); //////////////////////////////////////////////////////////////////
1a006b34:	2005      	movs	r0, #5
1a006b36:	2100      	movs	r1, #0
1a006b38:	f7ff fede 	bl	1a0068f8 <delayInaccurateMs>
        ////////////////////////////////////////////////////////////////////////////
        lcdCommand( 0x30 );                   // Command 0x20 for 4-bit mode
1a006b3c:	2030      	movs	r0, #48	; 0x30
1a006b3e:	f7ff ff7d 	bl	1a006a3c <lcdCommand>
        lcdDelay_ms(100);                   // Wait
1a006b42:	2064      	movs	r0, #100	; 0x64
1a006b44:	2100      	movs	r1, #0
1a006b46:	f7ff fed7 	bl	1a0068f8 <delayInaccurateMs>
        ////////////////////////////////////////////////////////////////////////////
        //lcdCommand( 0x00 );                   // Command 0x20 for 4-bit mode
        //lcdCommand( 0xF0 );                   // Command 0x20 for 4-bit mode
        lcdCommand( 0x08 );                   // Command 0x20 for 4-bit mode
1a006b4a:	2008      	movs	r0, #8
1a006b4c:	f7ff ff76 	bl	1a006a3c <lcdCommand>
        lcdCommandDelay();                    // Wait
1a006b50:	206e      	movs	r0, #110	; 0x6e
1a006b52:	2100      	movs	r1, #0
1a006b54:	f7ff fefd 	bl	1a006952 <delayInaccurateUs>
 
        //lcdCommand( 0x00 );                   // Command 0x20 for 4-bit mode
        //lcdCommand( 0x10 );                   // Command 0x20 for 4-bit mode
        lcdCommand( 0x01 );                   // Command 0x20 for 4-bit mode
1a006b58:	2001      	movs	r0, #1
1a006b5a:	f7ff ff6f 	bl	1a006a3c <lcdCommand>
        lcdDelay_ms(12);
1a006b5e:	200c      	movs	r0, #12
1a006b60:	2100      	movs	r1, #0
1a006b62:	f7ff fec9 	bl	1a0068f8 <delayInaccurateMs>
 
        //lcdCommand( 0x00 );                   // Command 0x20 for 4-bit mode
        //lcdCommand( 0x70 );                   // Command 0x20 for 4-bit mode
        //lcdCommandDelay();                    // Wait
        
        lcdCommand( 0x06 );                   // Command 0x20 for 4-bit mode
1a006b66:	2006      	movs	r0, #6
1a006b68:	f7ff ff68 	bl	1a006a3c <lcdCommand>
        lcdDelay_ms( 1 );                     // Wait
1a006b6c:	2001      	movs	r0, #1
1a006b6e:	2100      	movs	r1, #0
1a006b70:	f7ff fec2 	bl	1a0068f8 <delayInaccurateMs>
        
        lcdCommand( 0x0C );                   // Command 0x20 for 4-bit mode
1a006b74:	200c      	movs	r0, #12
1a006b76:	f7ff ff61 	bl	1a006a3c <lcdCommand>
        lcdDelay_ms( 3 );                     // Wait
1a006b7a:	2003      	movs	r0, #3
1a006b7c:	2100      	movs	r1, #0
1a006b7e:	f7ff febb 	bl	1a0068f8 <delayInaccurateMs>
        
        lcdCommand( 0x02 );                   // Command 0x20 for 4-bit mode
1a006b82:	2002      	movs	r0, #2
1a006b84:	f7ff ff5a 	bl	1a006a3c <lcdCommand>
        lcdDelay_ms( 3 );                     // Wait
1a006b88:	2003      	movs	r0, #3
1a006b8a:	2100      	movs	r1, #0
1a006b8c:	f7ff feb4 	bl	1a0068f8 <delayInaccurateMs>
   lcdCursorSet( LCD_CURSOR_OFF );
   //lcdGoToXY( 0, 0 );
   lcdClearAndHome();
   
*/
}
1a006b90:	bd38      	pop	{r3, r4, r5, pc}
1a006b92:	bf00      	nop
1a006b94:	10004c14 	.word	0x10004c14

1a006b98 <lcdGoToXY>:

void lcdGoToXY( uint8_t x, uint8_t y )
{
   if( x >= lcd.lineWidth || y >= lcd.amountOfLines ) {
1a006b98:	b282      	uxth	r2, r0
1a006b9a:	4b11      	ldr	r3, [pc, #68]	; (1a006be0 <lcdGoToXY+0x48>)
1a006b9c:	881b      	ldrh	r3, [r3, #0]
1a006b9e:	429a      	cmp	r2, r3
1a006ba0:	d204      	bcs.n	1a006bac <lcdGoToXY+0x14>
1a006ba2:	b28b      	uxth	r3, r1
1a006ba4:	4a0e      	ldr	r2, [pc, #56]	; (1a006be0 <lcdGoToXY+0x48>)
1a006ba6:	8852      	ldrh	r2, [r2, #2]
1a006ba8:	4293      	cmp	r3, r2
1a006baa:	d300      	bcc.n	1a006bae <lcdGoToXY+0x16>
1a006bac:	4770      	bx	lr
{
1a006bae:	b530      	push	{r4, r5, lr}
1a006bb0:	b083      	sub	sp, #12
1a006bb2:	460d      	mov	r5, r1
1a006bb4:	4604      	mov	r4, r0
      return;
   }
   uint8_t firstCharAdress[] = { 0x80, 0xC0, 0x94, 0xD4 };   // See table 12-5
1a006bb6:	4b0b      	ldr	r3, [pc, #44]	; (1a006be4 <lcdGoToXY+0x4c>)
1a006bb8:	681b      	ldr	r3, [r3, #0]
1a006bba:	9301      	str	r3, [sp, #4]
   //lcdCommand( firstCharAdress[ y - 1 ] + x - 1 ); // Start in {x,y} = {1,1}
   lcdCommand( firstCharAdress[y] + x );             // Start in {x,y} = {0,0}
1a006bbc:	ab02      	add	r3, sp, #8
1a006bbe:	440b      	add	r3, r1
1a006bc0:	f813 0c04 	ldrb.w	r0, [r3, #-4]
1a006bc4:	4420      	add	r0, r4
1a006bc6:	b2c0      	uxtb	r0, r0
1a006bc8:	f7ff ff38 	bl	1a006a3c <lcdCommand>
   lcdDelay_us( LCD_HIGH_WAIT_US );      // Wait
1a006bcc:	2064      	movs	r0, #100	; 0x64
1a006bce:	2100      	movs	r1, #0
1a006bd0:	f7ff febf 	bl	1a006952 <delayInaccurateUs>
   lcd.x = x;
1a006bd4:	4b02      	ldr	r3, [pc, #8]	; (1a006be0 <lcdGoToXY+0x48>)
1a006bd6:	721c      	strb	r4, [r3, #8]
   lcd.y = y;
1a006bd8:	725d      	strb	r5, [r3, #9]
}
1a006bda:	b003      	add	sp, #12
1a006bdc:	bd30      	pop	{r4, r5, pc}
1a006bde:	bf00      	nop
1a006be0:	10004c14 	.word	0x10004c14
1a006be4:	1a008b70 	.word	0x1a008b70

1a006be8 <lcdClear>:

void lcdClear( void )
{
1a006be8:	b508      	push	{r3, lr}
   lcdCommand( 0x01 );                   // Command 0x01 for clear LCD
1a006bea:	2001      	movs	r0, #1
1a006bec:	f7ff ff26 	bl	1a006a3c <lcdCommand>
   lcdDelay_ms(LCD_CLR_DISP_WAIT_MS);    // Wait
1a006bf0:	2003      	movs	r0, #3
1a006bf2:	2100      	movs	r1, #0
1a006bf4:	f7ff fe80 	bl	1a0068f8 <delayInaccurateMs>
}
1a006bf8:	bd08      	pop	{r3, pc}

1a006bfa <lcdCursorSet>:

void lcdCursorSet( lcdCursorModes_t mode )
{
1a006bfa:	b508      	push	{r3, lr}
   lcdCommand( 0b00001100 | mode );
1a006bfc:	f040 000c 	orr.w	r0, r0, #12
1a006c00:	f7ff ff1c 	bl	1a006a3c <lcdCommand>
   lcdDelay_ms(LCD_CLR_DISP_WAIT_MS); // Wait
1a006c04:	2003      	movs	r0, #3
1a006c06:	2100      	movs	r1, #0
1a006c08:	f7ff fe76 	bl	1a0068f8 <delayInaccurateMs>
}
1a006c0c:	bd08      	pop	{r3, pc}

1a006c0e <lcdSendStringRaw>:

void lcdSendStringRaw( char* str )
{
1a006c0e:	b538      	push	{r3, r4, r5, lr}
1a006c10:	4605      	mov	r5, r0
   uint8_t i = 0;
1a006c12:	2400      	movs	r4, #0
   while( str[i] != 0 ) {
1a006c14:	5d28      	ldrb	r0, [r5, r4]
1a006c16:	b120      	cbz	r0, 1a006c22 <lcdSendStringRaw+0x14>
      lcdData( str[i] );
1a006c18:	f7ff ff2c 	bl	1a006a74 <lcdData>
      i++;
1a006c1c:	3401      	adds	r4, #1
1a006c1e:	b2e4      	uxtb	r4, r4
1a006c20:	e7f8      	b.n	1a006c14 <lcdSendStringRaw+0x6>
   }
}
1a006c22:	bd38      	pop	{r3, r4, r5, pc}

1a006c24 <lcdCreateChar>:

void lcdCreateChar( uint8_t charnum, const char* chardata )
{
1a006c24:	b538      	push	{r3, r4, r5, lr}
1a006c26:	460d      	mov	r5, r1
   uint8_t i;
   charnum &= 0x07;
1a006c28:	f000 0007 	and.w	r0, r0, #7
   lcdCommand( E_SET_CGRAM_ADDR | (charnum << 3) );
1a006c2c:	00c0      	lsls	r0, r0, #3
1a006c2e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
1a006c32:	f7ff ff03 	bl	1a006a3c <lcdCommand>
   for (i = 0; i < 8; i++) {
1a006c36:	2400      	movs	r4, #0
1a006c38:	e004      	b.n	1a006c44 <lcdCreateChar+0x20>
      lcdData( chardata[i] );
1a006c3a:	5d28      	ldrb	r0, [r5, r4]
1a006c3c:	f7ff ff1a 	bl	1a006a74 <lcdData>
   for (i = 0; i < 8; i++) {
1a006c40:	3401      	adds	r4, #1
1a006c42:	b2e4      	uxtb	r4, r4
1a006c44:	2c07      	cmp	r4, #7
1a006c46:	d9f8      	bls.n	1a006c3a <lcdCreateChar+0x16>
   }
   delay(1);
1a006c48:	2001      	movs	r0, #1
1a006c4a:	2100      	movs	r1, #0
1a006c4c:	f7ff feb0 	bl	1a0069b0 <delay>
   lcdGoToXY( lcd.x, lcd.y );
1a006c50:	4b02      	ldr	r3, [pc, #8]	; (1a006c5c <lcdCreateChar+0x38>)
1a006c52:	7a59      	ldrb	r1, [r3, #9]
1a006c54:	7a18      	ldrb	r0, [r3, #8]
1a006c56:	f7ff ff9f 	bl	1a006b98 <lcdGoToXY>
}
1a006c5a:	bd38      	pop	{r3, r4, r5, pc}
1a006c5c:	10004c14 	.word	0x10004c14

1a006c60 <__aeabi_uldivmod>:
1a006c60:	b953      	cbnz	r3, 1a006c78 <__aeabi_uldivmod+0x18>
1a006c62:	b94a      	cbnz	r2, 1a006c78 <__aeabi_uldivmod+0x18>
1a006c64:	2900      	cmp	r1, #0
1a006c66:	bf08      	it	eq
1a006c68:	2800      	cmpeq	r0, #0
1a006c6a:	bf1c      	itt	ne
1a006c6c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a006c70:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a006c74:	f000 b974 	b.w	1a006f60 <__aeabi_idiv0>
1a006c78:	f1ad 0c08 	sub.w	ip, sp, #8
1a006c7c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a006c80:	f000 f806 	bl	1a006c90 <__udivmoddi4>
1a006c84:	f8dd e004 	ldr.w	lr, [sp, #4]
1a006c88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a006c8c:	b004      	add	sp, #16
1a006c8e:	4770      	bx	lr

1a006c90 <__udivmoddi4>:
1a006c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a006c94:	9e08      	ldr	r6, [sp, #32]
1a006c96:	4604      	mov	r4, r0
1a006c98:	4688      	mov	r8, r1
1a006c9a:	2b00      	cmp	r3, #0
1a006c9c:	f040 8085 	bne.w	1a006daa <__udivmoddi4+0x11a>
1a006ca0:	428a      	cmp	r2, r1
1a006ca2:	4615      	mov	r5, r2
1a006ca4:	d948      	bls.n	1a006d38 <__udivmoddi4+0xa8>
1a006ca6:	fab2 f282 	clz	r2, r2
1a006caa:	b14a      	cbz	r2, 1a006cc0 <__udivmoddi4+0x30>
1a006cac:	f1c2 0720 	rsb	r7, r2, #32
1a006cb0:	fa01 f302 	lsl.w	r3, r1, r2
1a006cb4:	fa20 f707 	lsr.w	r7, r0, r7
1a006cb8:	4095      	lsls	r5, r2
1a006cba:	ea47 0803 	orr.w	r8, r7, r3
1a006cbe:	4094      	lsls	r4, r2
1a006cc0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a006cc4:	0c23      	lsrs	r3, r4, #16
1a006cc6:	fbb8 f7fe 	udiv	r7, r8, lr
1a006cca:	fa1f fc85 	uxth.w	ip, r5
1a006cce:	fb0e 8817 	mls	r8, lr, r7, r8
1a006cd2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a006cd6:	fb07 f10c 	mul.w	r1, r7, ip
1a006cda:	4299      	cmp	r1, r3
1a006cdc:	d909      	bls.n	1a006cf2 <__udivmoddi4+0x62>
1a006cde:	18eb      	adds	r3, r5, r3
1a006ce0:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a006ce4:	f080 80e3 	bcs.w	1a006eae <__udivmoddi4+0x21e>
1a006ce8:	4299      	cmp	r1, r3
1a006cea:	f240 80e0 	bls.w	1a006eae <__udivmoddi4+0x21e>
1a006cee:	3f02      	subs	r7, #2
1a006cf0:	442b      	add	r3, r5
1a006cf2:	1a5b      	subs	r3, r3, r1
1a006cf4:	b2a4      	uxth	r4, r4
1a006cf6:	fbb3 f0fe 	udiv	r0, r3, lr
1a006cfa:	fb0e 3310 	mls	r3, lr, r0, r3
1a006cfe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a006d02:	fb00 fc0c 	mul.w	ip, r0, ip
1a006d06:	45a4      	cmp	ip, r4
1a006d08:	d909      	bls.n	1a006d1e <__udivmoddi4+0x8e>
1a006d0a:	192c      	adds	r4, r5, r4
1a006d0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a006d10:	f080 80cb 	bcs.w	1a006eaa <__udivmoddi4+0x21a>
1a006d14:	45a4      	cmp	ip, r4
1a006d16:	f240 80c8 	bls.w	1a006eaa <__udivmoddi4+0x21a>
1a006d1a:	3802      	subs	r0, #2
1a006d1c:	442c      	add	r4, r5
1a006d1e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a006d22:	eba4 040c 	sub.w	r4, r4, ip
1a006d26:	2700      	movs	r7, #0
1a006d28:	b11e      	cbz	r6, 1a006d32 <__udivmoddi4+0xa2>
1a006d2a:	40d4      	lsrs	r4, r2
1a006d2c:	2300      	movs	r3, #0
1a006d2e:	e9c6 4300 	strd	r4, r3, [r6]
1a006d32:	4639      	mov	r1, r7
1a006d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a006d38:	2a00      	cmp	r2, #0
1a006d3a:	d053      	beq.n	1a006de4 <__udivmoddi4+0x154>
1a006d3c:	fab2 f282 	clz	r2, r2
1a006d40:	2a00      	cmp	r2, #0
1a006d42:	f040 80b6 	bne.w	1a006eb2 <__udivmoddi4+0x222>
1a006d46:	1b49      	subs	r1, r1, r5
1a006d48:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a006d4c:	fa1f f885 	uxth.w	r8, r5
1a006d50:	2701      	movs	r7, #1
1a006d52:	fbb1 fcfe 	udiv	ip, r1, lr
1a006d56:	0c23      	lsrs	r3, r4, #16
1a006d58:	fb0e 111c 	mls	r1, lr, ip, r1
1a006d5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a006d60:	fb08 f10c 	mul.w	r1, r8, ip
1a006d64:	4299      	cmp	r1, r3
1a006d66:	d907      	bls.n	1a006d78 <__udivmoddi4+0xe8>
1a006d68:	18eb      	adds	r3, r5, r3
1a006d6a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a006d6e:	d202      	bcs.n	1a006d76 <__udivmoddi4+0xe6>
1a006d70:	4299      	cmp	r1, r3
1a006d72:	f200 80ec 	bhi.w	1a006f4e <__udivmoddi4+0x2be>
1a006d76:	4684      	mov	ip, r0
1a006d78:	1a59      	subs	r1, r3, r1
1a006d7a:	b2a3      	uxth	r3, r4
1a006d7c:	fbb1 f0fe 	udiv	r0, r1, lr
1a006d80:	fb0e 1410 	mls	r4, lr, r0, r1
1a006d84:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a006d88:	fb08 f800 	mul.w	r8, r8, r0
1a006d8c:	45a0      	cmp	r8, r4
1a006d8e:	d907      	bls.n	1a006da0 <__udivmoddi4+0x110>
1a006d90:	192c      	adds	r4, r5, r4
1a006d92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a006d96:	d202      	bcs.n	1a006d9e <__udivmoddi4+0x10e>
1a006d98:	45a0      	cmp	r8, r4
1a006d9a:	f200 80dc 	bhi.w	1a006f56 <__udivmoddi4+0x2c6>
1a006d9e:	4618      	mov	r0, r3
1a006da0:	eba4 0408 	sub.w	r4, r4, r8
1a006da4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a006da8:	e7be      	b.n	1a006d28 <__udivmoddi4+0x98>
1a006daa:	428b      	cmp	r3, r1
1a006dac:	d908      	bls.n	1a006dc0 <__udivmoddi4+0x130>
1a006dae:	2e00      	cmp	r6, #0
1a006db0:	d078      	beq.n	1a006ea4 <__udivmoddi4+0x214>
1a006db2:	2700      	movs	r7, #0
1a006db4:	e9c6 0100 	strd	r0, r1, [r6]
1a006db8:	4638      	mov	r0, r7
1a006dba:	4639      	mov	r1, r7
1a006dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a006dc0:	fab3 f783 	clz	r7, r3
1a006dc4:	b97f      	cbnz	r7, 1a006de6 <__udivmoddi4+0x156>
1a006dc6:	428b      	cmp	r3, r1
1a006dc8:	d302      	bcc.n	1a006dd0 <__udivmoddi4+0x140>
1a006dca:	4282      	cmp	r2, r0
1a006dcc:	f200 80bd 	bhi.w	1a006f4a <__udivmoddi4+0x2ba>
1a006dd0:	1a84      	subs	r4, r0, r2
1a006dd2:	eb61 0303 	sbc.w	r3, r1, r3
1a006dd6:	2001      	movs	r0, #1
1a006dd8:	4698      	mov	r8, r3
1a006dda:	2e00      	cmp	r6, #0
1a006ddc:	d0a9      	beq.n	1a006d32 <__udivmoddi4+0xa2>
1a006dde:	e9c6 4800 	strd	r4, r8, [r6]
1a006de2:	e7a6      	b.n	1a006d32 <__udivmoddi4+0xa2>
1a006de4:	deff      	udf	#255	; 0xff
1a006de6:	f1c7 0520 	rsb	r5, r7, #32
1a006dea:	40bb      	lsls	r3, r7
1a006dec:	fa22 fc05 	lsr.w	ip, r2, r5
1a006df0:	ea4c 0c03 	orr.w	ip, ip, r3
1a006df4:	fa01 f407 	lsl.w	r4, r1, r7
1a006df8:	fa20 f805 	lsr.w	r8, r0, r5
1a006dfc:	fa21 f305 	lsr.w	r3, r1, r5
1a006e00:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a006e04:	ea48 0404 	orr.w	r4, r8, r4
1a006e08:	fbb3 f9fe 	udiv	r9, r3, lr
1a006e0c:	0c21      	lsrs	r1, r4, #16
1a006e0e:	fb0e 3319 	mls	r3, lr, r9, r3
1a006e12:	fa1f f88c 	uxth.w	r8, ip
1a006e16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a006e1a:	fb09 fa08 	mul.w	sl, r9, r8
1a006e1e:	459a      	cmp	sl, r3
1a006e20:	fa02 f207 	lsl.w	r2, r2, r7
1a006e24:	fa00 f107 	lsl.w	r1, r0, r7
1a006e28:	d90b      	bls.n	1a006e42 <__udivmoddi4+0x1b2>
1a006e2a:	eb1c 0303 	adds.w	r3, ip, r3
1a006e2e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a006e32:	f080 8088 	bcs.w	1a006f46 <__udivmoddi4+0x2b6>
1a006e36:	459a      	cmp	sl, r3
1a006e38:	f240 8085 	bls.w	1a006f46 <__udivmoddi4+0x2b6>
1a006e3c:	f1a9 0902 	sub.w	r9, r9, #2
1a006e40:	4463      	add	r3, ip
1a006e42:	eba3 030a 	sub.w	r3, r3, sl
1a006e46:	b2a4      	uxth	r4, r4
1a006e48:	fbb3 f0fe 	udiv	r0, r3, lr
1a006e4c:	fb0e 3310 	mls	r3, lr, r0, r3
1a006e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a006e54:	fb00 f808 	mul.w	r8, r0, r8
1a006e58:	45a0      	cmp	r8, r4
1a006e5a:	d908      	bls.n	1a006e6e <__udivmoddi4+0x1de>
1a006e5c:	eb1c 0404 	adds.w	r4, ip, r4
1a006e60:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a006e64:	d26b      	bcs.n	1a006f3e <__udivmoddi4+0x2ae>
1a006e66:	45a0      	cmp	r8, r4
1a006e68:	d969      	bls.n	1a006f3e <__udivmoddi4+0x2ae>
1a006e6a:	3802      	subs	r0, #2
1a006e6c:	4464      	add	r4, ip
1a006e6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a006e72:	eba4 0408 	sub.w	r4, r4, r8
1a006e76:	fba0 8902 	umull	r8, r9, r0, r2
1a006e7a:	454c      	cmp	r4, r9
1a006e7c:	46c6      	mov	lr, r8
1a006e7e:	464b      	mov	r3, r9
1a006e80:	d354      	bcc.n	1a006f2c <__udivmoddi4+0x29c>
1a006e82:	d051      	beq.n	1a006f28 <__udivmoddi4+0x298>
1a006e84:	2e00      	cmp	r6, #0
1a006e86:	d069      	beq.n	1a006f5c <__udivmoddi4+0x2cc>
1a006e88:	ebb1 020e 	subs.w	r2, r1, lr
1a006e8c:	eb64 0403 	sbc.w	r4, r4, r3
1a006e90:	fa04 f505 	lsl.w	r5, r4, r5
1a006e94:	fa22 f307 	lsr.w	r3, r2, r7
1a006e98:	40fc      	lsrs	r4, r7
1a006e9a:	431d      	orrs	r5, r3
1a006e9c:	e9c6 5400 	strd	r5, r4, [r6]
1a006ea0:	2700      	movs	r7, #0
1a006ea2:	e746      	b.n	1a006d32 <__udivmoddi4+0xa2>
1a006ea4:	4637      	mov	r7, r6
1a006ea6:	4630      	mov	r0, r6
1a006ea8:	e743      	b.n	1a006d32 <__udivmoddi4+0xa2>
1a006eaa:	4618      	mov	r0, r3
1a006eac:	e737      	b.n	1a006d1e <__udivmoddi4+0x8e>
1a006eae:	4607      	mov	r7, r0
1a006eb0:	e71f      	b.n	1a006cf2 <__udivmoddi4+0x62>
1a006eb2:	f1c2 0320 	rsb	r3, r2, #32
1a006eb6:	fa20 f703 	lsr.w	r7, r0, r3
1a006eba:	4095      	lsls	r5, r2
1a006ebc:	fa01 f002 	lsl.w	r0, r1, r2
1a006ec0:	fa21 f303 	lsr.w	r3, r1, r3
1a006ec4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a006ec8:	4338      	orrs	r0, r7
1a006eca:	0c01      	lsrs	r1, r0, #16
1a006ecc:	fbb3 f7fe 	udiv	r7, r3, lr
1a006ed0:	fa1f f885 	uxth.w	r8, r5
1a006ed4:	fb0e 3317 	mls	r3, lr, r7, r3
1a006ed8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a006edc:	fb07 f308 	mul.w	r3, r7, r8
1a006ee0:	428b      	cmp	r3, r1
1a006ee2:	fa04 f402 	lsl.w	r4, r4, r2
1a006ee6:	d907      	bls.n	1a006ef8 <__udivmoddi4+0x268>
1a006ee8:	1869      	adds	r1, r5, r1
1a006eea:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a006eee:	d228      	bcs.n	1a006f42 <__udivmoddi4+0x2b2>
1a006ef0:	428b      	cmp	r3, r1
1a006ef2:	d926      	bls.n	1a006f42 <__udivmoddi4+0x2b2>
1a006ef4:	3f02      	subs	r7, #2
1a006ef6:	4429      	add	r1, r5
1a006ef8:	1acb      	subs	r3, r1, r3
1a006efa:	b281      	uxth	r1, r0
1a006efc:	fbb3 f0fe 	udiv	r0, r3, lr
1a006f00:	fb0e 3310 	mls	r3, lr, r0, r3
1a006f04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a006f08:	fb00 f308 	mul.w	r3, r0, r8
1a006f0c:	428b      	cmp	r3, r1
1a006f0e:	d907      	bls.n	1a006f20 <__udivmoddi4+0x290>
1a006f10:	1869      	adds	r1, r5, r1
1a006f12:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a006f16:	d210      	bcs.n	1a006f3a <__udivmoddi4+0x2aa>
1a006f18:	428b      	cmp	r3, r1
1a006f1a:	d90e      	bls.n	1a006f3a <__udivmoddi4+0x2aa>
1a006f1c:	3802      	subs	r0, #2
1a006f1e:	4429      	add	r1, r5
1a006f20:	1ac9      	subs	r1, r1, r3
1a006f22:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a006f26:	e714      	b.n	1a006d52 <__udivmoddi4+0xc2>
1a006f28:	4541      	cmp	r1, r8
1a006f2a:	d2ab      	bcs.n	1a006e84 <__udivmoddi4+0x1f4>
1a006f2c:	ebb8 0e02 	subs.w	lr, r8, r2
1a006f30:	eb69 020c 	sbc.w	r2, r9, ip
1a006f34:	3801      	subs	r0, #1
1a006f36:	4613      	mov	r3, r2
1a006f38:	e7a4      	b.n	1a006e84 <__udivmoddi4+0x1f4>
1a006f3a:	4660      	mov	r0, ip
1a006f3c:	e7f0      	b.n	1a006f20 <__udivmoddi4+0x290>
1a006f3e:	4618      	mov	r0, r3
1a006f40:	e795      	b.n	1a006e6e <__udivmoddi4+0x1de>
1a006f42:	4667      	mov	r7, ip
1a006f44:	e7d8      	b.n	1a006ef8 <__udivmoddi4+0x268>
1a006f46:	4681      	mov	r9, r0
1a006f48:	e77b      	b.n	1a006e42 <__udivmoddi4+0x1b2>
1a006f4a:	4638      	mov	r0, r7
1a006f4c:	e745      	b.n	1a006dda <__udivmoddi4+0x14a>
1a006f4e:	f1ac 0c02 	sub.w	ip, ip, #2
1a006f52:	442b      	add	r3, r5
1a006f54:	e710      	b.n	1a006d78 <__udivmoddi4+0xe8>
1a006f56:	3802      	subs	r0, #2
1a006f58:	442c      	add	r4, r5
1a006f5a:	e721      	b.n	1a006da0 <__udivmoddi4+0x110>
1a006f5c:	4637      	mov	r7, r6
1a006f5e:	e6e8      	b.n	1a006d32 <__udivmoddi4+0xa2>

1a006f60 <__aeabi_idiv0>:
1a006f60:	4770      	bx	lr
1a006f62:	bf00      	nop

1a006f64 <__sflush_r>:
1a006f64:	898a      	ldrh	r2, [r1, #12]
1a006f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a006f6a:	4605      	mov	r5, r0
1a006f6c:	0710      	lsls	r0, r2, #28
1a006f6e:	460c      	mov	r4, r1
1a006f70:	d458      	bmi.n	1a007024 <__sflush_r+0xc0>
1a006f72:	684b      	ldr	r3, [r1, #4]
1a006f74:	2b00      	cmp	r3, #0
1a006f76:	dc05      	bgt.n	1a006f84 <__sflush_r+0x20>
1a006f78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a006f7a:	2b00      	cmp	r3, #0
1a006f7c:	dc02      	bgt.n	1a006f84 <__sflush_r+0x20>
1a006f7e:	2000      	movs	r0, #0
1a006f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a006f84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a006f86:	2e00      	cmp	r6, #0
1a006f88:	d0f9      	beq.n	1a006f7e <__sflush_r+0x1a>
1a006f8a:	2300      	movs	r3, #0
1a006f8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a006f90:	682f      	ldr	r7, [r5, #0]
1a006f92:	602b      	str	r3, [r5, #0]
1a006f94:	d032      	beq.n	1a006ffc <__sflush_r+0x98>
1a006f96:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a006f98:	89a3      	ldrh	r3, [r4, #12]
1a006f9a:	075a      	lsls	r2, r3, #29
1a006f9c:	d505      	bpl.n	1a006faa <__sflush_r+0x46>
1a006f9e:	6863      	ldr	r3, [r4, #4]
1a006fa0:	1ac0      	subs	r0, r0, r3
1a006fa2:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a006fa4:	b10b      	cbz	r3, 1a006faa <__sflush_r+0x46>
1a006fa6:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a006fa8:	1ac0      	subs	r0, r0, r3
1a006faa:	2300      	movs	r3, #0
1a006fac:	4602      	mov	r2, r0
1a006fae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a006fb0:	6a21      	ldr	r1, [r4, #32]
1a006fb2:	4628      	mov	r0, r5
1a006fb4:	47b0      	blx	r6
1a006fb6:	1c43      	adds	r3, r0, #1
1a006fb8:	89a3      	ldrh	r3, [r4, #12]
1a006fba:	d106      	bne.n	1a006fca <__sflush_r+0x66>
1a006fbc:	6829      	ldr	r1, [r5, #0]
1a006fbe:	291d      	cmp	r1, #29
1a006fc0:	d849      	bhi.n	1a007056 <__sflush_r+0xf2>
1a006fc2:	4a2a      	ldr	r2, [pc, #168]	; (1a00706c <__sflush_r+0x108>)
1a006fc4:	40ca      	lsrs	r2, r1
1a006fc6:	07d6      	lsls	r6, r2, #31
1a006fc8:	d545      	bpl.n	1a007056 <__sflush_r+0xf2>
1a006fca:	2200      	movs	r2, #0
1a006fcc:	6062      	str	r2, [r4, #4]
1a006fce:	04d9      	lsls	r1, r3, #19
1a006fd0:	6922      	ldr	r2, [r4, #16]
1a006fd2:	6022      	str	r2, [r4, #0]
1a006fd4:	d504      	bpl.n	1a006fe0 <__sflush_r+0x7c>
1a006fd6:	1c42      	adds	r2, r0, #1
1a006fd8:	d101      	bne.n	1a006fde <__sflush_r+0x7a>
1a006fda:	682b      	ldr	r3, [r5, #0]
1a006fdc:	b903      	cbnz	r3, 1a006fe0 <__sflush_r+0x7c>
1a006fde:	6560      	str	r0, [r4, #84]	; 0x54
1a006fe0:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a006fe2:	602f      	str	r7, [r5, #0]
1a006fe4:	2900      	cmp	r1, #0
1a006fe6:	d0ca      	beq.n	1a006f7e <__sflush_r+0x1a>
1a006fe8:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a006fec:	4299      	cmp	r1, r3
1a006fee:	d002      	beq.n	1a006ff6 <__sflush_r+0x92>
1a006ff0:	4628      	mov	r0, r5
1a006ff2:	f000 f9ab 	bl	1a00734c <_free_r>
1a006ff6:	2000      	movs	r0, #0
1a006ff8:	6360      	str	r0, [r4, #52]	; 0x34
1a006ffa:	e7c1      	b.n	1a006f80 <__sflush_r+0x1c>
1a006ffc:	6a21      	ldr	r1, [r4, #32]
1a006ffe:	2301      	movs	r3, #1
1a007000:	4628      	mov	r0, r5
1a007002:	47b0      	blx	r6
1a007004:	1c41      	adds	r1, r0, #1
1a007006:	d1c7      	bne.n	1a006f98 <__sflush_r+0x34>
1a007008:	682b      	ldr	r3, [r5, #0]
1a00700a:	2b00      	cmp	r3, #0
1a00700c:	d0c4      	beq.n	1a006f98 <__sflush_r+0x34>
1a00700e:	2b1d      	cmp	r3, #29
1a007010:	d001      	beq.n	1a007016 <__sflush_r+0xb2>
1a007012:	2b16      	cmp	r3, #22
1a007014:	d101      	bne.n	1a00701a <__sflush_r+0xb6>
1a007016:	602f      	str	r7, [r5, #0]
1a007018:	e7b1      	b.n	1a006f7e <__sflush_r+0x1a>
1a00701a:	89a3      	ldrh	r3, [r4, #12]
1a00701c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a007020:	81a3      	strh	r3, [r4, #12]
1a007022:	e7ad      	b.n	1a006f80 <__sflush_r+0x1c>
1a007024:	690f      	ldr	r7, [r1, #16]
1a007026:	2f00      	cmp	r7, #0
1a007028:	d0a9      	beq.n	1a006f7e <__sflush_r+0x1a>
1a00702a:	0793      	lsls	r3, r2, #30
1a00702c:	680e      	ldr	r6, [r1, #0]
1a00702e:	bf08      	it	eq
1a007030:	694b      	ldreq	r3, [r1, #20]
1a007032:	600f      	str	r7, [r1, #0]
1a007034:	bf18      	it	ne
1a007036:	2300      	movne	r3, #0
1a007038:	eba6 0807 	sub.w	r8, r6, r7
1a00703c:	608b      	str	r3, [r1, #8]
1a00703e:	f1b8 0f00 	cmp.w	r8, #0
1a007042:	dd9c      	ble.n	1a006f7e <__sflush_r+0x1a>
1a007044:	4643      	mov	r3, r8
1a007046:	463a      	mov	r2, r7
1a007048:	6a21      	ldr	r1, [r4, #32]
1a00704a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a00704c:	4628      	mov	r0, r5
1a00704e:	47b0      	blx	r6
1a007050:	2800      	cmp	r0, #0
1a007052:	dc06      	bgt.n	1a007062 <__sflush_r+0xfe>
1a007054:	89a3      	ldrh	r3, [r4, #12]
1a007056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00705a:	81a3      	strh	r3, [r4, #12]
1a00705c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a007060:	e78e      	b.n	1a006f80 <__sflush_r+0x1c>
1a007062:	4407      	add	r7, r0
1a007064:	eba8 0800 	sub.w	r8, r8, r0
1a007068:	e7e9      	b.n	1a00703e <__sflush_r+0xda>
1a00706a:	bf00      	nop
1a00706c:	20400001 	.word	0x20400001

1a007070 <_fflush_r>:
1a007070:	b538      	push	{r3, r4, r5, lr}
1a007072:	690b      	ldr	r3, [r1, #16]
1a007074:	4605      	mov	r5, r0
1a007076:	460c      	mov	r4, r1
1a007078:	b913      	cbnz	r3, 1a007080 <_fflush_r+0x10>
1a00707a:	2500      	movs	r5, #0
1a00707c:	4628      	mov	r0, r5
1a00707e:	bd38      	pop	{r3, r4, r5, pc}
1a007080:	b118      	cbz	r0, 1a00708a <_fflush_r+0x1a>
1a007082:	6983      	ldr	r3, [r0, #24]
1a007084:	b90b      	cbnz	r3, 1a00708a <_fflush_r+0x1a>
1a007086:	f000 f887 	bl	1a007198 <__sinit>
1a00708a:	4b14      	ldr	r3, [pc, #80]	; (1a0070dc <_fflush_r+0x6c>)
1a00708c:	429c      	cmp	r4, r3
1a00708e:	d11b      	bne.n	1a0070c8 <_fflush_r+0x58>
1a007090:	686c      	ldr	r4, [r5, #4]
1a007092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a007096:	2b00      	cmp	r3, #0
1a007098:	d0ef      	beq.n	1a00707a <_fflush_r+0xa>
1a00709a:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a00709c:	07d0      	lsls	r0, r2, #31
1a00709e:	d404      	bmi.n	1a0070aa <_fflush_r+0x3a>
1a0070a0:	0599      	lsls	r1, r3, #22
1a0070a2:	d402      	bmi.n	1a0070aa <_fflush_r+0x3a>
1a0070a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0070a6:	f000 f938 	bl	1a00731a <__retarget_lock_acquire_recursive>
1a0070aa:	4628      	mov	r0, r5
1a0070ac:	4621      	mov	r1, r4
1a0070ae:	f7ff ff59 	bl	1a006f64 <__sflush_r>
1a0070b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a0070b4:	07da      	lsls	r2, r3, #31
1a0070b6:	4605      	mov	r5, r0
1a0070b8:	d4e0      	bmi.n	1a00707c <_fflush_r+0xc>
1a0070ba:	89a3      	ldrh	r3, [r4, #12]
1a0070bc:	059b      	lsls	r3, r3, #22
1a0070be:	d4dd      	bmi.n	1a00707c <_fflush_r+0xc>
1a0070c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0070c2:	f000 f92b 	bl	1a00731c <__retarget_lock_release_recursive>
1a0070c6:	e7d9      	b.n	1a00707c <_fflush_r+0xc>
1a0070c8:	4b05      	ldr	r3, [pc, #20]	; (1a0070e0 <_fflush_r+0x70>)
1a0070ca:	429c      	cmp	r4, r3
1a0070cc:	d101      	bne.n	1a0070d2 <_fflush_r+0x62>
1a0070ce:	68ac      	ldr	r4, [r5, #8]
1a0070d0:	e7df      	b.n	1a007092 <_fflush_r+0x22>
1a0070d2:	4b04      	ldr	r3, [pc, #16]	; (1a0070e4 <_fflush_r+0x74>)
1a0070d4:	429c      	cmp	r4, r3
1a0070d6:	bf08      	it	eq
1a0070d8:	68ec      	ldreq	r4, [r5, #12]
1a0070da:	e7da      	b.n	1a007092 <_fflush_r+0x22>
1a0070dc:	1a008b94 	.word	0x1a008b94
1a0070e0:	1a008bb4 	.word	0x1a008bb4
1a0070e4:	1a008b74 	.word	0x1a008b74

1a0070e8 <std>:
1a0070e8:	2300      	movs	r3, #0
1a0070ea:	b510      	push	{r4, lr}
1a0070ec:	4604      	mov	r4, r0
1a0070ee:	e9c0 3300 	strd	r3, r3, [r0]
1a0070f2:	6083      	str	r3, [r0, #8]
1a0070f4:	8181      	strh	r1, [r0, #12]
1a0070f6:	6643      	str	r3, [r0, #100]	; 0x64
1a0070f8:	81c2      	strh	r2, [r0, #14]
1a0070fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a0070fe:	6183      	str	r3, [r0, #24]
1a007100:	4619      	mov	r1, r3
1a007102:	2208      	movs	r2, #8
1a007104:	305c      	adds	r0, #92	; 0x5c
1a007106:	f000 f918 	bl	1a00733a <memset>
1a00710a:	4b05      	ldr	r3, [pc, #20]	; (1a007120 <std+0x38>)
1a00710c:	6263      	str	r3, [r4, #36]	; 0x24
1a00710e:	4b05      	ldr	r3, [pc, #20]	; (1a007124 <std+0x3c>)
1a007110:	62a3      	str	r3, [r4, #40]	; 0x28
1a007112:	4b05      	ldr	r3, [pc, #20]	; (1a007128 <std+0x40>)
1a007114:	62e3      	str	r3, [r4, #44]	; 0x2c
1a007116:	4b05      	ldr	r3, [pc, #20]	; (1a00712c <std+0x44>)
1a007118:	6224      	str	r4, [r4, #32]
1a00711a:	6323      	str	r3, [r4, #48]	; 0x30
1a00711c:	bd10      	pop	{r4, pc}
1a00711e:	bf00      	nop
1a007120:	1a007b99 	.word	0x1a007b99
1a007124:	1a007bbb 	.word	0x1a007bbb
1a007128:	1a007bf3 	.word	0x1a007bf3
1a00712c:	1a007c17 	.word	0x1a007c17

1a007130 <_cleanup_r>:
1a007130:	4901      	ldr	r1, [pc, #4]	; (1a007138 <_cleanup_r+0x8>)
1a007132:	f000 b8af 	b.w	1a007294 <_fwalk_reent>
1a007136:	bf00      	nop
1a007138:	1a007071 	.word	0x1a007071

1a00713c <__sfmoreglue>:
1a00713c:	b570      	push	{r4, r5, r6, lr}
1a00713e:	1e4a      	subs	r2, r1, #1
1a007140:	2568      	movs	r5, #104	; 0x68
1a007142:	4355      	muls	r5, r2
1a007144:	460e      	mov	r6, r1
1a007146:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a00714a:	f000 f94d 	bl	1a0073e8 <_malloc_r>
1a00714e:	4604      	mov	r4, r0
1a007150:	b140      	cbz	r0, 1a007164 <__sfmoreglue+0x28>
1a007152:	2100      	movs	r1, #0
1a007154:	e9c0 1600 	strd	r1, r6, [r0]
1a007158:	300c      	adds	r0, #12
1a00715a:	60a0      	str	r0, [r4, #8]
1a00715c:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a007160:	f000 f8eb 	bl	1a00733a <memset>
1a007164:	4620      	mov	r0, r4
1a007166:	bd70      	pop	{r4, r5, r6, pc}

1a007168 <__sfp_lock_acquire>:
1a007168:	4801      	ldr	r0, [pc, #4]	; (1a007170 <__sfp_lock_acquire+0x8>)
1a00716a:	f000 b8d6 	b.w	1a00731a <__retarget_lock_acquire_recursive>
1a00716e:	bf00      	nop
1a007170:	10004ff4 	.word	0x10004ff4

1a007174 <__sfp_lock_release>:
1a007174:	4801      	ldr	r0, [pc, #4]	; (1a00717c <__sfp_lock_release+0x8>)
1a007176:	f000 b8d1 	b.w	1a00731c <__retarget_lock_release_recursive>
1a00717a:	bf00      	nop
1a00717c:	10004ff4 	.word	0x10004ff4

1a007180 <__sinit_lock_acquire>:
1a007180:	4801      	ldr	r0, [pc, #4]	; (1a007188 <__sinit_lock_acquire+0x8>)
1a007182:	f000 b8ca 	b.w	1a00731a <__retarget_lock_acquire_recursive>
1a007186:	bf00      	nop
1a007188:	10004fef 	.word	0x10004fef

1a00718c <__sinit_lock_release>:
1a00718c:	4801      	ldr	r0, [pc, #4]	; (1a007194 <__sinit_lock_release+0x8>)
1a00718e:	f000 b8c5 	b.w	1a00731c <__retarget_lock_release_recursive>
1a007192:	bf00      	nop
1a007194:	10004fef 	.word	0x10004fef

1a007198 <__sinit>:
1a007198:	b510      	push	{r4, lr}
1a00719a:	4604      	mov	r4, r0
1a00719c:	f7ff fff0 	bl	1a007180 <__sinit_lock_acquire>
1a0071a0:	69a3      	ldr	r3, [r4, #24]
1a0071a2:	b11b      	cbz	r3, 1a0071ac <__sinit+0x14>
1a0071a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a0071a8:	f7ff bff0 	b.w	1a00718c <__sinit_lock_release>
1a0071ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
1a0071b0:	6523      	str	r3, [r4, #80]	; 0x50
1a0071b2:	4b13      	ldr	r3, [pc, #76]	; (1a007200 <__sinit+0x68>)
1a0071b4:	4a13      	ldr	r2, [pc, #76]	; (1a007204 <__sinit+0x6c>)
1a0071b6:	681b      	ldr	r3, [r3, #0]
1a0071b8:	62a2      	str	r2, [r4, #40]	; 0x28
1a0071ba:	42a3      	cmp	r3, r4
1a0071bc:	bf04      	itt	eq
1a0071be:	2301      	moveq	r3, #1
1a0071c0:	61a3      	streq	r3, [r4, #24]
1a0071c2:	4620      	mov	r0, r4
1a0071c4:	f000 f820 	bl	1a007208 <__sfp>
1a0071c8:	6060      	str	r0, [r4, #4]
1a0071ca:	4620      	mov	r0, r4
1a0071cc:	f000 f81c 	bl	1a007208 <__sfp>
1a0071d0:	60a0      	str	r0, [r4, #8]
1a0071d2:	4620      	mov	r0, r4
1a0071d4:	f000 f818 	bl	1a007208 <__sfp>
1a0071d8:	2200      	movs	r2, #0
1a0071da:	60e0      	str	r0, [r4, #12]
1a0071dc:	2104      	movs	r1, #4
1a0071de:	6860      	ldr	r0, [r4, #4]
1a0071e0:	f7ff ff82 	bl	1a0070e8 <std>
1a0071e4:	2201      	movs	r2, #1
1a0071e6:	2109      	movs	r1, #9
1a0071e8:	68a0      	ldr	r0, [r4, #8]
1a0071ea:	f7ff ff7d 	bl	1a0070e8 <std>
1a0071ee:	2202      	movs	r2, #2
1a0071f0:	2112      	movs	r1, #18
1a0071f2:	68e0      	ldr	r0, [r4, #12]
1a0071f4:	f7ff ff78 	bl	1a0070e8 <std>
1a0071f8:	2301      	movs	r3, #1
1a0071fa:	61a3      	str	r3, [r4, #24]
1a0071fc:	e7d2      	b.n	1a0071a4 <__sinit+0xc>
1a0071fe:	bf00      	nop
1a007200:	1a008bd4 	.word	0x1a008bd4
1a007204:	1a007131 	.word	0x1a007131

1a007208 <__sfp>:
1a007208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00720a:	4607      	mov	r7, r0
1a00720c:	f7ff ffac 	bl	1a007168 <__sfp_lock_acquire>
1a007210:	4b1e      	ldr	r3, [pc, #120]	; (1a00728c <__sfp+0x84>)
1a007212:	681e      	ldr	r6, [r3, #0]
1a007214:	69b3      	ldr	r3, [r6, #24]
1a007216:	b913      	cbnz	r3, 1a00721e <__sfp+0x16>
1a007218:	4630      	mov	r0, r6
1a00721a:	f7ff ffbd 	bl	1a007198 <__sinit>
1a00721e:	3648      	adds	r6, #72	; 0x48
1a007220:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a007224:	3b01      	subs	r3, #1
1a007226:	d503      	bpl.n	1a007230 <__sfp+0x28>
1a007228:	6833      	ldr	r3, [r6, #0]
1a00722a:	b30b      	cbz	r3, 1a007270 <__sfp+0x68>
1a00722c:	6836      	ldr	r6, [r6, #0]
1a00722e:	e7f7      	b.n	1a007220 <__sfp+0x18>
1a007230:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a007234:	b9d5      	cbnz	r5, 1a00726c <__sfp+0x64>
1a007236:	4b16      	ldr	r3, [pc, #88]	; (1a007290 <__sfp+0x88>)
1a007238:	60e3      	str	r3, [r4, #12]
1a00723a:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a00723e:	6665      	str	r5, [r4, #100]	; 0x64
1a007240:	f000 f86a 	bl	1a007318 <__retarget_lock_init_recursive>
1a007244:	f7ff ff96 	bl	1a007174 <__sfp_lock_release>
1a007248:	6025      	str	r5, [r4, #0]
1a00724a:	e9c4 5501 	strd	r5, r5, [r4, #4]
1a00724e:	e9c4 5504 	strd	r5, r5, [r4, #16]
1a007252:	61a5      	str	r5, [r4, #24]
1a007254:	2208      	movs	r2, #8
1a007256:	4629      	mov	r1, r5
1a007258:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a00725c:	f000 f86d 	bl	1a00733a <memset>
1a007260:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a007264:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a007268:	4620      	mov	r0, r4
1a00726a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00726c:	3468      	adds	r4, #104	; 0x68
1a00726e:	e7d9      	b.n	1a007224 <__sfp+0x1c>
1a007270:	2104      	movs	r1, #4
1a007272:	4638      	mov	r0, r7
1a007274:	f7ff ff62 	bl	1a00713c <__sfmoreglue>
1a007278:	4604      	mov	r4, r0
1a00727a:	6030      	str	r0, [r6, #0]
1a00727c:	2800      	cmp	r0, #0
1a00727e:	d1d5      	bne.n	1a00722c <__sfp+0x24>
1a007280:	f7ff ff78 	bl	1a007174 <__sfp_lock_release>
1a007284:	230c      	movs	r3, #12
1a007286:	603b      	str	r3, [r7, #0]
1a007288:	e7ee      	b.n	1a007268 <__sfp+0x60>
1a00728a:	bf00      	nop
1a00728c:	1a008bd4 	.word	0x1a008bd4
1a007290:	ffff0001 	.word	0xffff0001

1a007294 <_fwalk_reent>:
1a007294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a007298:	4680      	mov	r8, r0
1a00729a:	4689      	mov	r9, r1
1a00729c:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a0072a0:	2600      	movs	r6, #0
1a0072a2:	b914      	cbnz	r4, 1a0072aa <_fwalk_reent+0x16>
1a0072a4:	4630      	mov	r0, r6
1a0072a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0072aa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a0072ae:	3f01      	subs	r7, #1
1a0072b0:	d501      	bpl.n	1a0072b6 <_fwalk_reent+0x22>
1a0072b2:	6824      	ldr	r4, [r4, #0]
1a0072b4:	e7f5      	b.n	1a0072a2 <_fwalk_reent+0xe>
1a0072b6:	89ab      	ldrh	r3, [r5, #12]
1a0072b8:	2b01      	cmp	r3, #1
1a0072ba:	d907      	bls.n	1a0072cc <_fwalk_reent+0x38>
1a0072bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a0072c0:	3301      	adds	r3, #1
1a0072c2:	d003      	beq.n	1a0072cc <_fwalk_reent+0x38>
1a0072c4:	4629      	mov	r1, r5
1a0072c6:	4640      	mov	r0, r8
1a0072c8:	47c8      	blx	r9
1a0072ca:	4306      	orrs	r6, r0
1a0072cc:	3568      	adds	r5, #104	; 0x68
1a0072ce:	e7ee      	b.n	1a0072ae <_fwalk_reent+0x1a>

1a0072d0 <__libc_init_array>:
1a0072d0:	b570      	push	{r4, r5, r6, lr}
1a0072d2:	4d0d      	ldr	r5, [pc, #52]	; (1a007308 <__libc_init_array+0x38>)
1a0072d4:	4c0d      	ldr	r4, [pc, #52]	; (1a00730c <__libc_init_array+0x3c>)
1a0072d6:	1b64      	subs	r4, r4, r5
1a0072d8:	10a4      	asrs	r4, r4, #2
1a0072da:	2600      	movs	r6, #0
1a0072dc:	42a6      	cmp	r6, r4
1a0072de:	d109      	bne.n	1a0072f4 <__libc_init_array+0x24>
1a0072e0:	4d0b      	ldr	r5, [pc, #44]	; (1a007310 <__libc_init_array+0x40>)
1a0072e2:	4c0c      	ldr	r4, [pc, #48]	; (1a007314 <__libc_init_array+0x44>)
1a0072e4:	f7fc fa57 	bl	1a003796 <_init>
1a0072e8:	1b64      	subs	r4, r4, r5
1a0072ea:	10a4      	asrs	r4, r4, #2
1a0072ec:	2600      	movs	r6, #0
1a0072ee:	42a6      	cmp	r6, r4
1a0072f0:	d105      	bne.n	1a0072fe <__libc_init_array+0x2e>
1a0072f2:	bd70      	pop	{r4, r5, r6, pc}
1a0072f4:	f855 3b04 	ldr.w	r3, [r5], #4
1a0072f8:	4798      	blx	r3
1a0072fa:	3601      	adds	r6, #1
1a0072fc:	e7ee      	b.n	1a0072dc <__libc_init_array+0xc>
1a0072fe:	f855 3b04 	ldr.w	r3, [r5], #4
1a007302:	4798      	blx	r3
1a007304:	3601      	adds	r6, #1
1a007306:	e7f2      	b.n	1a0072ee <__libc_init_array+0x1e>
1a007308:	1a008c0c 	.word	0x1a008c0c
1a00730c:	1a008c0c 	.word	0x1a008c0c
1a007310:	1a008c0c 	.word	0x1a008c0c
1a007314:	1a008c10 	.word	0x1a008c10

1a007318 <__retarget_lock_init_recursive>:
1a007318:	4770      	bx	lr

1a00731a <__retarget_lock_acquire_recursive>:
1a00731a:	4770      	bx	lr

1a00731c <__retarget_lock_release_recursive>:
1a00731c:	4770      	bx	lr

1a00731e <memcpy>:
1a00731e:	440a      	add	r2, r1
1a007320:	4291      	cmp	r1, r2
1a007322:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a007326:	d100      	bne.n	1a00732a <memcpy+0xc>
1a007328:	4770      	bx	lr
1a00732a:	b510      	push	{r4, lr}
1a00732c:	f811 4b01 	ldrb.w	r4, [r1], #1
1a007330:	f803 4f01 	strb.w	r4, [r3, #1]!
1a007334:	4291      	cmp	r1, r2
1a007336:	d1f9      	bne.n	1a00732c <memcpy+0xe>
1a007338:	bd10      	pop	{r4, pc}

1a00733a <memset>:
1a00733a:	4402      	add	r2, r0
1a00733c:	4603      	mov	r3, r0
1a00733e:	4293      	cmp	r3, r2
1a007340:	d100      	bne.n	1a007344 <memset+0xa>
1a007342:	4770      	bx	lr
1a007344:	f803 1b01 	strb.w	r1, [r3], #1
1a007348:	e7f9      	b.n	1a00733e <memset+0x4>
1a00734a:	Address 0x000000001a00734a is out of bounds.


1a00734c <_free_r>:
1a00734c:	b538      	push	{r3, r4, r5, lr}
1a00734e:	4605      	mov	r5, r0
1a007350:	2900      	cmp	r1, #0
1a007352:	d045      	beq.n	1a0073e0 <_free_r+0x94>
1a007354:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a007358:	1f0c      	subs	r4, r1, #4
1a00735a:	2b00      	cmp	r3, #0
1a00735c:	bfb8      	it	lt
1a00735e:	18e4      	addlt	r4, r4, r3
1a007360:	f000 fdde 	bl	1a007f20 <__malloc_lock>
1a007364:	4a1f      	ldr	r2, [pc, #124]	; (1a0073e4 <_free_r+0x98>)
1a007366:	6813      	ldr	r3, [r2, #0]
1a007368:	4610      	mov	r0, r2
1a00736a:	b933      	cbnz	r3, 1a00737a <_free_r+0x2e>
1a00736c:	6063      	str	r3, [r4, #4]
1a00736e:	6014      	str	r4, [r2, #0]
1a007370:	4628      	mov	r0, r5
1a007372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a007376:	f000 bdd9 	b.w	1a007f2c <__malloc_unlock>
1a00737a:	42a3      	cmp	r3, r4
1a00737c:	d90c      	bls.n	1a007398 <_free_r+0x4c>
1a00737e:	6821      	ldr	r1, [r4, #0]
1a007380:	1862      	adds	r2, r4, r1
1a007382:	4293      	cmp	r3, r2
1a007384:	bf04      	itt	eq
1a007386:	681a      	ldreq	r2, [r3, #0]
1a007388:	685b      	ldreq	r3, [r3, #4]
1a00738a:	6063      	str	r3, [r4, #4]
1a00738c:	bf04      	itt	eq
1a00738e:	1852      	addeq	r2, r2, r1
1a007390:	6022      	streq	r2, [r4, #0]
1a007392:	6004      	str	r4, [r0, #0]
1a007394:	e7ec      	b.n	1a007370 <_free_r+0x24>
1a007396:	4613      	mov	r3, r2
1a007398:	685a      	ldr	r2, [r3, #4]
1a00739a:	b10a      	cbz	r2, 1a0073a0 <_free_r+0x54>
1a00739c:	42a2      	cmp	r2, r4
1a00739e:	d9fa      	bls.n	1a007396 <_free_r+0x4a>
1a0073a0:	6819      	ldr	r1, [r3, #0]
1a0073a2:	1858      	adds	r0, r3, r1
1a0073a4:	42a0      	cmp	r0, r4
1a0073a6:	d10b      	bne.n	1a0073c0 <_free_r+0x74>
1a0073a8:	6820      	ldr	r0, [r4, #0]
1a0073aa:	4401      	add	r1, r0
1a0073ac:	1858      	adds	r0, r3, r1
1a0073ae:	4282      	cmp	r2, r0
1a0073b0:	6019      	str	r1, [r3, #0]
1a0073b2:	d1dd      	bne.n	1a007370 <_free_r+0x24>
1a0073b4:	6810      	ldr	r0, [r2, #0]
1a0073b6:	6852      	ldr	r2, [r2, #4]
1a0073b8:	605a      	str	r2, [r3, #4]
1a0073ba:	4401      	add	r1, r0
1a0073bc:	6019      	str	r1, [r3, #0]
1a0073be:	e7d7      	b.n	1a007370 <_free_r+0x24>
1a0073c0:	d902      	bls.n	1a0073c8 <_free_r+0x7c>
1a0073c2:	230c      	movs	r3, #12
1a0073c4:	602b      	str	r3, [r5, #0]
1a0073c6:	e7d3      	b.n	1a007370 <_free_r+0x24>
1a0073c8:	6820      	ldr	r0, [r4, #0]
1a0073ca:	1821      	adds	r1, r4, r0
1a0073cc:	428a      	cmp	r2, r1
1a0073ce:	bf04      	itt	eq
1a0073d0:	6811      	ldreq	r1, [r2, #0]
1a0073d2:	6852      	ldreq	r2, [r2, #4]
1a0073d4:	6062      	str	r2, [r4, #4]
1a0073d6:	bf04      	itt	eq
1a0073d8:	1809      	addeq	r1, r1, r0
1a0073da:	6021      	streq	r1, [r4, #0]
1a0073dc:	605c      	str	r4, [r3, #4]
1a0073de:	e7c7      	b.n	1a007370 <_free_r+0x24>
1a0073e0:	bd38      	pop	{r3, r4, r5, pc}
1a0073e2:	bf00      	nop
1a0073e4:	10004c20 	.word	0x10004c20

1a0073e8 <_malloc_r>:
1a0073e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0073ea:	1ccd      	adds	r5, r1, #3
1a0073ec:	f025 0503 	bic.w	r5, r5, #3
1a0073f0:	3508      	adds	r5, #8
1a0073f2:	2d0c      	cmp	r5, #12
1a0073f4:	bf38      	it	cc
1a0073f6:	250c      	movcc	r5, #12
1a0073f8:	2d00      	cmp	r5, #0
1a0073fa:	4606      	mov	r6, r0
1a0073fc:	db01      	blt.n	1a007402 <_malloc_r+0x1a>
1a0073fe:	42a9      	cmp	r1, r5
1a007400:	d903      	bls.n	1a00740a <_malloc_r+0x22>
1a007402:	230c      	movs	r3, #12
1a007404:	6033      	str	r3, [r6, #0]
1a007406:	2000      	movs	r0, #0
1a007408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00740a:	f000 fd89 	bl	1a007f20 <__malloc_lock>
1a00740e:	4921      	ldr	r1, [pc, #132]	; (1a007494 <_malloc_r+0xac>)
1a007410:	680a      	ldr	r2, [r1, #0]
1a007412:	4614      	mov	r4, r2
1a007414:	b99c      	cbnz	r4, 1a00743e <_malloc_r+0x56>
1a007416:	4f20      	ldr	r7, [pc, #128]	; (1a007498 <_malloc_r+0xb0>)
1a007418:	683b      	ldr	r3, [r7, #0]
1a00741a:	b923      	cbnz	r3, 1a007426 <_malloc_r+0x3e>
1a00741c:	4621      	mov	r1, r4
1a00741e:	4630      	mov	r0, r6
1a007420:	f7fc fa0e 	bl	1a003840 <_sbrk_r>
1a007424:	6038      	str	r0, [r7, #0]
1a007426:	4629      	mov	r1, r5
1a007428:	4630      	mov	r0, r6
1a00742a:	f7fc fa09 	bl	1a003840 <_sbrk_r>
1a00742e:	1c43      	adds	r3, r0, #1
1a007430:	d123      	bne.n	1a00747a <_malloc_r+0x92>
1a007432:	230c      	movs	r3, #12
1a007434:	6033      	str	r3, [r6, #0]
1a007436:	4630      	mov	r0, r6
1a007438:	f000 fd78 	bl	1a007f2c <__malloc_unlock>
1a00743c:	e7e3      	b.n	1a007406 <_malloc_r+0x1e>
1a00743e:	6823      	ldr	r3, [r4, #0]
1a007440:	1b5b      	subs	r3, r3, r5
1a007442:	d417      	bmi.n	1a007474 <_malloc_r+0x8c>
1a007444:	2b0b      	cmp	r3, #11
1a007446:	d903      	bls.n	1a007450 <_malloc_r+0x68>
1a007448:	6023      	str	r3, [r4, #0]
1a00744a:	441c      	add	r4, r3
1a00744c:	6025      	str	r5, [r4, #0]
1a00744e:	e004      	b.n	1a00745a <_malloc_r+0x72>
1a007450:	6863      	ldr	r3, [r4, #4]
1a007452:	42a2      	cmp	r2, r4
1a007454:	bf0c      	ite	eq
1a007456:	600b      	streq	r3, [r1, #0]
1a007458:	6053      	strne	r3, [r2, #4]
1a00745a:	4630      	mov	r0, r6
1a00745c:	f000 fd66 	bl	1a007f2c <__malloc_unlock>
1a007460:	f104 000b 	add.w	r0, r4, #11
1a007464:	1d23      	adds	r3, r4, #4
1a007466:	f020 0007 	bic.w	r0, r0, #7
1a00746a:	1ac2      	subs	r2, r0, r3
1a00746c:	d0cc      	beq.n	1a007408 <_malloc_r+0x20>
1a00746e:	1a1b      	subs	r3, r3, r0
1a007470:	50a3      	str	r3, [r4, r2]
1a007472:	e7c9      	b.n	1a007408 <_malloc_r+0x20>
1a007474:	4622      	mov	r2, r4
1a007476:	6864      	ldr	r4, [r4, #4]
1a007478:	e7cc      	b.n	1a007414 <_malloc_r+0x2c>
1a00747a:	1cc4      	adds	r4, r0, #3
1a00747c:	f024 0403 	bic.w	r4, r4, #3
1a007480:	42a0      	cmp	r0, r4
1a007482:	d0e3      	beq.n	1a00744c <_malloc_r+0x64>
1a007484:	1a21      	subs	r1, r4, r0
1a007486:	4630      	mov	r0, r6
1a007488:	f7fc f9da 	bl	1a003840 <_sbrk_r>
1a00748c:	3001      	adds	r0, #1
1a00748e:	d1dd      	bne.n	1a00744c <_malloc_r+0x64>
1a007490:	e7cf      	b.n	1a007432 <_malloc_r+0x4a>
1a007492:	bf00      	nop
1a007494:	10004c20 	.word	0x10004c20
1a007498:	10004c24 	.word	0x10004c24

1a00749c <__sfputc_r>:
1a00749c:	6893      	ldr	r3, [r2, #8]
1a00749e:	3b01      	subs	r3, #1
1a0074a0:	2b00      	cmp	r3, #0
1a0074a2:	b410      	push	{r4}
1a0074a4:	6093      	str	r3, [r2, #8]
1a0074a6:	da08      	bge.n	1a0074ba <__sfputc_r+0x1e>
1a0074a8:	6994      	ldr	r4, [r2, #24]
1a0074aa:	42a3      	cmp	r3, r4
1a0074ac:	db01      	blt.n	1a0074b2 <__sfputc_r+0x16>
1a0074ae:	290a      	cmp	r1, #10
1a0074b0:	d103      	bne.n	1a0074ba <__sfputc_r+0x1e>
1a0074b2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0074b6:	f000 bbbb 	b.w	1a007c30 <__swbuf_r>
1a0074ba:	6813      	ldr	r3, [r2, #0]
1a0074bc:	1c58      	adds	r0, r3, #1
1a0074be:	6010      	str	r0, [r2, #0]
1a0074c0:	7019      	strb	r1, [r3, #0]
1a0074c2:	4608      	mov	r0, r1
1a0074c4:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0074c8:	4770      	bx	lr

1a0074ca <__sfputs_r>:
1a0074ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0074cc:	4606      	mov	r6, r0
1a0074ce:	460f      	mov	r7, r1
1a0074d0:	4614      	mov	r4, r2
1a0074d2:	18d5      	adds	r5, r2, r3
1a0074d4:	42ac      	cmp	r4, r5
1a0074d6:	d101      	bne.n	1a0074dc <__sfputs_r+0x12>
1a0074d8:	2000      	movs	r0, #0
1a0074da:	e007      	b.n	1a0074ec <__sfputs_r+0x22>
1a0074dc:	463a      	mov	r2, r7
1a0074de:	f814 1b01 	ldrb.w	r1, [r4], #1
1a0074e2:	4630      	mov	r0, r6
1a0074e4:	f7ff ffda 	bl	1a00749c <__sfputc_r>
1a0074e8:	1c43      	adds	r3, r0, #1
1a0074ea:	d1f3      	bne.n	1a0074d4 <__sfputs_r+0xa>
1a0074ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0074ee:	Address 0x000000001a0074ee is out of bounds.


1a0074f0 <_vfiprintf_r>:
1a0074f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0074f4:	460d      	mov	r5, r1
1a0074f6:	b09d      	sub	sp, #116	; 0x74
1a0074f8:	4614      	mov	r4, r2
1a0074fa:	461e      	mov	r6, r3
1a0074fc:	4607      	mov	r7, r0
1a0074fe:	b118      	cbz	r0, 1a007508 <_vfiprintf_r+0x18>
1a007500:	6983      	ldr	r3, [r0, #24]
1a007502:	b90b      	cbnz	r3, 1a007508 <_vfiprintf_r+0x18>
1a007504:	f7ff fe48 	bl	1a007198 <__sinit>
1a007508:	4b85      	ldr	r3, [pc, #532]	; (1a007720 <_vfiprintf_r+0x230>)
1a00750a:	429d      	cmp	r5, r3
1a00750c:	d11b      	bne.n	1a007546 <_vfiprintf_r+0x56>
1a00750e:	687d      	ldr	r5, [r7, #4]
1a007510:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a007512:	07d9      	lsls	r1, r3, #31
1a007514:	d405      	bmi.n	1a007522 <_vfiprintf_r+0x32>
1a007516:	89ab      	ldrh	r3, [r5, #12]
1a007518:	059a      	lsls	r2, r3, #22
1a00751a:	d402      	bmi.n	1a007522 <_vfiprintf_r+0x32>
1a00751c:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a00751e:	f7ff fefc 	bl	1a00731a <__retarget_lock_acquire_recursive>
1a007522:	89ab      	ldrh	r3, [r5, #12]
1a007524:	071b      	lsls	r3, r3, #28
1a007526:	d501      	bpl.n	1a00752c <_vfiprintf_r+0x3c>
1a007528:	692b      	ldr	r3, [r5, #16]
1a00752a:	b9eb      	cbnz	r3, 1a007568 <_vfiprintf_r+0x78>
1a00752c:	4629      	mov	r1, r5
1a00752e:	4638      	mov	r0, r7
1a007530:	f000 fbd0 	bl	1a007cd4 <__swsetup_r>
1a007534:	b1c0      	cbz	r0, 1a007568 <_vfiprintf_r+0x78>
1a007536:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a007538:	07d8      	lsls	r0, r3, #31
1a00753a:	d50e      	bpl.n	1a00755a <_vfiprintf_r+0x6a>
1a00753c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a007540:	b01d      	add	sp, #116	; 0x74
1a007542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a007546:	4b77      	ldr	r3, [pc, #476]	; (1a007724 <_vfiprintf_r+0x234>)
1a007548:	429d      	cmp	r5, r3
1a00754a:	d101      	bne.n	1a007550 <_vfiprintf_r+0x60>
1a00754c:	68bd      	ldr	r5, [r7, #8]
1a00754e:	e7df      	b.n	1a007510 <_vfiprintf_r+0x20>
1a007550:	4b75      	ldr	r3, [pc, #468]	; (1a007728 <_vfiprintf_r+0x238>)
1a007552:	429d      	cmp	r5, r3
1a007554:	bf08      	it	eq
1a007556:	68fd      	ldreq	r5, [r7, #12]
1a007558:	e7da      	b.n	1a007510 <_vfiprintf_r+0x20>
1a00755a:	89ab      	ldrh	r3, [r5, #12]
1a00755c:	0599      	lsls	r1, r3, #22
1a00755e:	d4ed      	bmi.n	1a00753c <_vfiprintf_r+0x4c>
1a007560:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a007562:	f7ff fedb 	bl	1a00731c <__retarget_lock_release_recursive>
1a007566:	e7e9      	b.n	1a00753c <_vfiprintf_r+0x4c>
1a007568:	2300      	movs	r3, #0
1a00756a:	9309      	str	r3, [sp, #36]	; 0x24
1a00756c:	2320      	movs	r3, #32
1a00756e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a007572:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 1a00772c <_vfiprintf_r+0x23c>
1a007576:	9603      	str	r6, [sp, #12]
1a007578:	2330      	movs	r3, #48	; 0x30
1a00757a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a00757e:	f04f 0a01 	mov.w	sl, #1
1a007582:	4623      	mov	r3, r4
1a007584:	461e      	mov	r6, r3
1a007586:	f813 2b01 	ldrb.w	r2, [r3], #1
1a00758a:	b10a      	cbz	r2, 1a007590 <_vfiprintf_r+0xa0>
1a00758c:	2a25      	cmp	r2, #37	; 0x25
1a00758e:	d1f9      	bne.n	1a007584 <_vfiprintf_r+0x94>
1a007590:	ebb6 0b04 	subs.w	fp, r6, r4
1a007594:	d00b      	beq.n	1a0075ae <_vfiprintf_r+0xbe>
1a007596:	465b      	mov	r3, fp
1a007598:	4622      	mov	r2, r4
1a00759a:	4629      	mov	r1, r5
1a00759c:	4638      	mov	r0, r7
1a00759e:	f7ff ff94 	bl	1a0074ca <__sfputs_r>
1a0075a2:	3001      	adds	r0, #1
1a0075a4:	f000 80a3 	beq.w	1a0076ee <_vfiprintf_r+0x1fe>
1a0075a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0075aa:	445b      	add	r3, fp
1a0075ac:	9309      	str	r3, [sp, #36]	; 0x24
1a0075ae:	7833      	ldrb	r3, [r6, #0]
1a0075b0:	2b00      	cmp	r3, #0
1a0075b2:	f000 809c 	beq.w	1a0076ee <_vfiprintf_r+0x1fe>
1a0075b6:	2300      	movs	r3, #0
1a0075b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0075bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a0075c0:	3601      	adds	r6, #1
1a0075c2:	9304      	str	r3, [sp, #16]
1a0075c4:	9307      	str	r3, [sp, #28]
1a0075c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a0075ca:	931a      	str	r3, [sp, #104]	; 0x68
1a0075cc:	4634      	mov	r4, r6
1a0075ce:	2205      	movs	r2, #5
1a0075d0:	f814 1b01 	ldrb.w	r1, [r4], #1
1a0075d4:	4855      	ldr	r0, [pc, #340]	; (1a00772c <_vfiprintf_r+0x23c>)
1a0075d6:	f000 fc53 	bl	1a007e80 <memchr>
1a0075da:	9b04      	ldr	r3, [sp, #16]
1a0075dc:	b9c0      	cbnz	r0, 1a007610 <_vfiprintf_r+0x120>
1a0075de:	06da      	lsls	r2, r3, #27
1a0075e0:	bf44      	itt	mi
1a0075e2:	2220      	movmi	r2, #32
1a0075e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a0075e8:	0718      	lsls	r0, r3, #28
1a0075ea:	bf44      	itt	mi
1a0075ec:	222b      	movmi	r2, #43	; 0x2b
1a0075ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a0075f2:	7832      	ldrb	r2, [r6, #0]
1a0075f4:	2a2a      	cmp	r2, #42	; 0x2a
1a0075f6:	d013      	beq.n	1a007620 <_vfiprintf_r+0x130>
1a0075f8:	9a07      	ldr	r2, [sp, #28]
1a0075fa:	4634      	mov	r4, r6
1a0075fc:	2000      	movs	r0, #0
1a0075fe:	260a      	movs	r6, #10
1a007600:	4621      	mov	r1, r4
1a007602:	f811 3b01 	ldrb.w	r3, [r1], #1
1a007606:	3b30      	subs	r3, #48	; 0x30
1a007608:	2b09      	cmp	r3, #9
1a00760a:	d94b      	bls.n	1a0076a4 <_vfiprintf_r+0x1b4>
1a00760c:	b970      	cbnz	r0, 1a00762c <_vfiprintf_r+0x13c>
1a00760e:	e014      	b.n	1a00763a <_vfiprintf_r+0x14a>
1a007610:	eba0 0009 	sub.w	r0, r0, r9
1a007614:	fa0a f000 	lsl.w	r0, sl, r0
1a007618:	4318      	orrs	r0, r3
1a00761a:	9004      	str	r0, [sp, #16]
1a00761c:	4626      	mov	r6, r4
1a00761e:	e7d5      	b.n	1a0075cc <_vfiprintf_r+0xdc>
1a007620:	9a03      	ldr	r2, [sp, #12]
1a007622:	1d11      	adds	r1, r2, #4
1a007624:	6812      	ldr	r2, [r2, #0]
1a007626:	9103      	str	r1, [sp, #12]
1a007628:	2a00      	cmp	r2, #0
1a00762a:	db01      	blt.n	1a007630 <_vfiprintf_r+0x140>
1a00762c:	9207      	str	r2, [sp, #28]
1a00762e:	e004      	b.n	1a00763a <_vfiprintf_r+0x14a>
1a007630:	4252      	negs	r2, r2
1a007632:	f043 0302 	orr.w	r3, r3, #2
1a007636:	9207      	str	r2, [sp, #28]
1a007638:	9304      	str	r3, [sp, #16]
1a00763a:	7823      	ldrb	r3, [r4, #0]
1a00763c:	2b2e      	cmp	r3, #46	; 0x2e
1a00763e:	d10c      	bne.n	1a00765a <_vfiprintf_r+0x16a>
1a007640:	7863      	ldrb	r3, [r4, #1]
1a007642:	2b2a      	cmp	r3, #42	; 0x2a
1a007644:	d133      	bne.n	1a0076ae <_vfiprintf_r+0x1be>
1a007646:	9b03      	ldr	r3, [sp, #12]
1a007648:	1d1a      	adds	r2, r3, #4
1a00764a:	681b      	ldr	r3, [r3, #0]
1a00764c:	9203      	str	r2, [sp, #12]
1a00764e:	2b00      	cmp	r3, #0
1a007650:	bfb8      	it	lt
1a007652:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a007656:	3402      	adds	r4, #2
1a007658:	9305      	str	r3, [sp, #20]
1a00765a:	4e35      	ldr	r6, [pc, #212]	; (1a007730 <_vfiprintf_r+0x240>)
1a00765c:	7821      	ldrb	r1, [r4, #0]
1a00765e:	2203      	movs	r2, #3
1a007660:	4630      	mov	r0, r6
1a007662:	f000 fc0d 	bl	1a007e80 <memchr>
1a007666:	b138      	cbz	r0, 1a007678 <_vfiprintf_r+0x188>
1a007668:	2340      	movs	r3, #64	; 0x40
1a00766a:	1b80      	subs	r0, r0, r6
1a00766c:	fa03 f000 	lsl.w	r0, r3, r0
1a007670:	9b04      	ldr	r3, [sp, #16]
1a007672:	4303      	orrs	r3, r0
1a007674:	3401      	adds	r4, #1
1a007676:	9304      	str	r3, [sp, #16]
1a007678:	f814 1b01 	ldrb.w	r1, [r4], #1
1a00767c:	482d      	ldr	r0, [pc, #180]	; (1a007734 <_vfiprintf_r+0x244>)
1a00767e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a007682:	2206      	movs	r2, #6
1a007684:	f000 fbfc 	bl	1a007e80 <memchr>
1a007688:	2800      	cmp	r0, #0
1a00768a:	d03f      	beq.n	1a00770c <_vfiprintf_r+0x21c>
1a00768c:	4b2a      	ldr	r3, [pc, #168]	; (1a007738 <_vfiprintf_r+0x248>)
1a00768e:	bb13      	cbnz	r3, 1a0076d6 <_vfiprintf_r+0x1e6>
1a007690:	9b03      	ldr	r3, [sp, #12]
1a007692:	3307      	adds	r3, #7
1a007694:	f023 0307 	bic.w	r3, r3, #7
1a007698:	3308      	adds	r3, #8
1a00769a:	9303      	str	r3, [sp, #12]
1a00769c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00769e:	4443      	add	r3, r8
1a0076a0:	9309      	str	r3, [sp, #36]	; 0x24
1a0076a2:	e76e      	b.n	1a007582 <_vfiprintf_r+0x92>
1a0076a4:	fb06 3202 	mla	r2, r6, r2, r3
1a0076a8:	2001      	movs	r0, #1
1a0076aa:	460c      	mov	r4, r1
1a0076ac:	e7a8      	b.n	1a007600 <_vfiprintf_r+0x110>
1a0076ae:	2300      	movs	r3, #0
1a0076b0:	3401      	adds	r4, #1
1a0076b2:	9305      	str	r3, [sp, #20]
1a0076b4:	4619      	mov	r1, r3
1a0076b6:	260a      	movs	r6, #10
1a0076b8:	4620      	mov	r0, r4
1a0076ba:	f810 2b01 	ldrb.w	r2, [r0], #1
1a0076be:	3a30      	subs	r2, #48	; 0x30
1a0076c0:	2a09      	cmp	r2, #9
1a0076c2:	d903      	bls.n	1a0076cc <_vfiprintf_r+0x1dc>
1a0076c4:	2b00      	cmp	r3, #0
1a0076c6:	d0c8      	beq.n	1a00765a <_vfiprintf_r+0x16a>
1a0076c8:	9105      	str	r1, [sp, #20]
1a0076ca:	e7c6      	b.n	1a00765a <_vfiprintf_r+0x16a>
1a0076cc:	fb06 2101 	mla	r1, r6, r1, r2
1a0076d0:	2301      	movs	r3, #1
1a0076d2:	4604      	mov	r4, r0
1a0076d4:	e7f0      	b.n	1a0076b8 <_vfiprintf_r+0x1c8>
1a0076d6:	ab03      	add	r3, sp, #12
1a0076d8:	9300      	str	r3, [sp, #0]
1a0076da:	462a      	mov	r2, r5
1a0076dc:	4b17      	ldr	r3, [pc, #92]	; (1a00773c <_vfiprintf_r+0x24c>)
1a0076de:	a904      	add	r1, sp, #16
1a0076e0:	4638      	mov	r0, r7
1a0076e2:	f3af 8000 	nop.w
1a0076e6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0076ea:	4680      	mov	r8, r0
1a0076ec:	d1d6      	bne.n	1a00769c <_vfiprintf_r+0x1ac>
1a0076ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a0076f0:	07d9      	lsls	r1, r3, #31
1a0076f2:	d405      	bmi.n	1a007700 <_vfiprintf_r+0x210>
1a0076f4:	89ab      	ldrh	r3, [r5, #12]
1a0076f6:	059a      	lsls	r2, r3, #22
1a0076f8:	d402      	bmi.n	1a007700 <_vfiprintf_r+0x210>
1a0076fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a0076fc:	f7ff fe0e 	bl	1a00731c <__retarget_lock_release_recursive>
1a007700:	89ab      	ldrh	r3, [r5, #12]
1a007702:	065b      	lsls	r3, r3, #25
1a007704:	f53f af1a 	bmi.w	1a00753c <_vfiprintf_r+0x4c>
1a007708:	9809      	ldr	r0, [sp, #36]	; 0x24
1a00770a:	e719      	b.n	1a007540 <_vfiprintf_r+0x50>
1a00770c:	ab03      	add	r3, sp, #12
1a00770e:	9300      	str	r3, [sp, #0]
1a007710:	462a      	mov	r2, r5
1a007712:	4b0a      	ldr	r3, [pc, #40]	; (1a00773c <_vfiprintf_r+0x24c>)
1a007714:	a904      	add	r1, sp, #16
1a007716:	4638      	mov	r0, r7
1a007718:	f000 f888 	bl	1a00782c <_printf_i>
1a00771c:	e7e3      	b.n	1a0076e6 <_vfiprintf_r+0x1f6>
1a00771e:	bf00      	nop
1a007720:	1a008b94 	.word	0x1a008b94
1a007724:	1a008bb4 	.word	0x1a008bb4
1a007728:	1a008b74 	.word	0x1a008b74
1a00772c:	1a008bd8 	.word	0x1a008bd8
1a007730:	1a008bde 	.word	0x1a008bde
1a007734:	1a008be2 	.word	0x1a008be2
1a007738:	00000000 	.word	0x00000000
1a00773c:	1a0074cb 	.word	0x1a0074cb

1a007740 <_printf_common>:
1a007740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a007744:	4691      	mov	r9, r2
1a007746:	461f      	mov	r7, r3
1a007748:	688a      	ldr	r2, [r1, #8]
1a00774a:	690b      	ldr	r3, [r1, #16]
1a00774c:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a007750:	4293      	cmp	r3, r2
1a007752:	bfb8      	it	lt
1a007754:	4613      	movlt	r3, r2
1a007756:	f8c9 3000 	str.w	r3, [r9]
1a00775a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a00775e:	4606      	mov	r6, r0
1a007760:	460c      	mov	r4, r1
1a007762:	b112      	cbz	r2, 1a00776a <_printf_common+0x2a>
1a007764:	3301      	adds	r3, #1
1a007766:	f8c9 3000 	str.w	r3, [r9]
1a00776a:	6823      	ldr	r3, [r4, #0]
1a00776c:	0699      	lsls	r1, r3, #26
1a00776e:	bf42      	ittt	mi
1a007770:	f8d9 3000 	ldrmi.w	r3, [r9]
1a007774:	3302      	addmi	r3, #2
1a007776:	f8c9 3000 	strmi.w	r3, [r9]
1a00777a:	6825      	ldr	r5, [r4, #0]
1a00777c:	f015 0506 	ands.w	r5, r5, #6
1a007780:	d107      	bne.n	1a007792 <_printf_common+0x52>
1a007782:	f104 0a19 	add.w	sl, r4, #25
1a007786:	68e3      	ldr	r3, [r4, #12]
1a007788:	f8d9 2000 	ldr.w	r2, [r9]
1a00778c:	1a9b      	subs	r3, r3, r2
1a00778e:	42ab      	cmp	r3, r5
1a007790:	dc28      	bgt.n	1a0077e4 <_printf_common+0xa4>
1a007792:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a007796:	6822      	ldr	r2, [r4, #0]
1a007798:	3300      	adds	r3, #0
1a00779a:	bf18      	it	ne
1a00779c:	2301      	movne	r3, #1
1a00779e:	0692      	lsls	r2, r2, #26
1a0077a0:	d42d      	bmi.n	1a0077fe <_printf_common+0xbe>
1a0077a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a0077a6:	4639      	mov	r1, r7
1a0077a8:	4630      	mov	r0, r6
1a0077aa:	47c0      	blx	r8
1a0077ac:	3001      	adds	r0, #1
1a0077ae:	d020      	beq.n	1a0077f2 <_printf_common+0xb2>
1a0077b0:	6823      	ldr	r3, [r4, #0]
1a0077b2:	68e5      	ldr	r5, [r4, #12]
1a0077b4:	f8d9 2000 	ldr.w	r2, [r9]
1a0077b8:	f003 0306 	and.w	r3, r3, #6
1a0077bc:	2b04      	cmp	r3, #4
1a0077be:	bf08      	it	eq
1a0077c0:	1aad      	subeq	r5, r5, r2
1a0077c2:	68a3      	ldr	r3, [r4, #8]
1a0077c4:	6922      	ldr	r2, [r4, #16]
1a0077c6:	bf0c      	ite	eq
1a0077c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a0077cc:	2500      	movne	r5, #0
1a0077ce:	4293      	cmp	r3, r2
1a0077d0:	bfc4      	itt	gt
1a0077d2:	1a9b      	subgt	r3, r3, r2
1a0077d4:	18ed      	addgt	r5, r5, r3
1a0077d6:	f04f 0900 	mov.w	r9, #0
1a0077da:	341a      	adds	r4, #26
1a0077dc:	454d      	cmp	r5, r9
1a0077de:	d11a      	bne.n	1a007816 <_printf_common+0xd6>
1a0077e0:	2000      	movs	r0, #0
1a0077e2:	e008      	b.n	1a0077f6 <_printf_common+0xb6>
1a0077e4:	2301      	movs	r3, #1
1a0077e6:	4652      	mov	r2, sl
1a0077e8:	4639      	mov	r1, r7
1a0077ea:	4630      	mov	r0, r6
1a0077ec:	47c0      	blx	r8
1a0077ee:	3001      	adds	r0, #1
1a0077f0:	d103      	bne.n	1a0077fa <_printf_common+0xba>
1a0077f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0077f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0077fa:	3501      	adds	r5, #1
1a0077fc:	e7c3      	b.n	1a007786 <_printf_common+0x46>
1a0077fe:	18e1      	adds	r1, r4, r3
1a007800:	1c5a      	adds	r2, r3, #1
1a007802:	2030      	movs	r0, #48	; 0x30
1a007804:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a007808:	4422      	add	r2, r4
1a00780a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a00780e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a007812:	3302      	adds	r3, #2
1a007814:	e7c5      	b.n	1a0077a2 <_printf_common+0x62>
1a007816:	2301      	movs	r3, #1
1a007818:	4622      	mov	r2, r4
1a00781a:	4639      	mov	r1, r7
1a00781c:	4630      	mov	r0, r6
1a00781e:	47c0      	blx	r8
1a007820:	3001      	adds	r0, #1
1a007822:	d0e6      	beq.n	1a0077f2 <_printf_common+0xb2>
1a007824:	f109 0901 	add.w	r9, r9, #1
1a007828:	e7d8      	b.n	1a0077dc <_printf_common+0x9c>
1a00782a:	Address 0x000000001a00782a is out of bounds.


1a00782c <_printf_i>:
1a00782c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a007830:	4606      	mov	r6, r0
1a007832:	460c      	mov	r4, r1
1a007834:	f101 0043 	add.w	r0, r1, #67	; 0x43
1a007838:	7e09      	ldrb	r1, [r1, #24]
1a00783a:	b085      	sub	sp, #20
1a00783c:	296e      	cmp	r1, #110	; 0x6e
1a00783e:	4698      	mov	r8, r3
1a007840:	4617      	mov	r7, r2
1a007842:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a007844:	f000 80ba 	beq.w	1a0079bc <_printf_i+0x190>
1a007848:	d824      	bhi.n	1a007894 <_printf_i+0x68>
1a00784a:	2963      	cmp	r1, #99	; 0x63
1a00784c:	d039      	beq.n	1a0078c2 <_printf_i+0x96>
1a00784e:	d80a      	bhi.n	1a007866 <_printf_i+0x3a>
1a007850:	2900      	cmp	r1, #0
1a007852:	f000 80c3 	beq.w	1a0079dc <_printf_i+0x1b0>
1a007856:	2958      	cmp	r1, #88	; 0x58
1a007858:	f000 8091 	beq.w	1a00797e <_printf_i+0x152>
1a00785c:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a007860:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a007864:	e035      	b.n	1a0078d2 <_printf_i+0xa6>
1a007866:	2964      	cmp	r1, #100	; 0x64
1a007868:	d001      	beq.n	1a00786e <_printf_i+0x42>
1a00786a:	2969      	cmp	r1, #105	; 0x69
1a00786c:	d1f6      	bne.n	1a00785c <_printf_i+0x30>
1a00786e:	6825      	ldr	r5, [r4, #0]
1a007870:	681a      	ldr	r2, [r3, #0]
1a007872:	f015 0f80 	tst.w	r5, #128	; 0x80
1a007876:	f102 0104 	add.w	r1, r2, #4
1a00787a:	d02c      	beq.n	1a0078d6 <_printf_i+0xaa>
1a00787c:	6812      	ldr	r2, [r2, #0]
1a00787e:	6019      	str	r1, [r3, #0]
1a007880:	2a00      	cmp	r2, #0
1a007882:	da03      	bge.n	1a00788c <_printf_i+0x60>
1a007884:	232d      	movs	r3, #45	; 0x2d
1a007886:	4252      	negs	r2, r2
1a007888:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a00788c:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 1a007a4c <_printf_i+0x220>
1a007890:	230a      	movs	r3, #10
1a007892:	e03f      	b.n	1a007914 <_printf_i+0xe8>
1a007894:	2973      	cmp	r1, #115	; 0x73
1a007896:	f000 80a5 	beq.w	1a0079e4 <_printf_i+0x1b8>
1a00789a:	d808      	bhi.n	1a0078ae <_printf_i+0x82>
1a00789c:	296f      	cmp	r1, #111	; 0x6f
1a00789e:	d021      	beq.n	1a0078e4 <_printf_i+0xb8>
1a0078a0:	2970      	cmp	r1, #112	; 0x70
1a0078a2:	d1db      	bne.n	1a00785c <_printf_i+0x30>
1a0078a4:	6822      	ldr	r2, [r4, #0]
1a0078a6:	f042 0220 	orr.w	r2, r2, #32
1a0078aa:	6022      	str	r2, [r4, #0]
1a0078ac:	e003      	b.n	1a0078b6 <_printf_i+0x8a>
1a0078ae:	2975      	cmp	r1, #117	; 0x75
1a0078b0:	d018      	beq.n	1a0078e4 <_printf_i+0xb8>
1a0078b2:	2978      	cmp	r1, #120	; 0x78
1a0078b4:	d1d2      	bne.n	1a00785c <_printf_i+0x30>
1a0078b6:	2278      	movs	r2, #120	; 0x78
1a0078b8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
1a0078bc:	f8df c190 	ldr.w	ip, [pc, #400]	; 1a007a50 <_printf_i+0x224>
1a0078c0:	e061      	b.n	1a007986 <_printf_i+0x15a>
1a0078c2:	681a      	ldr	r2, [r3, #0]
1a0078c4:	1d11      	adds	r1, r2, #4
1a0078c6:	6019      	str	r1, [r3, #0]
1a0078c8:	6813      	ldr	r3, [r2, #0]
1a0078ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a0078ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a0078d2:	2301      	movs	r3, #1
1a0078d4:	e093      	b.n	1a0079fe <_printf_i+0x1d2>
1a0078d6:	6812      	ldr	r2, [r2, #0]
1a0078d8:	6019      	str	r1, [r3, #0]
1a0078da:	f015 0f40 	tst.w	r5, #64	; 0x40
1a0078de:	bf18      	it	ne
1a0078e0:	b212      	sxthne	r2, r2
1a0078e2:	e7cd      	b.n	1a007880 <_printf_i+0x54>
1a0078e4:	f8d4 c000 	ldr.w	ip, [r4]
1a0078e8:	681a      	ldr	r2, [r3, #0]
1a0078ea:	f01c 0f80 	tst.w	ip, #128	; 0x80
1a0078ee:	f102 0504 	add.w	r5, r2, #4
1a0078f2:	601d      	str	r5, [r3, #0]
1a0078f4:	d001      	beq.n	1a0078fa <_printf_i+0xce>
1a0078f6:	6812      	ldr	r2, [r2, #0]
1a0078f8:	e003      	b.n	1a007902 <_printf_i+0xd6>
1a0078fa:	f01c 0f40 	tst.w	ip, #64	; 0x40
1a0078fe:	d0fa      	beq.n	1a0078f6 <_printf_i+0xca>
1a007900:	8812      	ldrh	r2, [r2, #0]
1a007902:	f8df c148 	ldr.w	ip, [pc, #328]	; 1a007a4c <_printf_i+0x220>
1a007906:	296f      	cmp	r1, #111	; 0x6f
1a007908:	bf0c      	ite	eq
1a00790a:	2308      	moveq	r3, #8
1a00790c:	230a      	movne	r3, #10
1a00790e:	2100      	movs	r1, #0
1a007910:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a007914:	6865      	ldr	r5, [r4, #4]
1a007916:	60a5      	str	r5, [r4, #8]
1a007918:	2d00      	cmp	r5, #0
1a00791a:	bfa2      	ittt	ge
1a00791c:	6821      	ldrge	r1, [r4, #0]
1a00791e:	f021 0104 	bicge.w	r1, r1, #4
1a007922:	6021      	strge	r1, [r4, #0]
1a007924:	b90a      	cbnz	r2, 1a00792a <_printf_i+0xfe>
1a007926:	2d00      	cmp	r5, #0
1a007928:	d046      	beq.n	1a0079b8 <_printf_i+0x18c>
1a00792a:	4605      	mov	r5, r0
1a00792c:	fbb2 f1f3 	udiv	r1, r2, r3
1a007930:	fb03 2e11 	mls	lr, r3, r1, r2
1a007934:	4293      	cmp	r3, r2
1a007936:	f81c e00e 	ldrb.w	lr, [ip, lr]
1a00793a:	f805 ed01 	strb.w	lr, [r5, #-1]!
1a00793e:	d939      	bls.n	1a0079b4 <_printf_i+0x188>
1a007940:	2b08      	cmp	r3, #8
1a007942:	d10b      	bne.n	1a00795c <_printf_i+0x130>
1a007944:	6823      	ldr	r3, [r4, #0]
1a007946:	07da      	lsls	r2, r3, #31
1a007948:	d508      	bpl.n	1a00795c <_printf_i+0x130>
1a00794a:	6923      	ldr	r3, [r4, #16]
1a00794c:	6862      	ldr	r2, [r4, #4]
1a00794e:	429a      	cmp	r2, r3
1a007950:	bfde      	ittt	le
1a007952:	2330      	movle	r3, #48	; 0x30
1a007954:	f805 3c01 	strble.w	r3, [r5, #-1]
1a007958:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a00795c:	1b40      	subs	r0, r0, r5
1a00795e:	6120      	str	r0, [r4, #16]
1a007960:	f8cd 8000 	str.w	r8, [sp]
1a007964:	463b      	mov	r3, r7
1a007966:	aa03      	add	r2, sp, #12
1a007968:	4621      	mov	r1, r4
1a00796a:	4630      	mov	r0, r6
1a00796c:	f7ff fee8 	bl	1a007740 <_printf_common>
1a007970:	3001      	adds	r0, #1
1a007972:	d149      	bne.n	1a007a08 <_printf_i+0x1dc>
1a007974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a007978:	b005      	add	sp, #20
1a00797a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00797e:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 1a007a4c <_printf_i+0x220>
1a007982:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a007986:	681d      	ldr	r5, [r3, #0]
1a007988:	6821      	ldr	r1, [r4, #0]
1a00798a:	f855 2b04 	ldr.w	r2, [r5], #4
1a00798e:	601d      	str	r5, [r3, #0]
1a007990:	060d      	lsls	r5, r1, #24
1a007992:	d50b      	bpl.n	1a0079ac <_printf_i+0x180>
1a007994:	07cd      	lsls	r5, r1, #31
1a007996:	bf44      	itt	mi
1a007998:	f041 0120 	orrmi.w	r1, r1, #32
1a00799c:	6021      	strmi	r1, [r4, #0]
1a00799e:	b91a      	cbnz	r2, 1a0079a8 <_printf_i+0x17c>
1a0079a0:	6823      	ldr	r3, [r4, #0]
1a0079a2:	f023 0320 	bic.w	r3, r3, #32
1a0079a6:	6023      	str	r3, [r4, #0]
1a0079a8:	2310      	movs	r3, #16
1a0079aa:	e7b0      	b.n	1a00790e <_printf_i+0xe2>
1a0079ac:	064b      	lsls	r3, r1, #25
1a0079ae:	bf48      	it	mi
1a0079b0:	b292      	uxthmi	r2, r2
1a0079b2:	e7ef      	b.n	1a007994 <_printf_i+0x168>
1a0079b4:	460a      	mov	r2, r1
1a0079b6:	e7b9      	b.n	1a00792c <_printf_i+0x100>
1a0079b8:	4605      	mov	r5, r0
1a0079ba:	e7c1      	b.n	1a007940 <_printf_i+0x114>
1a0079bc:	681a      	ldr	r2, [r3, #0]
1a0079be:	f8d4 c000 	ldr.w	ip, [r4]
1a0079c2:	6961      	ldr	r1, [r4, #20]
1a0079c4:	1d15      	adds	r5, r2, #4
1a0079c6:	601d      	str	r5, [r3, #0]
1a0079c8:	f01c 0f80 	tst.w	ip, #128	; 0x80
1a0079cc:	6813      	ldr	r3, [r2, #0]
1a0079ce:	d001      	beq.n	1a0079d4 <_printf_i+0x1a8>
1a0079d0:	6019      	str	r1, [r3, #0]
1a0079d2:	e003      	b.n	1a0079dc <_printf_i+0x1b0>
1a0079d4:	f01c 0f40 	tst.w	ip, #64	; 0x40
1a0079d8:	d0fa      	beq.n	1a0079d0 <_printf_i+0x1a4>
1a0079da:	8019      	strh	r1, [r3, #0]
1a0079dc:	2300      	movs	r3, #0
1a0079de:	6123      	str	r3, [r4, #16]
1a0079e0:	4605      	mov	r5, r0
1a0079e2:	e7bd      	b.n	1a007960 <_printf_i+0x134>
1a0079e4:	681a      	ldr	r2, [r3, #0]
1a0079e6:	1d11      	adds	r1, r2, #4
1a0079e8:	6019      	str	r1, [r3, #0]
1a0079ea:	6815      	ldr	r5, [r2, #0]
1a0079ec:	6862      	ldr	r2, [r4, #4]
1a0079ee:	2100      	movs	r1, #0
1a0079f0:	4628      	mov	r0, r5
1a0079f2:	f000 fa45 	bl	1a007e80 <memchr>
1a0079f6:	b108      	cbz	r0, 1a0079fc <_printf_i+0x1d0>
1a0079f8:	1b40      	subs	r0, r0, r5
1a0079fa:	6060      	str	r0, [r4, #4]
1a0079fc:	6863      	ldr	r3, [r4, #4]
1a0079fe:	6123      	str	r3, [r4, #16]
1a007a00:	2300      	movs	r3, #0
1a007a02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a007a06:	e7ab      	b.n	1a007960 <_printf_i+0x134>
1a007a08:	6923      	ldr	r3, [r4, #16]
1a007a0a:	462a      	mov	r2, r5
1a007a0c:	4639      	mov	r1, r7
1a007a0e:	4630      	mov	r0, r6
1a007a10:	47c0      	blx	r8
1a007a12:	3001      	adds	r0, #1
1a007a14:	d0ae      	beq.n	1a007974 <_printf_i+0x148>
1a007a16:	6823      	ldr	r3, [r4, #0]
1a007a18:	079b      	lsls	r3, r3, #30
1a007a1a:	d413      	bmi.n	1a007a44 <_printf_i+0x218>
1a007a1c:	68e0      	ldr	r0, [r4, #12]
1a007a1e:	9b03      	ldr	r3, [sp, #12]
1a007a20:	4298      	cmp	r0, r3
1a007a22:	bfb8      	it	lt
1a007a24:	4618      	movlt	r0, r3
1a007a26:	e7a7      	b.n	1a007978 <_printf_i+0x14c>
1a007a28:	2301      	movs	r3, #1
1a007a2a:	464a      	mov	r2, r9
1a007a2c:	4639      	mov	r1, r7
1a007a2e:	4630      	mov	r0, r6
1a007a30:	47c0      	blx	r8
1a007a32:	3001      	adds	r0, #1
1a007a34:	d09e      	beq.n	1a007974 <_printf_i+0x148>
1a007a36:	3501      	adds	r5, #1
1a007a38:	68e3      	ldr	r3, [r4, #12]
1a007a3a:	9a03      	ldr	r2, [sp, #12]
1a007a3c:	1a9b      	subs	r3, r3, r2
1a007a3e:	42ab      	cmp	r3, r5
1a007a40:	dcf2      	bgt.n	1a007a28 <_printf_i+0x1fc>
1a007a42:	e7eb      	b.n	1a007a1c <_printf_i+0x1f0>
1a007a44:	2500      	movs	r5, #0
1a007a46:	f104 0919 	add.w	r9, r4, #25
1a007a4a:	e7f5      	b.n	1a007a38 <_printf_i+0x20c>
1a007a4c:	1a008be9 	.word	0x1a008be9
1a007a50:	1a008bfa 	.word	0x1a008bfa

1a007a54 <iprintf>:
1a007a54:	b40f      	push	{r0, r1, r2, r3}
1a007a56:	4b0a      	ldr	r3, [pc, #40]	; (1a007a80 <iprintf+0x2c>)
1a007a58:	b513      	push	{r0, r1, r4, lr}
1a007a5a:	681c      	ldr	r4, [r3, #0]
1a007a5c:	b124      	cbz	r4, 1a007a68 <iprintf+0x14>
1a007a5e:	69a3      	ldr	r3, [r4, #24]
1a007a60:	b913      	cbnz	r3, 1a007a68 <iprintf+0x14>
1a007a62:	4620      	mov	r0, r4
1a007a64:	f7ff fb98 	bl	1a007198 <__sinit>
1a007a68:	ab05      	add	r3, sp, #20
1a007a6a:	9a04      	ldr	r2, [sp, #16]
1a007a6c:	68a1      	ldr	r1, [r4, #8]
1a007a6e:	9301      	str	r3, [sp, #4]
1a007a70:	4620      	mov	r0, r4
1a007a72:	f7ff fd3d 	bl	1a0074f0 <_vfiprintf_r>
1a007a76:	b002      	add	sp, #8
1a007a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a007a7c:	b004      	add	sp, #16
1a007a7e:	4770      	bx	lr
1a007a80:	10000050 	.word	0x10000050

1a007a84 <putchar>:
1a007a84:	b538      	push	{r3, r4, r5, lr}
1a007a86:	4b08      	ldr	r3, [pc, #32]	; (1a007aa8 <putchar+0x24>)
1a007a88:	681c      	ldr	r4, [r3, #0]
1a007a8a:	4605      	mov	r5, r0
1a007a8c:	b124      	cbz	r4, 1a007a98 <putchar+0x14>
1a007a8e:	69a3      	ldr	r3, [r4, #24]
1a007a90:	b913      	cbnz	r3, 1a007a98 <putchar+0x14>
1a007a92:	4620      	mov	r0, r4
1a007a94:	f7ff fb80 	bl	1a007198 <__sinit>
1a007a98:	68a2      	ldr	r2, [r4, #8]
1a007a9a:	4629      	mov	r1, r5
1a007a9c:	4620      	mov	r0, r4
1a007a9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a007aa2:	f000 ba49 	b.w	1a007f38 <_putc_r>
1a007aa6:	bf00      	nop
1a007aa8:	10000050 	.word	0x10000050

1a007aac <_puts_r>:
1a007aac:	b570      	push	{r4, r5, r6, lr}
1a007aae:	460e      	mov	r6, r1
1a007ab0:	4605      	mov	r5, r0
1a007ab2:	b118      	cbz	r0, 1a007abc <_puts_r+0x10>
1a007ab4:	6983      	ldr	r3, [r0, #24]
1a007ab6:	b90b      	cbnz	r3, 1a007abc <_puts_r+0x10>
1a007ab8:	f7ff fb6e 	bl	1a007198 <__sinit>
1a007abc:	69ab      	ldr	r3, [r5, #24]
1a007abe:	68ac      	ldr	r4, [r5, #8]
1a007ac0:	b913      	cbnz	r3, 1a007ac8 <_puts_r+0x1c>
1a007ac2:	4628      	mov	r0, r5
1a007ac4:	f7ff fb68 	bl	1a007198 <__sinit>
1a007ac8:	4b2c      	ldr	r3, [pc, #176]	; (1a007b7c <_puts_r+0xd0>)
1a007aca:	429c      	cmp	r4, r3
1a007acc:	d120      	bne.n	1a007b10 <_puts_r+0x64>
1a007ace:	686c      	ldr	r4, [r5, #4]
1a007ad0:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a007ad2:	07db      	lsls	r3, r3, #31
1a007ad4:	d405      	bmi.n	1a007ae2 <_puts_r+0x36>
1a007ad6:	89a3      	ldrh	r3, [r4, #12]
1a007ad8:	0598      	lsls	r0, r3, #22
1a007ada:	d402      	bmi.n	1a007ae2 <_puts_r+0x36>
1a007adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a007ade:	f7ff fc1c 	bl	1a00731a <__retarget_lock_acquire_recursive>
1a007ae2:	89a3      	ldrh	r3, [r4, #12]
1a007ae4:	0719      	lsls	r1, r3, #28
1a007ae6:	d51d      	bpl.n	1a007b24 <_puts_r+0x78>
1a007ae8:	6923      	ldr	r3, [r4, #16]
1a007aea:	b1db      	cbz	r3, 1a007b24 <_puts_r+0x78>
1a007aec:	3e01      	subs	r6, #1
1a007aee:	68a3      	ldr	r3, [r4, #8]
1a007af0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1a007af4:	3b01      	subs	r3, #1
1a007af6:	60a3      	str	r3, [r4, #8]
1a007af8:	bb39      	cbnz	r1, 1a007b4a <_puts_r+0x9e>
1a007afa:	2b00      	cmp	r3, #0
1a007afc:	da38      	bge.n	1a007b70 <_puts_r+0xc4>
1a007afe:	4622      	mov	r2, r4
1a007b00:	210a      	movs	r1, #10
1a007b02:	4628      	mov	r0, r5
1a007b04:	f000 f894 	bl	1a007c30 <__swbuf_r>
1a007b08:	3001      	adds	r0, #1
1a007b0a:	d011      	beq.n	1a007b30 <_puts_r+0x84>
1a007b0c:	250a      	movs	r5, #10
1a007b0e:	e011      	b.n	1a007b34 <_puts_r+0x88>
1a007b10:	4b1b      	ldr	r3, [pc, #108]	; (1a007b80 <_puts_r+0xd4>)
1a007b12:	429c      	cmp	r4, r3
1a007b14:	d101      	bne.n	1a007b1a <_puts_r+0x6e>
1a007b16:	68ac      	ldr	r4, [r5, #8]
1a007b18:	e7da      	b.n	1a007ad0 <_puts_r+0x24>
1a007b1a:	4b1a      	ldr	r3, [pc, #104]	; (1a007b84 <_puts_r+0xd8>)
1a007b1c:	429c      	cmp	r4, r3
1a007b1e:	bf08      	it	eq
1a007b20:	68ec      	ldreq	r4, [r5, #12]
1a007b22:	e7d5      	b.n	1a007ad0 <_puts_r+0x24>
1a007b24:	4621      	mov	r1, r4
1a007b26:	4628      	mov	r0, r5
1a007b28:	f000 f8d4 	bl	1a007cd4 <__swsetup_r>
1a007b2c:	2800      	cmp	r0, #0
1a007b2e:	d0dd      	beq.n	1a007aec <_puts_r+0x40>
1a007b30:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a007b34:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a007b36:	07da      	lsls	r2, r3, #31
1a007b38:	d405      	bmi.n	1a007b46 <_puts_r+0x9a>
1a007b3a:	89a3      	ldrh	r3, [r4, #12]
1a007b3c:	059b      	lsls	r3, r3, #22
1a007b3e:	d402      	bmi.n	1a007b46 <_puts_r+0x9a>
1a007b40:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a007b42:	f7ff fbeb 	bl	1a00731c <__retarget_lock_release_recursive>
1a007b46:	4628      	mov	r0, r5
1a007b48:	bd70      	pop	{r4, r5, r6, pc}
1a007b4a:	2b00      	cmp	r3, #0
1a007b4c:	da04      	bge.n	1a007b58 <_puts_r+0xac>
1a007b4e:	69a2      	ldr	r2, [r4, #24]
1a007b50:	429a      	cmp	r2, r3
1a007b52:	dc06      	bgt.n	1a007b62 <_puts_r+0xb6>
1a007b54:	290a      	cmp	r1, #10
1a007b56:	d004      	beq.n	1a007b62 <_puts_r+0xb6>
1a007b58:	6823      	ldr	r3, [r4, #0]
1a007b5a:	1c5a      	adds	r2, r3, #1
1a007b5c:	6022      	str	r2, [r4, #0]
1a007b5e:	7019      	strb	r1, [r3, #0]
1a007b60:	e7c5      	b.n	1a007aee <_puts_r+0x42>
1a007b62:	4622      	mov	r2, r4
1a007b64:	4628      	mov	r0, r5
1a007b66:	f000 f863 	bl	1a007c30 <__swbuf_r>
1a007b6a:	3001      	adds	r0, #1
1a007b6c:	d1bf      	bne.n	1a007aee <_puts_r+0x42>
1a007b6e:	e7df      	b.n	1a007b30 <_puts_r+0x84>
1a007b70:	6823      	ldr	r3, [r4, #0]
1a007b72:	250a      	movs	r5, #10
1a007b74:	1c5a      	adds	r2, r3, #1
1a007b76:	6022      	str	r2, [r4, #0]
1a007b78:	701d      	strb	r5, [r3, #0]
1a007b7a:	e7db      	b.n	1a007b34 <_puts_r+0x88>
1a007b7c:	1a008b94 	.word	0x1a008b94
1a007b80:	1a008bb4 	.word	0x1a008bb4
1a007b84:	1a008b74 	.word	0x1a008b74

1a007b88 <puts>:
1a007b88:	4b02      	ldr	r3, [pc, #8]	; (1a007b94 <puts+0xc>)
1a007b8a:	4601      	mov	r1, r0
1a007b8c:	6818      	ldr	r0, [r3, #0]
1a007b8e:	f7ff bf8d 	b.w	1a007aac <_puts_r>
1a007b92:	bf00      	nop
1a007b94:	10000050 	.word	0x10000050

1a007b98 <__sread>:
1a007b98:	b510      	push	{r4, lr}
1a007b9a:	460c      	mov	r4, r1
1a007b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a007ba0:	f7fb fe12 	bl	1a0037c8 <_read_r>
1a007ba4:	2800      	cmp	r0, #0
1a007ba6:	bfab      	itete	ge
1a007ba8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a007baa:	89a3      	ldrhlt	r3, [r4, #12]
1a007bac:	181b      	addge	r3, r3, r0
1a007bae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a007bb2:	bfac      	ite	ge
1a007bb4:	6563      	strge	r3, [r4, #84]	; 0x54
1a007bb6:	81a3      	strhlt	r3, [r4, #12]
1a007bb8:	bd10      	pop	{r4, pc}

1a007bba <__swrite>:
1a007bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a007bbe:	461f      	mov	r7, r3
1a007bc0:	898b      	ldrh	r3, [r1, #12]
1a007bc2:	05db      	lsls	r3, r3, #23
1a007bc4:	4605      	mov	r5, r0
1a007bc6:	460c      	mov	r4, r1
1a007bc8:	4616      	mov	r6, r2
1a007bca:	d505      	bpl.n	1a007bd8 <__swrite+0x1e>
1a007bcc:	2302      	movs	r3, #2
1a007bce:	2200      	movs	r2, #0
1a007bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a007bd4:	f7fb fdf3 	bl	1a0037be <_lseek_r>
1a007bd8:	89a3      	ldrh	r3, [r4, #12]
1a007bda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a007bde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a007be2:	81a3      	strh	r3, [r4, #12]
1a007be4:	4632      	mov	r2, r6
1a007be6:	463b      	mov	r3, r7
1a007be8:	4628      	mov	r0, r5
1a007bea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a007bee:	f7fb be12 	b.w	1a003816 <_write_r>

1a007bf2 <__sseek>:
1a007bf2:	b510      	push	{r4, lr}
1a007bf4:	460c      	mov	r4, r1
1a007bf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a007bfa:	f7fb fde0 	bl	1a0037be <_lseek_r>
1a007bfe:	1c43      	adds	r3, r0, #1
1a007c00:	89a3      	ldrh	r3, [r4, #12]
1a007c02:	bf15      	itete	ne
1a007c04:	6560      	strne	r0, [r4, #84]	; 0x54
1a007c06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a007c0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a007c0e:	81a3      	strheq	r3, [r4, #12]
1a007c10:	bf18      	it	ne
1a007c12:	81a3      	strhne	r3, [r4, #12]
1a007c14:	bd10      	pop	{r4, pc}

1a007c16 <__sclose>:
1a007c16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a007c1a:	f7fb bdbd 	b.w	1a003798 <_close_r>

1a007c1e <strlen>:
1a007c1e:	4603      	mov	r3, r0
1a007c20:	f813 2b01 	ldrb.w	r2, [r3], #1
1a007c24:	2a00      	cmp	r2, #0
1a007c26:	d1fb      	bne.n	1a007c20 <strlen+0x2>
1a007c28:	1a18      	subs	r0, r3, r0
1a007c2a:	3801      	subs	r0, #1
1a007c2c:	4770      	bx	lr
1a007c2e:	Address 0x000000001a007c2e is out of bounds.


1a007c30 <__swbuf_r>:
1a007c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a007c32:	460e      	mov	r6, r1
1a007c34:	4614      	mov	r4, r2
1a007c36:	4605      	mov	r5, r0
1a007c38:	b118      	cbz	r0, 1a007c42 <__swbuf_r+0x12>
1a007c3a:	6983      	ldr	r3, [r0, #24]
1a007c3c:	b90b      	cbnz	r3, 1a007c42 <__swbuf_r+0x12>
1a007c3e:	f7ff faab 	bl	1a007198 <__sinit>
1a007c42:	4b21      	ldr	r3, [pc, #132]	; (1a007cc8 <__swbuf_r+0x98>)
1a007c44:	429c      	cmp	r4, r3
1a007c46:	d12b      	bne.n	1a007ca0 <__swbuf_r+0x70>
1a007c48:	686c      	ldr	r4, [r5, #4]
1a007c4a:	69a3      	ldr	r3, [r4, #24]
1a007c4c:	60a3      	str	r3, [r4, #8]
1a007c4e:	89a3      	ldrh	r3, [r4, #12]
1a007c50:	071a      	lsls	r2, r3, #28
1a007c52:	d52f      	bpl.n	1a007cb4 <__swbuf_r+0x84>
1a007c54:	6923      	ldr	r3, [r4, #16]
1a007c56:	b36b      	cbz	r3, 1a007cb4 <__swbuf_r+0x84>
1a007c58:	6923      	ldr	r3, [r4, #16]
1a007c5a:	6820      	ldr	r0, [r4, #0]
1a007c5c:	1ac0      	subs	r0, r0, r3
1a007c5e:	6963      	ldr	r3, [r4, #20]
1a007c60:	b2f6      	uxtb	r6, r6
1a007c62:	4283      	cmp	r3, r0
1a007c64:	4637      	mov	r7, r6
1a007c66:	dc04      	bgt.n	1a007c72 <__swbuf_r+0x42>
1a007c68:	4621      	mov	r1, r4
1a007c6a:	4628      	mov	r0, r5
1a007c6c:	f7ff fa00 	bl	1a007070 <_fflush_r>
1a007c70:	bb30      	cbnz	r0, 1a007cc0 <__swbuf_r+0x90>
1a007c72:	68a3      	ldr	r3, [r4, #8]
1a007c74:	3b01      	subs	r3, #1
1a007c76:	60a3      	str	r3, [r4, #8]
1a007c78:	6823      	ldr	r3, [r4, #0]
1a007c7a:	1c5a      	adds	r2, r3, #1
1a007c7c:	6022      	str	r2, [r4, #0]
1a007c7e:	701e      	strb	r6, [r3, #0]
1a007c80:	6963      	ldr	r3, [r4, #20]
1a007c82:	3001      	adds	r0, #1
1a007c84:	4283      	cmp	r3, r0
1a007c86:	d004      	beq.n	1a007c92 <__swbuf_r+0x62>
1a007c88:	89a3      	ldrh	r3, [r4, #12]
1a007c8a:	07db      	lsls	r3, r3, #31
1a007c8c:	d506      	bpl.n	1a007c9c <__swbuf_r+0x6c>
1a007c8e:	2e0a      	cmp	r6, #10
1a007c90:	d104      	bne.n	1a007c9c <__swbuf_r+0x6c>
1a007c92:	4621      	mov	r1, r4
1a007c94:	4628      	mov	r0, r5
1a007c96:	f7ff f9eb 	bl	1a007070 <_fflush_r>
1a007c9a:	b988      	cbnz	r0, 1a007cc0 <__swbuf_r+0x90>
1a007c9c:	4638      	mov	r0, r7
1a007c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a007ca0:	4b0a      	ldr	r3, [pc, #40]	; (1a007ccc <__swbuf_r+0x9c>)
1a007ca2:	429c      	cmp	r4, r3
1a007ca4:	d101      	bne.n	1a007caa <__swbuf_r+0x7a>
1a007ca6:	68ac      	ldr	r4, [r5, #8]
1a007ca8:	e7cf      	b.n	1a007c4a <__swbuf_r+0x1a>
1a007caa:	4b09      	ldr	r3, [pc, #36]	; (1a007cd0 <__swbuf_r+0xa0>)
1a007cac:	429c      	cmp	r4, r3
1a007cae:	bf08      	it	eq
1a007cb0:	68ec      	ldreq	r4, [r5, #12]
1a007cb2:	e7ca      	b.n	1a007c4a <__swbuf_r+0x1a>
1a007cb4:	4621      	mov	r1, r4
1a007cb6:	4628      	mov	r0, r5
1a007cb8:	f000 f80c 	bl	1a007cd4 <__swsetup_r>
1a007cbc:	2800      	cmp	r0, #0
1a007cbe:	d0cb      	beq.n	1a007c58 <__swbuf_r+0x28>
1a007cc0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a007cc4:	e7ea      	b.n	1a007c9c <__swbuf_r+0x6c>
1a007cc6:	bf00      	nop
1a007cc8:	1a008b94 	.word	0x1a008b94
1a007ccc:	1a008bb4 	.word	0x1a008bb4
1a007cd0:	1a008b74 	.word	0x1a008b74

1a007cd4 <__swsetup_r>:
1a007cd4:	4b32      	ldr	r3, [pc, #200]	; (1a007da0 <__swsetup_r+0xcc>)
1a007cd6:	b570      	push	{r4, r5, r6, lr}
1a007cd8:	681d      	ldr	r5, [r3, #0]
1a007cda:	4606      	mov	r6, r0
1a007cdc:	460c      	mov	r4, r1
1a007cde:	b125      	cbz	r5, 1a007cea <__swsetup_r+0x16>
1a007ce0:	69ab      	ldr	r3, [r5, #24]
1a007ce2:	b913      	cbnz	r3, 1a007cea <__swsetup_r+0x16>
1a007ce4:	4628      	mov	r0, r5
1a007ce6:	f7ff fa57 	bl	1a007198 <__sinit>
1a007cea:	4b2e      	ldr	r3, [pc, #184]	; (1a007da4 <__swsetup_r+0xd0>)
1a007cec:	429c      	cmp	r4, r3
1a007cee:	d10f      	bne.n	1a007d10 <__swsetup_r+0x3c>
1a007cf0:	686c      	ldr	r4, [r5, #4]
1a007cf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a007cf6:	b29a      	uxth	r2, r3
1a007cf8:	0715      	lsls	r5, r2, #28
1a007cfa:	d42c      	bmi.n	1a007d56 <__swsetup_r+0x82>
1a007cfc:	06d0      	lsls	r0, r2, #27
1a007cfe:	d411      	bmi.n	1a007d24 <__swsetup_r+0x50>
1a007d00:	2209      	movs	r2, #9
1a007d02:	6032      	str	r2, [r6, #0]
1a007d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a007d08:	81a3      	strh	r3, [r4, #12]
1a007d0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a007d0e:	e03e      	b.n	1a007d8e <__swsetup_r+0xba>
1a007d10:	4b25      	ldr	r3, [pc, #148]	; (1a007da8 <__swsetup_r+0xd4>)
1a007d12:	429c      	cmp	r4, r3
1a007d14:	d101      	bne.n	1a007d1a <__swsetup_r+0x46>
1a007d16:	68ac      	ldr	r4, [r5, #8]
1a007d18:	e7eb      	b.n	1a007cf2 <__swsetup_r+0x1e>
1a007d1a:	4b24      	ldr	r3, [pc, #144]	; (1a007dac <__swsetup_r+0xd8>)
1a007d1c:	429c      	cmp	r4, r3
1a007d1e:	bf08      	it	eq
1a007d20:	68ec      	ldreq	r4, [r5, #12]
1a007d22:	e7e6      	b.n	1a007cf2 <__swsetup_r+0x1e>
1a007d24:	0751      	lsls	r1, r2, #29
1a007d26:	d512      	bpl.n	1a007d4e <__swsetup_r+0x7a>
1a007d28:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a007d2a:	b141      	cbz	r1, 1a007d3e <__swsetup_r+0x6a>
1a007d2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a007d30:	4299      	cmp	r1, r3
1a007d32:	d002      	beq.n	1a007d3a <__swsetup_r+0x66>
1a007d34:	4630      	mov	r0, r6
1a007d36:	f7ff fb09 	bl	1a00734c <_free_r>
1a007d3a:	2300      	movs	r3, #0
1a007d3c:	6363      	str	r3, [r4, #52]	; 0x34
1a007d3e:	89a3      	ldrh	r3, [r4, #12]
1a007d40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a007d44:	81a3      	strh	r3, [r4, #12]
1a007d46:	2300      	movs	r3, #0
1a007d48:	6063      	str	r3, [r4, #4]
1a007d4a:	6923      	ldr	r3, [r4, #16]
1a007d4c:	6023      	str	r3, [r4, #0]
1a007d4e:	89a3      	ldrh	r3, [r4, #12]
1a007d50:	f043 0308 	orr.w	r3, r3, #8
1a007d54:	81a3      	strh	r3, [r4, #12]
1a007d56:	6923      	ldr	r3, [r4, #16]
1a007d58:	b94b      	cbnz	r3, 1a007d6e <__swsetup_r+0x9a>
1a007d5a:	89a3      	ldrh	r3, [r4, #12]
1a007d5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a007d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a007d64:	d003      	beq.n	1a007d6e <__swsetup_r+0x9a>
1a007d66:	4621      	mov	r1, r4
1a007d68:	4630      	mov	r0, r6
1a007d6a:	f000 f845 	bl	1a007df8 <__smakebuf_r>
1a007d6e:	89a2      	ldrh	r2, [r4, #12]
1a007d70:	f012 0301 	ands.w	r3, r2, #1
1a007d74:	d00c      	beq.n	1a007d90 <__swsetup_r+0xbc>
1a007d76:	2300      	movs	r3, #0
1a007d78:	60a3      	str	r3, [r4, #8]
1a007d7a:	6963      	ldr	r3, [r4, #20]
1a007d7c:	425b      	negs	r3, r3
1a007d7e:	61a3      	str	r3, [r4, #24]
1a007d80:	6923      	ldr	r3, [r4, #16]
1a007d82:	b953      	cbnz	r3, 1a007d9a <__swsetup_r+0xc6>
1a007d84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a007d88:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a007d8c:	d1ba      	bne.n	1a007d04 <__swsetup_r+0x30>
1a007d8e:	bd70      	pop	{r4, r5, r6, pc}
1a007d90:	0792      	lsls	r2, r2, #30
1a007d92:	bf58      	it	pl
1a007d94:	6963      	ldrpl	r3, [r4, #20]
1a007d96:	60a3      	str	r3, [r4, #8]
1a007d98:	e7f2      	b.n	1a007d80 <__swsetup_r+0xac>
1a007d9a:	2000      	movs	r0, #0
1a007d9c:	e7f7      	b.n	1a007d8e <__swsetup_r+0xba>
1a007d9e:	bf00      	nop
1a007da0:	10000050 	.word	0x10000050
1a007da4:	1a008b94 	.word	0x1a008b94
1a007da8:	1a008bb4 	.word	0x1a008bb4
1a007dac:	1a008b74 	.word	0x1a008b74

1a007db0 <__swhatbuf_r>:
1a007db0:	b570      	push	{r4, r5, r6, lr}
1a007db2:	460e      	mov	r6, r1
1a007db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a007db8:	2900      	cmp	r1, #0
1a007dba:	b096      	sub	sp, #88	; 0x58
1a007dbc:	4614      	mov	r4, r2
1a007dbe:	461d      	mov	r5, r3
1a007dc0:	da07      	bge.n	1a007dd2 <__swhatbuf_r+0x22>
1a007dc2:	2300      	movs	r3, #0
1a007dc4:	602b      	str	r3, [r5, #0]
1a007dc6:	89b3      	ldrh	r3, [r6, #12]
1a007dc8:	061a      	lsls	r2, r3, #24
1a007dca:	d410      	bmi.n	1a007dee <__swhatbuf_r+0x3e>
1a007dcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a007dd0:	e00e      	b.n	1a007df0 <__swhatbuf_r+0x40>
1a007dd2:	466a      	mov	r2, sp
1a007dd4:	f7fb fce5 	bl	1a0037a2 <_fstat_r>
1a007dd8:	2800      	cmp	r0, #0
1a007dda:	dbf2      	blt.n	1a007dc2 <__swhatbuf_r+0x12>
1a007ddc:	9a01      	ldr	r2, [sp, #4]
1a007dde:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a007de2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a007de6:	425a      	negs	r2, r3
1a007de8:	415a      	adcs	r2, r3
1a007dea:	602a      	str	r2, [r5, #0]
1a007dec:	e7ee      	b.n	1a007dcc <__swhatbuf_r+0x1c>
1a007dee:	2340      	movs	r3, #64	; 0x40
1a007df0:	2000      	movs	r0, #0
1a007df2:	6023      	str	r3, [r4, #0]
1a007df4:	b016      	add	sp, #88	; 0x58
1a007df6:	bd70      	pop	{r4, r5, r6, pc}

1a007df8 <__smakebuf_r>:
1a007df8:	898b      	ldrh	r3, [r1, #12]
1a007dfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a007dfc:	079d      	lsls	r5, r3, #30
1a007dfe:	4606      	mov	r6, r0
1a007e00:	460c      	mov	r4, r1
1a007e02:	d507      	bpl.n	1a007e14 <__smakebuf_r+0x1c>
1a007e04:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a007e08:	6023      	str	r3, [r4, #0]
1a007e0a:	6123      	str	r3, [r4, #16]
1a007e0c:	2301      	movs	r3, #1
1a007e0e:	6163      	str	r3, [r4, #20]
1a007e10:	b002      	add	sp, #8
1a007e12:	bd70      	pop	{r4, r5, r6, pc}
1a007e14:	ab01      	add	r3, sp, #4
1a007e16:	466a      	mov	r2, sp
1a007e18:	f7ff ffca 	bl	1a007db0 <__swhatbuf_r>
1a007e1c:	9900      	ldr	r1, [sp, #0]
1a007e1e:	4605      	mov	r5, r0
1a007e20:	4630      	mov	r0, r6
1a007e22:	f7ff fae1 	bl	1a0073e8 <_malloc_r>
1a007e26:	b948      	cbnz	r0, 1a007e3c <__smakebuf_r+0x44>
1a007e28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a007e2c:	059a      	lsls	r2, r3, #22
1a007e2e:	d4ef      	bmi.n	1a007e10 <__smakebuf_r+0x18>
1a007e30:	f023 0303 	bic.w	r3, r3, #3
1a007e34:	f043 0302 	orr.w	r3, r3, #2
1a007e38:	81a3      	strh	r3, [r4, #12]
1a007e3a:	e7e3      	b.n	1a007e04 <__smakebuf_r+0xc>
1a007e3c:	4b0d      	ldr	r3, [pc, #52]	; (1a007e74 <__smakebuf_r+0x7c>)
1a007e3e:	62b3      	str	r3, [r6, #40]	; 0x28
1a007e40:	89a3      	ldrh	r3, [r4, #12]
1a007e42:	6020      	str	r0, [r4, #0]
1a007e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a007e48:	81a3      	strh	r3, [r4, #12]
1a007e4a:	9b00      	ldr	r3, [sp, #0]
1a007e4c:	6163      	str	r3, [r4, #20]
1a007e4e:	9b01      	ldr	r3, [sp, #4]
1a007e50:	6120      	str	r0, [r4, #16]
1a007e52:	b15b      	cbz	r3, 1a007e6c <__smakebuf_r+0x74>
1a007e54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a007e58:	4630      	mov	r0, r6
1a007e5a:	f7fb fca7 	bl	1a0037ac <_isatty_r>
1a007e5e:	b128      	cbz	r0, 1a007e6c <__smakebuf_r+0x74>
1a007e60:	89a3      	ldrh	r3, [r4, #12]
1a007e62:	f023 0303 	bic.w	r3, r3, #3
1a007e66:	f043 0301 	orr.w	r3, r3, #1
1a007e6a:	81a3      	strh	r3, [r4, #12]
1a007e6c:	89a3      	ldrh	r3, [r4, #12]
1a007e6e:	431d      	orrs	r5, r3
1a007e70:	81a5      	strh	r5, [r4, #12]
1a007e72:	e7cd      	b.n	1a007e10 <__smakebuf_r+0x18>
1a007e74:	1a007131 	.word	0x1a007131
1a007e78:	ffffffff 	.word	0xffffffff
1a007e7c:	ffffffff 	.word	0xffffffff

1a007e80 <memchr>:
1a007e80:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a007e84:	2a10      	cmp	r2, #16
1a007e86:	db2b      	blt.n	1a007ee0 <memchr+0x60>
1a007e88:	f010 0f07 	tst.w	r0, #7
1a007e8c:	d008      	beq.n	1a007ea0 <memchr+0x20>
1a007e8e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a007e92:	3a01      	subs	r2, #1
1a007e94:	428b      	cmp	r3, r1
1a007e96:	d02d      	beq.n	1a007ef4 <memchr+0x74>
1a007e98:	f010 0f07 	tst.w	r0, #7
1a007e9c:	b342      	cbz	r2, 1a007ef0 <memchr+0x70>
1a007e9e:	d1f6      	bne.n	1a007e8e <memchr+0xe>
1a007ea0:	b4f0      	push	{r4, r5, r6, r7}
1a007ea2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a007ea6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a007eaa:	f022 0407 	bic.w	r4, r2, #7
1a007eae:	f07f 0700 	mvns.w	r7, #0
1a007eb2:	2300      	movs	r3, #0
1a007eb4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a007eb8:	3c08      	subs	r4, #8
1a007eba:	ea85 0501 	eor.w	r5, r5, r1
1a007ebe:	ea86 0601 	eor.w	r6, r6, r1
1a007ec2:	fa85 f547 	uadd8	r5, r5, r7
1a007ec6:	faa3 f587 	sel	r5, r3, r7
1a007eca:	fa86 f647 	uadd8	r6, r6, r7
1a007ece:	faa5 f687 	sel	r6, r5, r7
1a007ed2:	b98e      	cbnz	r6, 1a007ef8 <memchr+0x78>
1a007ed4:	d1ee      	bne.n	1a007eb4 <memchr+0x34>
1a007ed6:	bcf0      	pop	{r4, r5, r6, r7}
1a007ed8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a007edc:	f002 0207 	and.w	r2, r2, #7
1a007ee0:	b132      	cbz	r2, 1a007ef0 <memchr+0x70>
1a007ee2:	f810 3b01 	ldrb.w	r3, [r0], #1
1a007ee6:	3a01      	subs	r2, #1
1a007ee8:	ea83 0301 	eor.w	r3, r3, r1
1a007eec:	b113      	cbz	r3, 1a007ef4 <memchr+0x74>
1a007eee:	d1f8      	bne.n	1a007ee2 <memchr+0x62>
1a007ef0:	2000      	movs	r0, #0
1a007ef2:	4770      	bx	lr
1a007ef4:	3801      	subs	r0, #1
1a007ef6:	4770      	bx	lr
1a007ef8:	2d00      	cmp	r5, #0
1a007efa:	bf06      	itte	eq
1a007efc:	4635      	moveq	r5, r6
1a007efe:	3803      	subeq	r0, #3
1a007f00:	3807      	subne	r0, #7
1a007f02:	f015 0f01 	tst.w	r5, #1
1a007f06:	d107      	bne.n	1a007f18 <memchr+0x98>
1a007f08:	3001      	adds	r0, #1
1a007f0a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a007f0e:	bf02      	ittt	eq
1a007f10:	3001      	addeq	r0, #1
1a007f12:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a007f16:	3001      	addeq	r0, #1
1a007f18:	bcf0      	pop	{r4, r5, r6, r7}
1a007f1a:	3801      	subs	r0, #1
1a007f1c:	4770      	bx	lr
1a007f1e:	bf00      	nop

1a007f20 <__malloc_lock>:
1a007f20:	4801      	ldr	r0, [pc, #4]	; (1a007f28 <__malloc_lock+0x8>)
1a007f22:	f7ff b9fa 	b.w	1a00731a <__retarget_lock_acquire_recursive>
1a007f26:	bf00      	nop
1a007f28:	10004ff0 	.word	0x10004ff0

1a007f2c <__malloc_unlock>:
1a007f2c:	4801      	ldr	r0, [pc, #4]	; (1a007f34 <__malloc_unlock+0x8>)
1a007f2e:	f7ff b9f5 	b.w	1a00731c <__retarget_lock_release_recursive>
1a007f32:	bf00      	nop
1a007f34:	10004ff0 	.word	0x10004ff0

1a007f38 <_putc_r>:
1a007f38:	b570      	push	{r4, r5, r6, lr}
1a007f3a:	460d      	mov	r5, r1
1a007f3c:	4614      	mov	r4, r2
1a007f3e:	4606      	mov	r6, r0
1a007f40:	b118      	cbz	r0, 1a007f4a <_putc_r+0x12>
1a007f42:	6983      	ldr	r3, [r0, #24]
1a007f44:	b90b      	cbnz	r3, 1a007f4a <_putc_r+0x12>
1a007f46:	f7ff f927 	bl	1a007198 <__sinit>
1a007f4a:	4b1c      	ldr	r3, [pc, #112]	; (1a007fbc <_putc_r+0x84>)
1a007f4c:	429c      	cmp	r4, r3
1a007f4e:	d124      	bne.n	1a007f9a <_putc_r+0x62>
1a007f50:	6874      	ldr	r4, [r6, #4]
1a007f52:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a007f54:	07d8      	lsls	r0, r3, #31
1a007f56:	d405      	bmi.n	1a007f64 <_putc_r+0x2c>
1a007f58:	89a3      	ldrh	r3, [r4, #12]
1a007f5a:	0599      	lsls	r1, r3, #22
1a007f5c:	d402      	bmi.n	1a007f64 <_putc_r+0x2c>
1a007f5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a007f60:	f7ff f9db 	bl	1a00731a <__retarget_lock_acquire_recursive>
1a007f64:	68a3      	ldr	r3, [r4, #8]
1a007f66:	3b01      	subs	r3, #1
1a007f68:	2b00      	cmp	r3, #0
1a007f6a:	60a3      	str	r3, [r4, #8]
1a007f6c:	da05      	bge.n	1a007f7a <_putc_r+0x42>
1a007f6e:	69a2      	ldr	r2, [r4, #24]
1a007f70:	4293      	cmp	r3, r2
1a007f72:	db1c      	blt.n	1a007fae <_putc_r+0x76>
1a007f74:	b2eb      	uxtb	r3, r5
1a007f76:	2b0a      	cmp	r3, #10
1a007f78:	d019      	beq.n	1a007fae <_putc_r+0x76>
1a007f7a:	6823      	ldr	r3, [r4, #0]
1a007f7c:	1c5a      	adds	r2, r3, #1
1a007f7e:	6022      	str	r2, [r4, #0]
1a007f80:	701d      	strb	r5, [r3, #0]
1a007f82:	b2ed      	uxtb	r5, r5
1a007f84:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a007f86:	07da      	lsls	r2, r3, #31
1a007f88:	d405      	bmi.n	1a007f96 <_putc_r+0x5e>
1a007f8a:	89a3      	ldrh	r3, [r4, #12]
1a007f8c:	059b      	lsls	r3, r3, #22
1a007f8e:	d402      	bmi.n	1a007f96 <_putc_r+0x5e>
1a007f90:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a007f92:	f7ff f9c3 	bl	1a00731c <__retarget_lock_release_recursive>
1a007f96:	4628      	mov	r0, r5
1a007f98:	bd70      	pop	{r4, r5, r6, pc}
1a007f9a:	4b09      	ldr	r3, [pc, #36]	; (1a007fc0 <_putc_r+0x88>)
1a007f9c:	429c      	cmp	r4, r3
1a007f9e:	d101      	bne.n	1a007fa4 <_putc_r+0x6c>
1a007fa0:	68b4      	ldr	r4, [r6, #8]
1a007fa2:	e7d6      	b.n	1a007f52 <_putc_r+0x1a>
1a007fa4:	4b07      	ldr	r3, [pc, #28]	; (1a007fc4 <_putc_r+0x8c>)
1a007fa6:	429c      	cmp	r4, r3
1a007fa8:	bf08      	it	eq
1a007faa:	68f4      	ldreq	r4, [r6, #12]
1a007fac:	e7d1      	b.n	1a007f52 <_putc_r+0x1a>
1a007fae:	4629      	mov	r1, r5
1a007fb0:	4622      	mov	r2, r4
1a007fb2:	4630      	mov	r0, r6
1a007fb4:	f7ff fe3c 	bl	1a007c30 <__swbuf_r>
1a007fb8:	4605      	mov	r5, r0
1a007fba:	e7e3      	b.n	1a007f84 <_putc_r+0x4c>
1a007fbc:	1a008b94 	.word	0x1a008b94
1a007fc0:	1a008bb4 	.word	0x1a008bb4
1a007fc4:	1a008b74 	.word	0x1a008b74
1a007fc8:	20787561 	.word	0x20787561
1a007fcc:	5825203d 	.word	0x5825203d
1a007fd0:	ff000a0d 	.word	0xff000a0d
1a007fd4:	20202020 	.word	0x20202020
1a007fd8:	20202020 	.word	0x20202020
1a007fdc:	20202020 	.word	0x20202020
1a007fe0:	ffff0020 	.word	0xffff0020
1a007fe4:	6f746f42 	.word	0x6f746f42
1a007fe8:	6425206e 	.word	0x6425206e
1a007fec:	65727020 	.word	0x65727020
1a007ff0:	6e6f6973 	.word	0x6e6f6973
1a007ff4:	206f6461 	.word	0x206f6461
1a007ff8:	ff000a0d 	.word	0xff000a0d
1a007ffc:	204d4f52 	.word	0x204d4f52
1a008000:	69746361 	.word	0x69746361
1a008004:	253a6176 	.word	0x253a6176
1a008008:	000a0d64 	.word	0x000a0d64
1a00800c:	734d4f52 	.word	0x734d4f52
1a008010:	6e6f6320 	.word	0x6e6f6320
1a008014:	74736973 	.word	0x74736973
1a008018:	79636e65 	.word	0x79636e65
1a00801c:	0d6b4f20 	.word	0x0d6b4f20
1a008020:	00000000 	.word	0x00000000
1a008024:	204d4f52 	.word	0x204d4f52
1a008028:	736e6f63 	.word	0x736e6f63
1a00802c:	65747369 	.word	0x65747369
1a008030:	2079636e 	.word	0x2079636e
1a008034:	0d6b6f4e 	.word	0x0d6b6f4e
1a008038:	ffffff00 	.word	0xffffff00
1a00803c:	736e6553 	.word	0x736e6553
1a008040:	6e20726f 	.word	0x6e20726f
1a008044:	6564206f 	.word	0x6564206f
1a008048:	74636574 	.word	0x74636574
1a00804c:	3a6f6461 	.word	0x3a6f6461
1a008050:	00000020 	.word	0x00000020
1a008054:	656e6f43 	.word	0x656e6f43
1a008058:	20657463 	.word	0x20657463
1a00805c:	73206c65 	.word	0x73206c65
1a008060:	6f736e65 	.word	0x6f736e65
1a008064:	65642072 	.word	0x65642072
1a008068:	00000020 	.word	0x00000020
1a00806c:	61636572 	.word	0x61636572
1a008070:	6f69626d 	.word	0x6f69626d
1a008074:	68207920 	.word	0x68207920
1a008078:	20616761 	.word	0x20616761
1a00807c:	00000000 	.word	0x00000000
1a008080:	65736572 	.word	0x65736572
1a008084:	65642074 	.word	0x65642074
1a008088:	7562206c 	.word	0x7562206c
1a00808c:	ffff0073 	.word	0xffff0073
1a008090:	736e6553 	.word	0x736e6553
1a008094:	6420726f 	.word	0x6420726f
1a008098:	63657465 	.word	0x63657465
1a00809c:	6f646174 	.word	0x6f646174
1a0080a0:	0000203a 	.word	0x0000203a
1a0080a4:	72676e49 	.word	0x72676e49
1a0080a8:	72617365 	.word	0x72617365
1a0080ac:	206e6520 	.word	0x206e6520
1a0080b0:	3f4d4f52 	.word	0x3f4d4f52
1a0080b4:	00000000 	.word	0x00000000
1a0080b8:	20204f4e 	.word	0x20204f4e
1a0080bc:	20202020 	.word	0x20202020
1a0080c0:	20202020 	.word	0x20202020
1a0080c4:	20202020 	.word	0x20202020
1a0080c8:	49532020 	.word	0x49532020
1a0080cc:	ffffff00 	.word	0xffffff00
1a0080d0:	20737562 	.word	0x20737562
1a0080d4:	63696e69 	.word	0x63696e69
1a0080d8:	696c6169 	.word	0x696c6169
1a0080dc:	6f64617a 	.word	0x6f64617a
1a0080e0:	00000d20 	.word	0x00000d20
1a0080e4:	534e4553 	.word	0x534e4553
1a0080e8:	4420524f 	.word	0x4420524f
1a0080ec:	43455445 	.word	0x43455445
1a0080f0:	4f444154 	.word	0x4f444154
1a0080f4:	00000d20 	.word	0x00000d20
1a0080f8:	7478656e 	.word	0x7478656e
1a0080fc:	6425203a 	.word	0x6425203a
1a008100:	00000a0d 	.word	0x00000a0d
1a008104:	00205825 	.word	0x00205825
1a008108:	736e6573 	.word	0x736e6573
1a00810c:	4e20726f 	.word	0x4e20726f
1a008110:	6564204f 	.word	0x6564204f
1a008114:	74636574 	.word	0x74636574
1a008118:	0d6f6461 	.word	0x0d6f6461
1a00811c:	ffffff00 	.word	0xffffff00
1a008120:	69706f63 	.word	0x69706f63
1a008124:	52207261 	.word	0x52207261
1a008128:	6c204d4f 	.word	0x6c204d4f
1a00812c:	6c61636f 	.word	0x6c61636f
1a008130:	206e6520 	.word	0x206e6520
1a008134:	6f6d6572 	.word	0x6f6d6572
1a008138:	000d6174 	.word	0x000d6174
1a00813c:	736e6f63 	.word	0x736e6f63
1a008140:	65747369 	.word	0x65747369
1a008144:	2079636e 	.word	0x2079636e
1a008148:	63656863 	.word	0x63656863
1a00814c:	6f6e206b 	.word	0x6f6e206b
1a008150:	75722074 	.word	0x75722074
1a008154:	00000d6e 	.word	0x00000d6e
1a008158:	734d4f52 	.word	0x734d4f52
1a00815c:	65726120 	.word	0x65726120
1a008160:	6e6f6320 	.word	0x6e6f6320
1a008164:	74736973 	.word	0x74736973
1a008168:	0d746e65 	.word	0x0d746e65
1a00816c:	00000000 	.word	0x00000000
1a008170:	204d4f52 	.word	0x204d4f52
1a008174:	79706f63 	.word	0x79706f63
1a008178:	6e6f6420 	.word	0x6e6f6420
1a00817c:	ff000d65 	.word	0xff000d65
1a008180:	72616c61 	.word	0x72616c61
1a008184:	6c69536d 	.word	0x6c69536d
1a008188:	65636e65 	.word	0x65636e65
1a00818c:	656d6954 	.word	0x656d6954
1a008190:	00000072 	.word	0x00000072
1a008194:	62494d48 	.word	0x62494d48
1a008198:	546b6361 	.word	0x546b6361
1a00819c:	726f4e6f 	.word	0x726f4e6f
1a0081a0:	546c616d 	.word	0x546c616d
1a0081a4:	72656d69 	.word	0x72656d69
1a0081a8:	00000000 	.word	0x00000000
1a0081ac:	6b736154 	.word	0x6b736154
1a0081b0:	ff003120 	.word	0xff003120
1a0081b4:	52414c41 	.word	0x52414c41
1a0081b8:	3a53414d 	.word	0x3a53414d
1a0081bc:	00000000 	.word	0x00000000
1a0081c0:	656c6953 	.word	0x656c6953
1a0081c4:	6169636e 	.word	0x6169636e
1a0081c8:	00000072 	.word	0x00000072
1a0081cc:	75736956 	.word	0x75736956
1a0081d0:	7a696c61 	.word	0x7a696c61
1a0081d4:	ff007261 	.word	0xff007261
1a0081d8:	756e656d 	.word	0x756e656d
1a0081dc:	666e6f43 	.word	0x666e6f43
1a0081e0:	74696e49 	.word	0x74696e49
1a0081e4:	0000000d 	.word	0x0000000d
1a0081e8:	20726150 	.word	0x20726150
1a0081ec:	746e6f6d 	.word	0x746e6f6d
1a0081f0:	3a6f6461 	.word	0x3a6f6461
1a0081f4:	00000020 	.word	0x00000020
1a0081f8:	69736f50 	.word	0x69736f50
1a0081fc:	6e6f6963 	.word	0x6e6f6963
1a008200:	0000203a 	.word	0x0000203a
1a008204:	666e6f43 	.word	0x666e6f43
1a008208:	616d7269 	.word	0x616d7269
1a00820c:	ff00203f 	.word	0xff00203f
1a008210:	20726150 	.word	0x20726150
1a008214:	746e6f6d 	.word	0x746e6f6d
1a008218:	3f6f6461 	.word	0x3f6f6461
1a00821c:	00000000 	.word	0x00000000
1a008220:	00000031 	.word	0x00000031
1a008224:	00000032 	.word	0x00000032
1a008228:	00000033 	.word	0x00000033
1a00822c:	00000034 	.word	0x00000034
1a008230:	00000035 	.word	0x00000035
1a008234:	ffff0036 	.word	0xffff0036
1a008238:	20656a65 	.word	0x20656a65
1a00823c:	656c6573 	.word	0x656c6573
1a008240:	6f696363 	.word	0x6f696363
1a008244:	6f64616e 	.word	0x6f64616e
1a008248:	6425203a 	.word	0x6425203a
1a00824c:	ff000a0d 	.word	0xff000a0d
1a008250:	554e454d 	.word	0x554e454d
1a008254:	0000003a 	.word	0x0000003a
1a008258:	72616c41 	.word	0x72616c41
1a00825c:	0073616d 	.word	0x0073616d
1a008260:	736e6553 	.word	0x736e6553
1a008264:	7365726f 	.word	0x7365726f
1a008268:	00000000 	.word	0x00000000
1a00826c:	004d4f52 	.word	0x004d4f52
1a008270:	746e614d 	.word	0x746e614d
1a008274:	6d696e65 	.word	0x6d696e65
1a008278:	746e6569 	.word	0x746e6569
1a00827c:	ffff006f 	.word	0xffff006f
1a008280:	544e414d 	.word	0x544e414d
1a008284:	4d494e45 	.word	0x4d494e45
1a008288:	544e4549 	.word	0x544e4549
1a00828c:	00003a4f 	.word	0x00003a4f
1a008290:	20726556 	.word	0x20726556
1a008294:	61747365 	.word	0x61747365
1a008298:	00736f64 	.word	0x00736f64
1a00829c:	63656843 	.word	0x63656843
1a0082a0:	616d206b 	.word	0x616d206b
1a0082a4:	7a697274 	.word	0x7a697274
1a0082a8:	00000000 	.word	0x00000000
1a0082ac:	63656843 	.word	0x63656843
1a0082b0:	7562206b 	.word	0x7562206b
1a0082b4:	72657a7a 	.word	0x72657a7a
1a0082b8:	00000020 	.word	0x00000020
1a0082bc:	63656843 	.word	0x63656843
1a0082c0:	454c206b 	.word	0x454c206b
1a0082c4:	65642044 	.word	0x65642044
1a0082c8:	74736520 	.word	0x74736520
1a0082cc:	006f6461 	.word	0x006f6461
1a0082d0:	69736f50 	.word	0x69736f50
1a0082d4:	6e6f6963 	.word	0x6e6f6963
1a0082d8:	ffff003f 	.word	0xffff003f
1a0082dc:	69736f70 	.word	0x69736f70
1a0082e0:	6e6f6963 	.word	0x6e6f6963
1a0082e4:	6c657320 	.word	0x6c657320
1a0082e8:	69636365 	.word	0x69636365
1a0082ec:	64616e6f 	.word	0x64616e6f
1a0082f0:	25203a61 	.word	0x25203a61
1a0082f4:	000a0d64 	.word	0x000a0d64
1a0082f8:	61666564 	.word	0x61666564
1a0082fc:	0d746c75 	.word	0x0d746c75
1a008300:	00000000 	.word	0x00000000
1a008304:	69736f70 	.word	0x69736f70
1a008308:	6e6f6963 	.word	0x6e6f6963
1a00830c:	74657220 	.word	0x74657220
1a008310:	616e726f 	.word	0x616e726f
1a008314:	203a6164 	.word	0x203a6164
1a008318:	ff006425 	.word	0xff006425
1a00831c:	3a4d4f52 	.word	0x3a4d4f52
1a008320:	00000000 	.word	0x00000000
1a008324:	736e6f43 	.word	0x736e6f43
1a008328:	65747369 	.word	0x65747369
1a00832c:	6169636e 	.word	0x6169636e
1a008330:	00000000 	.word	0x00000000
1a008334:	69706f43 	.word	0x69706f43
1a008338:	00007261 	.word	0x00007261
1a00833c:	706d7544 	.word	0x706d7544
1a008340:	53552820 	.word	0x53552820
1a008344:	ff002942 	.word	0xff002942
1a008348:	69706f43 	.word	0x69706f43
1a00834c:	52207261 	.word	0x52207261
1a008350:	203a4d4f 	.word	0x203a4d4f
1a008354:	00000000 	.word	0x00000000
1a008358:	20636f4c 	.word	0x20636f4c
1a00835c:	65522061 	.word	0x65522061
1a008360:	0000006d 	.word	0x0000006d
1a008364:	206d6552 	.word	0x206d6552
1a008368:	6f4c2061 	.word	0x6f4c2061
1a00836c:	ffff0063 	.word	0xffff0063
1a008370:	204d4f52 	.word	0x204d4f52
1a008374:	656c6573 	.word	0x656c6573
1a008378:	6f696363 	.word	0x6f696363
1a00837c:	6164616e 	.word	0x6164616e
1a008380:	6425203a 	.word	0x6425203a
1a008384:	ff000a0d 	.word	0xff000a0d
1a008388:	534e4553 	.word	0x534e4553
1a00838c:	5345524f 	.word	0x5345524f
1a008390:	0000003a 	.word	0x0000003a
1a008394:	65736552 	.word	0x65736552
1a008398:	63412f74 	.word	0x63412f74
1a00839c:	00000074 	.word	0x00000074
1a0083a0:	61746c41 	.word	0x61746c41
1a0083a4:	00000000 	.word	0x00000000
1a0083a8:	61636552 	.word	0x61636552
1a0083ac:	6f69626d 	.word	0x6f69626d
1a0083b0:	ffffff00 	.word	0xffffff00
1a0083b4:	6469656c 	.word	0x6469656c
1a0083b8:	4545206f 	.word	0x4545206f
1a0083bc:	4d4f5250 	.word	0x4d4f5250
1a0083c0:	00000d3a 	.word	0x00000d3a
1a0083c4:	2d205825 	.word	0x2d205825
1a0083c8:	ffff0020 	.word	0xffff0020
1a0083cc:	5f544942 	.word	0x5f544942
1a0083d0:	5f535542 	.word	0x5f535542
1a0083d4:	30203a31 	.word	0x30203a31
1a0083d8:	00000d20 	.word	0x00000d20
1a0083dc:	746e7570 	.word	0x746e7570
1a0083e0:	7375625f 	.word	0x7375625f
1a0083e4:	6425203a 	.word	0x6425203a
1a0083e8:	000a0d20 	.word	0x000a0d20
1a0083ec:	20535542 	.word	0x20535542
1a0083f0:	54494e49 	.word	0x54494e49
1a0083f4:	49414620 	.word	0x49414620
1a0083f8:	2044454c 	.word	0x2044454c
1a0083fc:	0000000d 	.word	0x0000000d
1a008400:	736e6573 	.word	0x736e6573
1a008404:	6420726f 	.word	0x6420726f
1a008408:	6f637365 	.word	0x6f637365
1a00840c:	69636f6e 	.word	0x69636f6e
1a008410:	000d6f64 	.word	0x000d6f64
1a008414:	002d5825 	.word	0x002d5825
1a008418:	4f43493c 	.word	0x4f43493c
1a00841c:	203e4d4d 	.word	0x203e4d4d
1a008420:	74696e49 	.word	0x74696e49
1a008424:	696c6169 	.word	0x696c6169
1a008428:	676e697a 	.word	0x676e697a
1a00842c:	00000d20 	.word	0x00000d20
1a008430:	74696177 	.word	0x74696177
1a008434:	0d676e69 	.word	0x0d676e69
1a008438:	00000000 	.word	0x00000000
1a00843c:	69766e65 	.word	0x69766e65
1a008440:	6f646e61 	.word	0x6f646e61
1a008444:	75207820 	.word	0x75207820
1a008448:	0d747261 	.word	0x0d747261
1a00844c:	00000000 	.word	0x00000000
1a008450:	4d4f433c 	.word	0x4d4f433c
1a008454:	444e414d 	.word	0x444e414d
1a008458:	0000203e 	.word	0x0000203e
1a00845c:	4120493c 	.word	0x4120493c
1a008460:	00203e4d 	.word	0x00203e4d
1a008464:	4355203c 	.word	0x4355203c
1a008468:	20312349 	.word	0x20312349
1a00846c:	200a0d3e 	.word	0x200a0d3e
1a008470:	00000000 	.word	0x00000000
1a008474:	415f553c 	.word	0x415f553c
1a008478:	203e4552 	.word	0x203e4552
1a00847c:	00000000 	.word	0x00000000
1a008480:	4d4f523c 	.word	0x4d4f523c
1a008484:	4e455320 	.word	0x4e455320
1a008488:	45522044 	.word	0x45522044
1a00848c:	53455551 	.word	0x53455551
1a008490:	3e444554 	.word	0x3e444554
1a008494:	00200a0d 	.word	0x00200a0d
1a008498:	6c75503c 	.word	0x6c75503c
1a00849c:	676e696c 	.word	0x676e696c
1a0084a0:	6e6f6320 	.word	0x6e6f6320
1a0084a4:	3e676966 	.word	0x3e676966
1a0084a8:	00000d20 	.word	0x00000d20
1a0084ac:	20636572 	.word	0x20636572
1a0084b0:	204d4f52 	.word	0x204d4f52
1a0084b4:	00000000 	.word	0x00000000
1a0084b8:	3a6d756e 	.word	0x3a6d756e
1a0084bc:	0d642520 	.word	0x0d642520
1a0084c0:	0000000a 	.word	0x0000000a
1a0084c4:	69636572 	.word	0x69636572
1a0084c8:	52206f62 	.word	0x52206f62
1a0084cc:	62204d4f 	.word	0x62204d4f
1a0084d0:	3a657479 	.word	0x3a657479
1a0084d4:	0d582520 	.word	0x0d582520
1a0084d8:	0000000a 	.word	0x0000000a
1a0084dc:	20636572 	.word	0x20636572
1a0084e0:	3a435243 	.word	0x3a435243
1a0084e4:	0d642520 	.word	0x0d642520
1a0084e8:	0000000a 	.word	0x0000000a
1a0084ec:	636c6163 	.word	0x636c6163
1a0084f0:	3a435243 	.word	0x3a435243
1a0084f4:	0d642520 	.word	0x0d642520
1a0084f8:	0000000a 	.word	0x0000000a
1a0084fc:	3d3d3d3d 	.word	0x3d3d3d3d
1a008500:	3d3d3d3d 	.word	0x3d3d3d3d
1a008504:	3d3d3d3d 	.word	0x3d3d3d3d
1a008508:	3d3d3d3d 	.word	0x3d3d3d3d
1a00850c:	3d3d3d3d 	.word	0x3d3d3d3d
1a008510:	3d3d3d3d 	.word	0x3d3d3d3d
1a008514:	000d3d3d 	.word	0x000d3d3d
1a008518:	5341543c 	.word	0x5341543c
1a00851c:	3e315f4b 	.word	0x3e315f4b
1a008520:	00000020 	.word	0x00000020
1a008524:	0d0a7325 	.word	0x0d0a7325
1a008528:	00000000 	.word	0x00000000
1a00852c:	4943553c 	.word	0x4943553c
1a008530:	203e315f 	.word	0x203e315f
1a008534:	00000000 	.word	0x00000000
1a008538:	4943553c 	.word	0x4943553c
1a00853c:	203e325f 	.word	0x203e325f
1a008540:	ffffff00 	.word	0xffffff00
1a008544:	65757270 	.word	0x65757270
1a008548:	00326162 	.word	0x00326162
1a00854c:	42544d53 	.word	0x42544d53
1a008550:	72694620 	.word	0x72694620
1a008554:	7261776d 	.word	0x7261776d
1a008558:	00002065 	.word	0x00002065
1a00855c:	73726556 	.word	0x73726556
1a008560:	3a6e6f69 	.word	0x3a6e6f69
1a008564:	00000020 	.word	0x00000020
1a008568:	0000002e 	.word	0x0000002e
1a00856c:	736e6553 	.word	0x736e6553
1a008570:	6e4d726f 	.word	0x6e4d726f
1a008574:	00000067 	.word	0x00000067
1a008578:	23494355 	.word	0x23494355
1a00857c:	61542032 	.word	0x61542032
1a008580:	00006b73 	.word	0x00006b73
1a008584:	70736944 	.word	0x70736944
1a008588:	2079616c 	.word	0x2079616c
1a00858c:	6b736154 	.word	0x6b736154
1a008590:	00000000 	.word	0x00000000
1a008594:	74747542 	.word	0x74747542
1a008598:	54206e6f 	.word	0x54206e6f
1a00859c:	006b7361 	.word	0x006b7361
1a0085a0:	6d6d6f43 	.word	0x6d6d6f43
1a0085a4:	63696e75 	.word	0x63696e75
1a0085a8:	6f697461 	.word	0x6f697461
1a0085ac:	6154206e 	.word	0x6154206e
1a0085b0:	00006b73 	.word	0x00006b73
1a0085b4:	736e6f43 	.word	0x736e6f43
1a0085b8:	20656c6f 	.word	0x20656c6f
1a0085bc:	6b736154 	.word	0x6b736154
1a0085c0:	ffffff00 	.word	0xffffff00

1a0085c4 <Bloque>:
1a0085c4:	1f1f1f1f 1f1f1f1f                       ........

1a0085cc <Entrepiso>:
1a0085cc:	001f1f1f 1f1f0000                       ........

1a0085d4 <InfDer>:
1a0085d4:	1f1f1f1f 1c1e1f1f                       ........

1a0085dc <InfIzq>:
1a0085dc:	1f1f1f1f 070f1f1f                       ........

1a0085e4 <Piso>:
1a0085e4:	00000000 1f1f1f00 75736956 7a696c61     ........Visualiz
1a0085f4:	6f646e61 0000203a 736e6553 7365726f     ando: ..Sensores
1a008604:	206e6520 72616c61 0000616d 73657270      en alarma..pres
1a008614:	656e6f69 616e7520 63657420 0000616c     ione una tecla..
1a008624:	61726170 4c415320 ff005249 61746c41     para SALIR..Alta
1a008634:	20656420 736e6573 203a726f 00000000      de sensor: ....
1a008644:	656e6f43 20657463 73206c65 6f736e65     Conecte el senso
1a008654:	6e652072 00000000 66206c65 746e6572     r en....el frent
1a008664:	65642065 20616c20 00494355 72702079     e de la UCI.y pr
1a008674:	6f697365 4520656e 5245544e ffffff00     esione ENTER....
1a008684:	00203e2d 20494355 00000023 00322320     -> .UCI #... #2.
1a008694:	00312320 3a444f4d 00000000 414c4120      #1.MOD:.... ALA
1a0086a4:	00414d52 41462020 00414c4c 524f4e20     RMA.  FALLA. NOR
1a0086b4:	004c414d 3a544341 00002020 0036332f     MAL.ACT:  ../36.
1a0086c4:	4d524c41 ff00203a 71656843 6e616575     ALRM: ..Chequean
1a0086d4:	00006f64 736e6f63 65747369 6169636e     do..consistencia
1a0086e4:	4d4f5220 ffffff00 4f206f6e ffff004b      ROM....no OK...
1a0086f4:	ff004b4f 736e6f43 6f6e2074 65686320     OK..Const no che
1a008704:	61657571 ff006164 534d4f52 6e6f6320     queada..ROMS con
1a008714:	74736973 65746e65 ffff0073 69706f43     sistentes...Copi
1a008724:	6f646e61 ff003a20 736e6553 7365726f     ando :..Sensores
1a008734:	616e6920 76697463 ff00736f 41545345      inactivos..ESTA
1a008744:	00534f44 20494355 41434f4c 20203a4c     DOS.UCI LOCAL:  
1a008754:	20202020 00000020 00003123 00003223          ...#1..#2..
1a008764:	52524520 0000524f 20494355 4f4d4552      ERROR..UCI REMO
1a008774:	203a4154 20202020 00000020 00006b4f     TA:      ...Ok..
1a008784:	00004f4e 20535542 534e4553 5345524f     NO..BUS SENSORES
1a008794:	2020203a 00000020 20535542 4e4f5246     :    ...BUS FRON
1a0087a4:	3a4c4154 20202020 ffff0020 3a656a45     TAL:     ...Eje:
1a0087b4:	00000020 3a6e6553 ffff0020 636e7546      ...Sen: ...Func
1a0087c4:	206e6f69 646e6570 746e6569 ffff0065     ion pendiente...

1a0087d4 <SupDer>:
1a0087d4:	1f1f1e1c 1f1f1f1f                       ........

1a0087dc <SupIzq>:
1a0087dc:	1f1f0f07 1f1f1f1f                       ........

1a0087e4 <Techo>:
1a0087e4:	001f1f1f 00000000 5f4d4f52 75716572     ........ROM_requ
1a0087f4:	0d747365 ffffff00 6c707041 74616369     est.....Applicat
1a008804:	206e6f69 6c6c614d 4620636f 656c6961     ion Malloc Faile
1a008814:	6f482064 0d216b6f 00000000 7362696c     d Hook!.....libs
1a008824:	6572662f 6f747265 6f732f73 65637275     /freertos/source
1a008834:	6f6f682f 632e736b ffffff00 70410a0d     /hooks.c......Ap
1a008844:	63696c70 6f697461 7453206e 206b6361     plication Stack 
1a008854:	7265764f 776f6c66 6f202121 6154206e     Overflow!! on Ta
1a008864:	203a6b73 0a0d7325 ffffff00 41760a0d     sk: %s........vA
1a008874:	72657373 6c614374 2864656c 200a0d29     ssertCalled().. 
1a008884:	4c4c2020 20656e69 626d754e 3d207265       LLine Number =
1a008894:	0d642520 2020200a 656c6946 6d614e20      %d..   File Nam
1a0088a4:	203d2065 0a0d7325 ff000a0d 454c4449     e = %s......IDLE
1a0088b4:	ffffff00 51726d54 ffffff00 20726d54     ....TmrQ....Tmr 
1a0088c4:	00637653                                Svc.

1a0088c8 <ExtRateIn>:
1a0088c8:	00000000                                ....

1a0088cc <GpioButtons>:
1a0088cc:	08000400 09010900                       ........

1a0088d4 <GpioLeds>:
1a0088d4:	01050005 0e000205 0c010b01              ............

1a0088e0 <GpioPorts>:
1a0088e0:	03030003 0f050403 05031005 07030603     ................
1a0088f0:	ffff0802                                ....

1a0088f4 <OscRateIn>:
1a0088f4:	00b71b00                                ....

1a0088f8 <InitClkStates>:
1a0088f8:	01010f01                                ....

1a0088fc <pinmuxing>:
1a0088fc:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a00890c:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a00891c:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a00892c:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a00893c:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a00894c:	00d50301 00d50401 00160107 00560207     ..............V.
1a00895c:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a00896c:	00570206                                ..W.

1a008970 <UART_BClock>:
1a008970:	01a201c2 01620182                       ......b.

1a008978 <UART_PClock>:
1a008978:	00820081 00a200a1 08040201 0f0f0f03     ................
1a008988:	000000ff                                ....

1a00898c <periph_to_base>:
1a00898c:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a00899c:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a0089ac:	000100e0 01000100 01200003 00060120     .......... . ...
1a0089bc:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a0089cc:	01820013 00120182 01a201a2 01c20011     ................
1a0089dc:	001001c2 01e201e2 0202000f 000e0202     ................
1a0089ec:	02220222 0223000d 001c0223              "."...#.#...

1a0089f8 <InitClkStates>:
1a0089f8:	00010100 00010909 0001090a 01010701     ................
1a008a08:	00010902 00010906 0101090c 0001090d     ................
1a008a18:	0001090e 0001090f 00010910 00010911     ................
1a008a28:	00010912 00010913 00011114 00011119     ................
1a008a38:	0001111a 0001111b                       ........

1a008a40 <lpcUarts>:
1a008a40:	40081000 06020406 00180205 40081000     ...@...........@
1a008a50:	09070509 00180706 40082000 00000000     ......... .@....
1a008a60:	00190000 400c1000 07060107 001a0602     .......@........
1a008a70:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a008a80:	02020302 001b0204                       ........

1a008a88 <gpioPinsInit>:
1a008a88:	02000104 00050701 05010d03 04080100     ................
1a008a98:	02020002 02000304 00000403 04070002     ................
1a008aa8:	030c0300 09050402 05040103 04030208     ................
1a008ab8:	04020305 06040504 0802000c 03000b06     ................
1a008ac8:	00090607 07060503 060f0504 03030004     ................
1a008ad8:	02000404 00050404 06040502 04060200     ................
1a008ae8:	0c050408 05040a04 0003010e 14010a00     ................
1a008af8:	010f0000 0d000012 00001101 0010010c     ................
1a008b08:	07070300 000f0300 01000001 00000000     ................
1a008b18:	000a0600 08060603 06100504 04030005     ................
1a008b28:	03000106 04090400 04010d05 010b0000     ................
1a008b38:	0200000f 00000001 00010104 02010800     ................
1a008b48:	01090000 09010006 05040002 04010200     ................
1a008b58:	02020105 02020504 0e00000a 01000b02     ................
1a008b68:	000c020b ffff0c01 d494c080              ............

1a008b74 <__sf_fake_stderr>:
	...

1a008b94 <__sf_fake_stdin>:
	...

1a008bb4 <__sf_fake_stdout>:
	...

1a008bd4 <_global_impure_ptr>:
1a008bd4:	10000054 2b302d23 6c680020 6665004c     T...#-0+ .hlL.ef
1a008be4:	47464567 32313000 36353433 41393837     gEFG.0123456789A
1a008bf4:	45444342 31300046 35343332 39383736     BCDEF.0123456789
1a008c04:	64636261 ff006665                       abcdef..
